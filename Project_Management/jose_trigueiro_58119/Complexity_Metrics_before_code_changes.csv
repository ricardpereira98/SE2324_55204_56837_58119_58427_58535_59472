Complexity metrics,terça, 7 nov. 2023 10:24:59 WET
Method,CogC,ev(G),iv(G),v(G)
AbortListener.actionPerformed(ActionEvent),0,n/a,n/a,n/a
AbortListener.execute(),1,n/a,n/a,n/a
AbortListener.keyPressed(KeyEvent),0,n/a,n/a,n/a
AbortListener.keyReleased(KeyEvent),0,n/a,n/a,n/a
AbortListener.keyTyped(KeyEvent),0,n/a,n/a,n/a
AbortListener.mouseClicked(MouseEvent),0,n/a,n/a,n/a
AbortListener.mouseEntered(MouseEvent),0,n/a,n/a,n/a
AbortListener.mouseExited(MouseEvent),0,n/a,n/a,n/a
AbortListener.mousePressed(MouseEvent),0,n/a,n/a,n/a
AbortListener.mouseReleased(MouseEvent),0,n/a,n/a,n/a
AbortListener.startTimer(int),0,n/a,n/a,n/a
AbortListener.stopped(),0,n/a,n/a,n/a
accept(File),0,1,1,1
"accept(File, String)",1,1,1,1
actionPerformed(ActionEvent),0,n/a,n/a,n/a
ancestorAdded(AncestorEvent),2,n/a,n/a,n/a
ancestorMoved(AncestorEvent),0,n/a,n/a,n/a
ancestorRemoved(AncestorEvent),0,n/a,n/a,n/a
"check(Unit, PathNode)",1,n/a,n/a,n/a
"compare(AIUnit, AIUnit)",8,1,7,7
"compare(Destination, Destination)",2,3,1,3
"compare(FreeColObject, FreeColObject)",0,1,1,1
"compare(Location, Location)",0,1,1,1
"compare(ModelMessage, ModelMessage)",5,n/a,n/a,n/a
"compare(Scope, Scope)",0,1,1,1
componentHidden(ComponentEvent),0,n/a,n/a,n/a
componentMoved(ComponentEvent),0,n/a,n/a,n/a
componentResized(ComponentEvent),0,n/a,n/a,n/a
componentShown(ComponentEvent),0,n/a,n/a,n/a
execute(),0,n/a,n/a,n/a
factorial(int),1,n/a,n/a,n/a
"getCost(Unit, Location, Location, int)",6,1,4,5
getDescription(),0,n/a,n/a,n/a
getGoal(),0,n/a,n/a,n/a
"getListCellRendererComponent(JList, Object, int, boolean, boolean)",3,n/a,n/a,n/a
getLocationData(UnitData),0,1,1,1
getMovesLeft(),1,1,1,1
getNewTurns(),1,1,1,1
getPreferredSize(),0,n/a,n/a,n/a
hasNext(),4,n/a,n/a,n/a
hasSubGoals(),0,n/a,n/a,n/a
iterator(),0,n/a,n/a,n/a
keyPressed(KeyEvent),0,n/a,n/a,n/a
keyReleased(KeyEvent),0,n/a,n/a,n/a
keyTyped(KeyEvent),1,n/a,n/a,n/a
mouseClicked(MouseEvent),2,n/a,n/a,n/a
mousePressed(MouseEvent),0,1,1,1
mouseReleased(MouseEvent),1,n/a,n/a,n/a
net.sf.freecol.AllTests.suite(),0,1,1,1
net.sf.freecol.FreeCol.FreeCol(),0,1,1,1
"net.sf.freecol.FreeCol.LogLevel.LogLevel(String, Level)",0,1,1,1
net.sf.freecol.FreeCol.LogLevel.buildLogger(),1,1,1,2
"net.sf.freecol.FreeCol.badFile(String, File)",1,1,2,2
net.sf.freecol.FreeCol.checkServerIntegrity(FreeColServer),3,1,2,4
net.sf.freecol.FreeCol.createSplashScreen(),3,1,3,3
"net.sf.freecol.FreeCol.errorFromException(Exception, String)",0,1,1,1
"net.sf.freecol.FreeCol.errorFromException(Exception, StringTemplate)",7,1,5,5
"net.sf.freecol.FreeCol.fatal(Logger, String)",1,1,2,2
net.sf.freecol.FreeCol.fatal(String),2,1,3,3
net.sf.freecol.FreeCol.fatal(StringTemplate),0,1,1,1
"net.sf.freecol.FreeCol.findArg(String, String[])",3,3,2,3
net.sf.freecol.FreeCol.getAdvantages(),1,1,1,2
net.sf.freecol.FreeCol.getAdvantagesDescription(),0,1,1,1
net.sf.freecol.FreeCol.getConfiguration(),6,1,7,7
net.sf.freecol.FreeCol.getDebugDescription(),0,1,1,1
net.sf.freecol.FreeCol.getDefaultSplashStream(JarURLConnection),0,1,1,1
net.sf.freecol.FreeCol.getDifficulty(),1,1,1,2
net.sf.freecol.FreeCol.getEuropeanCount(),0,1,1,1
net.sf.freecol.FreeCol.getFreeColProtocolVersion(),0,1,1,1
net.sf.freecol.FreeCol.getHeadless(),0,1,1,1
net.sf.freecol.FreeCol.getJarURLConnection(Class),0,1,1,1
net.sf.freecol.FreeCol.getLocale(),1,1,2,2
net.sf.freecol.FreeCol.getMetaServerAddress(),0,1,1,1
net.sf.freecol.FreeCol.getMetaServerPort(),0,1,1,1
net.sf.freecol.FreeCol.getName(),1,1,2,2
net.sf.freecol.FreeCol.getRevision(),0,1,1,1
net.sf.freecol.FreeCol.getRules(),1,1,1,2
net.sf.freecol.FreeCol.getRulesFile(),0,1,1,1
net.sf.freecol.FreeCol.getRulesSpecification(),1,1,2,2
net.sf.freecol.FreeCol.getServerHost(),1,1,1,2
net.sf.freecol.FreeCol.getServerName(),2,1,3,3
net.sf.freecol.FreeCol.getServerPort(),1,1,1,2
net.sf.freecol.FreeCol.getTc(),1,1,1,2
net.sf.freecol.FreeCol.getTimeout(boolean),3,1,1,3
net.sf.freecol.FreeCol.getValidAdvantages(),0,1,1,1
net.sf.freecol.FreeCol.getValidDifficulties(),0,1,1,1
net.sf.freecol.FreeCol.getValidGUIScales(),1,1,2,2
net.sf.freecol.FreeCol.getVersion(),0,1,1,1
net.sf.freecol.FreeCol.gripe(String),0,1,1,1
net.sf.freecol.FreeCol.gripe(StringTemplate),0,1,1,1
net.sf.freecol.FreeCol.handleArgs(String[]),96,1,59,70
"net.sf.freecol.FreeCol.loadSpecification(FreeColModFile, Advantages, String)",3,1,4,4
net.sf.freecol.FreeCol.main(String[]),31,1,24,26
"net.sf.freecol.FreeCol.printUsage(Options, int)",0,1,1,1
net.sf.freecol.FreeCol.processSpecialOptions(),18,1,8,8
net.sf.freecol.FreeCol.quit(int),0,1,1,1
net.sf.freecol.FreeCol.readVersion(JarURLConnection),1,1,2,2
net.sf.freecol.FreeCol.selectAdvantages(String),1,1,2,2
net.sf.freecol.FreeCol.selectDifficulty(String),1,1,2,2
net.sf.freecol.FreeCol.selectEuropeanCount(String),2,2,2,3
net.sf.freecol.FreeCol.setAdvantages(Advantages),0,1,1,1
net.sf.freecol.FreeCol.setDifficulty(OptionGroup),0,1,1,1
net.sf.freecol.FreeCol.setDifficulty(String),0,1,1,1
net.sf.freecol.FreeCol.setEuropeanCount(int),0,1,1,1
net.sf.freecol.FreeCol.setHeadless(boolean),0,1,1,1
net.sf.freecol.FreeCol.setLocale(String),5,2,4,4
net.sf.freecol.FreeCol.setMetaServer(String),4,2,4,6
net.sf.freecol.FreeCol.setName(String),0,1,1,1
net.sf.freecol.FreeCol.setRules(String),0,1,1,1
net.sf.freecol.FreeCol.setServerAddress(String),2,2,1,3
net.sf.freecol.FreeCol.setServerPort(String),2,2,1,3
net.sf.freecol.FreeCol.setTc(String),0,1,1,1
net.sf.freecol.FreeCol.setTimeout(String),2,1,1,3
net.sf.freecol.FreeCol.setWindowSize(String),6,1,3,4
net.sf.freecol.FreeCol.startClient(),13,1,5,5
net.sf.freecol.FreeCol.startServer(),17,3,9,10
net.sf.freecol.FreeCol.startTestClient(Specification),0,1,1,1
"net.sf.freecol.FreeCol.trace(Logger, String)",0,1,1,1
net.sf.freecol.client.AllTests.suite(),0,1,1,1
net.sf.freecol.client.ClientOptions.ClientOptions(),0,1,1,1
"net.sf.freecol.client.ClientOptions.addBooleanOption(String, String, boolean)",1,1,2,2
"net.sf.freecol.client.ClientOptions.addIntegerOption(String, String, int)",1,1,2,2
"net.sf.freecol.client.ClientOptions.addOptionGroup(String, String)",1,1,2,2
"net.sf.freecol.client.ClientOptions.addPercentageOption(String, String, int)",1,1,2,2
"net.sf.freecol.client.ClientOptions.addRangeOption(String, String, int, Map<Integer, String>)",3,1,3,3
"net.sf.freecol.client.ClientOptions.addTextOption(String, String, String)",1,1,2,2
net.sf.freecol.client.ClientOptions.fixClientOptions(),5,1,6,6
net.sf.freecol.client.ClientOptions.getActiveMods(),1,1,2,2
net.sf.freecol.client.ClientOptions.getColonyComparator(),0,1,1,1
net.sf.freecol.client.ClientOptions.getColonyComparatorInternal(int),3,5,2,7
net.sf.freecol.client.ClientOptions.getDisplayTileText(),0,1,1,1
net.sf.freecol.client.ClientOptions.getModelMessageComparator(Game),1,2,1,3
net.sf.freecol.client.ClientOptions.getPanelPosition(String),2,1,3,3
net.sf.freecol.client.ClientOptions.getPanelSize(String),2,1,3,3
net.sf.freecol.client.ClientOptions.getSpecialOptions(),2,1,2,3
net.sf.freecol.client.ClientOptions.getXMLTagName(),0,1,1,1
net.sf.freecol.client.ClientOptions.isRiverAnimationEnabled(),1,1,2,2
net.sf.freecol.client.ClientOptions.isTerrainAnimationsEnabled(),1,1,2,2
net.sf.freecol.client.ClientOptions.load(FreeColSavegameFile),3,2,2,4
net.sf.freecol.client.ClientOptions.merge(File),1,2,1,2
net.sf.freecol.client.ClientOptions.merge(FreeColSavegameFile),1,2,1,2
"net.sf.freecol.client.ClientOptions.regroup(String, String)",1,1,2,2
"net.sf.freecol.client.ClientTestHelper.startClient(FreeColServer, Specification)",0,1,1,1
net.sf.freecol.client.ClientTestHelper.stopClient(FreeColClient),0,1,1,1
"net.sf.freecol.client.FreeColClient.FreeColClient(SplashScreen, String, Dimension, String, boolean, boolean, File, ...)",20,1,13,15
net.sf.freecol.client.FreeColClient.addSpecificationActions(Specification),0,1,1,1
net.sf.freecol.client.FreeColClient.askServer(),0,1,1,1
net.sf.freecol.client.FreeColClient.askToQuit(),4,1,3,3
net.sf.freecol.client.FreeColClient.canSaveCurrentGame(),2,1,3,3
net.sf.freecol.client.FreeColClient.changeClientState(boolean),0,1,1,1
net.sf.freecol.client.FreeColClient.continuePlaying(),0,1,1,1
net.sf.freecol.client.FreeColClient.currentPlayerIsMyPlayer(),1,1,4,4
"net.sf.freecol.client.FreeColClient.failToMain(Exception, String)",0,1,1,1
"net.sf.freecol.client.FreeColClient.failToMain(Exception, StringTemplate)",3,1,3,3
net.sf.freecol.client.FreeColClient.getActionManager(),0,1,1,1
net.sf.freecol.client.FreeColClient.getAnimationSpeed(Player),3,1,2,3
net.sf.freecol.client.FreeColClient.getClientOptions(),0,1,1,1
net.sf.freecol.client.FreeColClient.getConnectController(),0,1,1,1
net.sf.freecol.client.FreeColClient.getFreeColServer(),0,1,1,1
net.sf.freecol.client.FreeColClient.getGUI(),0,1,1,1
net.sf.freecol.client.FreeColClient.getGame(),0,1,1,1
net.sf.freecol.client.FreeColClient.getInGameController(),0,1,1,1
net.sf.freecol.client.FreeColClient.getMapEditorController(),0,1,1,1
net.sf.freecol.client.FreeColClient.getMyPlayer(),0,1,1,1
net.sf.freecol.client.FreeColClient.getPreGameController(),0,1,1,1
net.sf.freecol.client.FreeColClient.getServerState(),1,1,2,2
net.sf.freecol.client.FreeColClient.getSinglePlayer(),0,1,1,1
net.sf.freecol.client.FreeColClient.getSoundController(),0,1,1,1
net.sf.freecol.client.FreeColClient.getVacantPlayerNames(),0,1,1,1
net.sf.freecol.client.FreeColClient.isAdmin(),1,1,2,2
net.sf.freecol.client.FreeColClient.isInGame(),0,1,1,1
net.sf.freecol.client.FreeColClient.isLoggedIn(),0,1,1,1
net.sf.freecol.client.FreeColClient.isMapEditor(),0,1,1,1
net.sf.freecol.client.FreeColClient.isReadyToStart(),2,2,2,3
net.sf.freecol.client.FreeColClient.loadClientOptions(File),6,1,6,6
"net.sf.freecol.client.FreeColClient.login(boolean, Game, Player, boolean)",1,1,2,2
net.sf.freecol.client.FreeColClient.logout(boolean),0,1,1,1
net.sf.freecol.client.FreeColClient.overrideDefaultUncaughtExceptionHandler(),9,1,5,5
net.sf.freecol.client.FreeColClient.quit(),2,1,3,3
net.sf.freecol.client.FreeColClient.restoreGUI(Player),2,1,2,3
net.sf.freecol.client.FreeColClient.retire(),1,1,2,2
net.sf.freecol.client.FreeColClient.setFreeColServer(FreeColServer),0,1,1,1
net.sf.freecol.client.FreeColClient.setGame(Game),0,1,1,1
net.sf.freecol.client.FreeColClient.setMapEditor(boolean),0,1,1,1
net.sf.freecol.client.FreeColClient.setMessageHandler(MessageHandler),0,1,1,1
net.sf.freecol.client.FreeColClient.setMyPlayer(Player),0,1,1,1
net.sf.freecol.client.FreeColClient.setServerState(ServerState),0,1,1,1
net.sf.freecol.client.FreeColClient.setSinglePlayer(boolean),0,1,1,1
net.sf.freecol.client.FreeColClient.setVacantPlayerNames(List<String>),0,1,1,1
net.sf.freecol.client.FreeColClient.skipTurns(int),2,3,2,3
"net.sf.freecol.client.FreeColClient.startFirstTaskInGui(String, boolean, File, Specification)",18,1,7,7
"net.sf.freecol.client.FreeColClient.startServer(boolean, boolean, File, InetAddress, int, String)",5,2,6,6
"net.sf.freecol.client.FreeColClient.startServer(boolean, boolean, Specification, InetAddress, int)",2,2,3,3
net.sf.freecol.client.FreeColClient.stopServer(),1,1,2,2
net.sf.freecol.client.FreeColClient.toggleClientOption(String),0,1,1,1
net.sf.freecol.client.FreeColClient.tutorialMode(),0,1,1,1
net.sf.freecol.client.FreeColClient.unblockServer(int),3,3,2,3
net.sf.freecol.client.FreeColClient.updateActions(),0,1,1,1
net.sf.freecol.client.control.AllTests.suite(),0,1,1,1
net.sf.freecol.client.control.ClientInputHandler.ClientInputHandler(FreeColClient),0,1,1,1
"net.sf.freecol.client.control.ClientInputHandler.handle(Connection, Message)",0,1,1,1
net.sf.freecol.client.control.ClientInputHandler.read(Connection),0,1,1,1
net.sf.freecol.client.control.ConnectController.ConnectController(FreeColClient),0,1,1,1
"net.sf.freecol.client.control.ConnectController.connect(String, String, int)",4,2,3,4
"net.sf.freecol.client.control.ConnectController.joinMultiplayerGame(String, int)",10,4,4,9
"net.sf.freecol.client.control.ConnectController.login(ServerState, Game, String, boolean, boolean)",10,2,7,9
net.sf.freecol.client.control.ConnectController.logout(LogoutReason),9,1,4,8
net.sf.freecol.client.control.ConnectController.mainTitle(),6,2,5,6
net.sf.freecol.client.control.ConnectController.newGame(),4,3,4,5
"net.sf.freecol.client.control.ConnectController.requestLogin(String, String, String, int)",4,4,2,4
net.sf.freecol.client.control.ConnectController.requestLogout(LogoutReason),8,2,5,6
"net.sf.freecol.client.control.ConnectController.startMultiplayerGame(Specification, boolean, InetAddress, int)",3,3,2,4
net.sf.freecol.client.control.ConnectController.startSavedGame(File),15,4,8,12
net.sf.freecol.client.control.ConnectController.startSinglePlayerGame(Specification),3,2,3,4
net.sf.freecol.client.control.FreeColClientHolder.FreeColClientHolder(FreeColClient),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.askServer(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.currentPlayerIsMyPlayer(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getClientOptions(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getConnectController(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getFreeColClient(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getFreeColServer(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getGUI(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getGame(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getMap(),1,1,2,2
net.sf.freecol.client.control.FreeColClientHolder.getMyPlayer(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.getSpecification(),1,1,2,2
net.sf.freecol.client.control.FreeColClientHolder.igc(),0,1,1,1
net.sf.freecol.client.control.FreeColClientHolder.pgc(),0,1,1,1
net.sf.freecol.client.control.InGameController.InGameController(FreeColClient),0,1,1,1
net.sf.freecol.client.control.InGameController.MoveMode.maximize(MoveMode),1,1,1,2
net.sf.freecol.client.control.InGameController.MoveMode.minimize(MoveMode),1,1,1,2
net.sf.freecol.client.control.InGameController.abandonColony(Colony),4,2,6,7
net.sf.freecol.client.control.InGameController.addPlayerHandler(List<Player>),0,1,1,1
"net.sf.freecol.client.control.InGameController.animateAttackHandler(Unit, Unit, Tile, Tile, boolean)",0,1,1,1
"net.sf.freecol.client.control.InGameController.animateMoveHandler(Unit, Tile, Tile)",0,1,1,1
"net.sf.freecol.client.control.InGameController.askAssignTradeRoute(Unit, TradeRoute)",6,4,4,6
"net.sf.freecol.client.control.InGameController.askClaimTile(Player, Tile, FreeColGameObject, int)",7,4,4,7
net.sf.freecol.client.control.InGameController.askClearGotoOrders(Unit),2,2,2,3
"net.sf.freecol.client.control.InGameController.askEmbark(Unit, Unit)",4,2,5,5
"net.sf.freecol.client.control.InGameController.askEmigrate(Europe, int)",4,2,4,5
"net.sf.freecol.client.control.InGameController.askLoadGoods(Location, GoodsType, int, Unit)",9,6,4,8
"net.sf.freecol.client.control.InGameController.askSetDestination(Unit, Location)",2,2,2,3
"net.sf.freecol.client.control.InGameController.askUnloadGoods(GoodsType, int, Unit)",2,2,2,3
"net.sf.freecol.client.control.InGameController.assignTeacher(Unit, Unit)",4,2,13,14
"net.sf.freecol.client.control.InGameController.assignTradeRoute(Unit, TradeRoute)",2,2,2,3
"net.sf.freecol.client.control.InGameController.attackRanged(Unit, Tile)",3,2,4,5
net.sf.freecol.client.control.InGameController.autoSaveGame(),15,2,7,9
"net.sf.freecol.client.control.InGameController.boardShip(Unit, Unit)",3,2,7,8
net.sf.freecol.client.control.InGameController.buildColony(Unit),22,8,12,18
"net.sf.freecol.client.control.InGameController.buyGoods(GoodsType, int, Unit)",3,2,7,8
"net.sf.freecol.client.control.InGameController.changeState(Unit, UnitState)",15,7,11,15
net.sf.freecol.client.control.InGameController.changeView(Tile),3,1,2,2
"net.sf.freecol.client.control.InGameController.changeView(Unit, boolean)",0,1,1,1
"net.sf.freecol.client.control.InGameController.changeWorkImprovementType(Unit, TileImprovementType)",7,2,11,12
"net.sf.freecol.client.control.InGameController.changeWorkType(Unit, GoodsType)",4,2,4,5
net.sf.freecol.client.control.InGameController.chat(String),1,2,1,2
"net.sf.freecol.client.control.InGameController.chatHandler(String, String, Color, boolean)",0,1,1,1
net.sf.freecol.client.control.InGameController.checkCashInTreasureTrain(Unit),12,4,9,11
"net.sf.freecol.client.control.InGameController.chooseFoundingFather(List<FoundingFather>, FoundingFather)",2,3,1,3
net.sf.freecol.client.control.InGameController.chooseFoundingFatherHandler(List<FoundingFather>),2,2,2,3
"net.sf.freecol.client.control.InGameController.claimTile(Tile, FreeColGameObject)",7,2,6,8
net.sf.freecol.client.control.InGameController.clearGotoOrders(Unit),3,2,3,4
net.sf.freecol.client.control.InGameController.clearOrders(Unit),6,3,5,7
net.sf.freecol.client.control.InGameController.clearSpeciality(Unit),8,4,6,9
"net.sf.freecol.client.control.InGameController.closeColony(Colony, boolean)",2,1,2,2
net.sf.freecol.client.control.InGameController.closeHandler(String),0,1,1,1
"net.sf.freecol.client.control.InGameController.continueIgnoreMessage(String, Turn)",2,1,4,4
net.sf.freecol.client.control.InGameController.declareIndependence(),5,5,6,9
net.sf.freecol.client.control.InGameController.deleteTradeRoute(TradeRoute),1,1,2,2
"net.sf.freecol.client.control.InGameController.diplomacyHandler(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",10,1,5,8
net.sf.freecol.client.control.InGameController.disbandUnit(Unit),10,4,8,11
"net.sf.freecol.client.control.InGameController.displayChat(String, String, Color, boolean)",0,1,1,1
"net.sf.freecol.client.control.InGameController.displayModelMessages(boolean, boolean)",12,1,9,9
net.sf.freecol.client.control.InGameController.displayTurnReportMessages(),0,1,1,1
net.sf.freecol.client.control.InGameController.doEndTurn(boolean),15,6,8,11
net.sf.freecol.client.control.InGameController.doExecuteGotoOrders(),16,7,8,13
"net.sf.freecol.client.control.InGameController.emigrate(Player, int, int, boolean)",3,2,4,5
"net.sf.freecol.client.control.InGameController.emigration(Player, int, boolean)",7,5,4,6
net.sf.freecol.client.control.InGameController.endTurn(boolean),2,2,2,3
"net.sf.freecol.client.control.InGameController.equipUnitForRole(Unit, Role, int)",26,10,15,20
"net.sf.freecol.client.control.InGameController.error(StringTemplate, String)",0,1,1,1
"net.sf.freecol.client.control.InGameController.errorHandler(StringTemplate, String)",0,1,1,1
net.sf.freecol.client.control.InGameController.executeGotoOrders(),2,2,2,3
"net.sf.freecol.client.control.InGameController.featureChangeHandler(FreeColGameObject, List<FreeColObject>, boolean)",31,1,12,15
net.sf.freecol.client.control.InGameController.fireChanges(ObjectWas...),5,1,3,3
"net.sf.freecol.client.control.InGameController.firstContact(Player, Player, Tile, boolean)",3,2,2,5
"net.sf.freecol.client.control.InGameController.firstContactHandler(Player, Player, Tile, int)",0,1,1,1
"net.sf.freecol.client.control.InGameController.followTradeRoute(Unit, List<ModelMessage>)",48,11,22,25
net.sf.freecol.client.control.InGameController.fountainOfYouthHandler(int),0,1,1,1
net.sf.freecol.client.control.InGameController.gameEndedHandler(String),0,1,1,1
"net.sf.freecol.client.control.InGameController.getMissionaryChoice(Unit, IndianSettlement, Direction)",12,2,5,8
"net.sf.freecol.client.control.InGameController.getNationAt(Tile, Direction)",3,1,3,3
net.sf.freecol.client.control.InGameController.getSaveGameString(Game),0,1,1,1
"net.sf.freecol.client.control.InGameController.getSettlementAt(Tile, Direction)",0,1,1,1
"net.sf.freecol.client.control.InGameController.goToTile(Unit, PathNode)",4,3,5,7
net.sf.freecol.client.control.InGameController.highScore(Boolean),3,1,1,3
"net.sf.freecol.client.control.InGameController.highScoresHandler(String, List<HighScore>)",0,1,1,1
"net.sf.freecol.client.control.InGameController.ignoreMessage(ModelMessage, boolean)",6,2,4,5
"net.sf.freecol.client.control.InGameController.inciteHandler(Unit, IndianSettlement, Player, int)",6,1,4,4
"net.sf.freecol.client.control.InGameController.indianDemandHandler(Unit, Colony, GoodsType, int)",8,1,3,7
net.sf.freecol.client.control.InGameController.invokeLater(Runnable),0,1,1,1
net.sf.freecol.client.control.InGameController.joinColony(Unit),3,1,5,5
net.sf.freecol.client.control.InGameController.leaveShip(Unit),4,2,5,6
"net.sf.freecol.client.control.InGameController.loadCargo(Goods, Unit)",8,5,9,11
net.sf.freecol.client.control.InGameController.loadGame(),5,3,4,6
"net.sf.freecol.client.control.InGameController.loadUnitAtStop(Unit, LogBuilder)",66,8,36,39
"net.sf.freecol.client.control.InGameController.logoutHandler(Player, LogoutReason)",3,2,3,4
"net.sf.freecol.client.control.InGameController.lootCargo(Unit, List<Goods>, String)",3,2,5,6
"net.sf.freecol.client.control.InGameController.lootCargoHandler(Unit, List<Goods>, String)",0,1,1,1
"net.sf.freecol.client.control.InGameController.monarchAction(MonarchAction, boolean)",3,2,2,4
"net.sf.freecol.client.control.InGameController.monarchActionHandler(MonarchAction, StringTemplate, String)",0,1,1,1
"net.sf.freecol.client.control.InGameController.moveAttack(Unit, Direction)",4,2,5,6
"net.sf.freecol.client.control.InGameController.moveAttackSettlement(Unit, Direction)",18,4,9,13
"net.sf.freecol.client.control.InGameController.moveAutoload(Unit, List<Unit>)",6,3,4,5
"net.sf.freecol.client.control.InGameController.moveAwayFromEurope(Unit, Location)",4,1,6,6
"net.sf.freecol.client.control.InGameController.moveDiplomacy(Unit, Direction, DiplomaticTrade)",3,3,2,3
"net.sf.freecol.client.control.InGameController.moveDirection(Unit, Direction, boolean)",54,1,23,60
"net.sf.freecol.client.control.InGameController.moveDisembark(Unit, Direction)",15,3,8,10
"net.sf.freecol.client.control.InGameController.moveEmbark(Unit, Direction)",10,5,7,9
"net.sf.freecol.client.control.InGameController.moveExplore(Unit, Direction)",5,3,5,5
"net.sf.freecol.client.control.InGameController.moveHighSeas(Unit, Direction)",8,5,10,10
"net.sf.freecol.client.control.InGameController.moveLearnSkill(Unit, Direction)",14,1,9,9
"net.sf.freecol.client.control.InGameController.movePath(Unit, PathNode)",22,10,10,11
"net.sf.freecol.client.control.InGameController.moveScoutColony(Unit, Direction)",3,5,3,6
"net.sf.freecol.client.control.InGameController.moveScoutIndianSettlement(Unit, Direction)",7,4,5,9
"net.sf.freecol.client.control.InGameController.moveSpy(Unit, Direction)",3,1,3,3
"net.sf.freecol.client.control.InGameController.moveTile(Unit, Direction)",15,4,16,18
"net.sf.freecol.client.control.InGameController.moveTo(Unit, Location)",13,8,10,11
"net.sf.freecol.client.control.InGameController.moveToDestination(Unit, List<ModelMessage>)",19,1,15,15
"net.sf.freecol.client.control.InGameController.moveTowardEurope(Unit, Europe)",1,1,2,2
"net.sf.freecol.client.control.InGameController.moveTrade(Unit, Direction)",4,4,3,4
"net.sf.freecol.client.control.InGameController.moveTribute(Unit, int, Direction)",1,2,2,2
"net.sf.freecol.client.control.InGameController.moveUnit(Unit, Direction)",8,3,10,12
"net.sf.freecol.client.control.InGameController.moveUseMissionary(Unit, Direction)",1,2,1,2
"net.sf.freecol.client.control.InGameController.nameNewRegion(Tile, Unit, Region, String)",2,2,1,4
net.sf.freecol.client.control.InGameController.nationSummary(Player),3,4,2,4
"net.sf.freecol.client.control.InGameController.nationSummaryHandler(Player, NationSummary)",0,1,1,1
"net.sf.freecol.client.control.InGameController.nativeTrade(NativeTrade, TradeAction, NativeTradeItem, StringTemplate)",36,9,10,17
"net.sf.freecol.client.control.InGameController.nativeTradeHandler(NativeTradeAction, NativeTrade)",3,3,2,13
"net.sf.freecol.client.control.InGameController.newLandName(Unit, String)",3,3,1,4
"net.sf.freecol.client.control.InGameController.newLandNameHandler(Unit, String)",3,1,2,3
"net.sf.freecol.client.control.InGameController.newRegionName(Region, Tile, Unit, String)",2,2,1,4
"net.sf.freecol.client.control.InGameController.newRegionNameHandler(Region, Tile, Unit, String)",16,1,5,6
net.sf.freecol.client.control.InGameController.newTradeRoute(Player),3,2,3,4
net.sf.freecol.client.control.InGameController.newTradeRouteHandler(TradeRoute),0,1,1,1
net.sf.freecol.client.control.InGameController.newTurn(int),3,2,4,4
net.sf.freecol.client.control.InGameController.newTurnHandler(int),0,1,1,1
net.sf.freecol.client.control.InGameController.nextActiveUnit(),1,2,1,2
net.sf.freecol.client.control.InGameController.nextModelMessage(),0,1,1,1
"net.sf.freecol.client.control.InGameController.partialHandler(FreeColGameObject, Map<String, String>)",7,1,6,7
net.sf.freecol.client.control.InGameController.payArrears(GoodsType),7,5,5,8
net.sf.freecol.client.control.InGameController.payForBuilding(Colony),7,5,6,8
net.sf.freecol.client.control.InGameController.putOutsideColony(Unit),5,3,5,7
net.sf.freecol.client.control.InGameController.reapIgnoredMessages(Turn),0,1,1,1
net.sf.freecol.client.control.InGameController.reconnect(),3,1,2,2
net.sf.freecol.client.control.InGameController.reconnectHandler(),0,1,1,1
net.sf.freecol.client.control.InGameController.recruitUnitInEurope(int),5,4,4,6
"net.sf.freecol.client.control.InGameController.removeHandler(List<FreeColGameObject>, FreeColGameObject)",14,1,9,9
net.sf.freecol.client.control.InGameController.rename(Nameable),13,10,9,11
net.sf.freecol.client.control.InGameController.requireOurTurn(),2,2,2,3
net.sf.freecol.client.control.InGameController.saveAndQuit(),1,2,1,2
net.sf.freecol.client.control.InGameController.saveGame(),5,5,4,7
net.sf.freecol.client.control.InGameController.saveGame(File),4,2,3,4
"net.sf.freecol.client.control.InGameController.scoutSpeakToChiefHandler(Unit, IndianSettlement, String)",1,1,1,6
net.sf.freecol.client.control.InGameController.selectDestination(Unit),17,4,7,10
net.sf.freecol.client.control.InGameController.sellGoods(Goods),3,2,4,5
"net.sf.freecol.client.control.InGameController.setAIHandler(Player, boolean)",0,1,1,1
"net.sf.freecol.client.control.InGameController.setBuildQueue(Colony, List<BuildableType>)",3,2,4,5
net.sf.freecol.client.control.InGameController.setCurrentPlayer(Player),17,1,11,11
net.sf.freecol.client.control.InGameController.setCurrentPlayerHandler(Player),0,1,1,1
net.sf.freecol.client.control.InGameController.setDead(),12,4,6,7
net.sf.freecol.client.control.InGameController.setDeadHandler(Player),2,1,2,2
net.sf.freecol.client.control.InGameController.setGameConnected(),1,1,2,2
"net.sf.freecol.client.control.InGameController.setGoodsLevels(Colony, GoodsType)",2,2,1,3
net.sf.freecol.client.control.InGameController.setInDebugMode(),0,1,1,1
"net.sf.freecol.client.control.InGameController.setStanceHandler(Stance, Player, Player)",5,2,3,7
"net.sf.freecol.client.control.InGameController.showColonyPanel(Colony, Unit)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showColonyPanelWithCarrier(Colony, Unit)",1,1,1,2
"net.sf.freecol.client.control.InGameController.showEmigrationDialog(Player, boolean, int)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showEventPanel(String, String, String)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showInformationPanel(FreeColObject, String)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showInformationPanel(FreeColObject, StringTemplate)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",0,1,1,1
"net.sf.freecol.client.control.InGameController.showNegotiationDialog(Unit, Settlement, DiplomaticTrade, StringTemplate, Direction)",3,1,4,4
net.sf.freecol.client.control.InGameController.showStatusPanel(String),2,1,2,2
net.sf.freecol.client.control.InGameController.sound(String),0,1,1,1
net.sf.freecol.client.control.InGameController.spySettlementHandler(Tile),1,1,2,2
"net.sf.freecol.client.control.InGameController.startIgnoringMessage(String, Turn)",0,1,1,1
net.sf.freecol.client.control.InGameController.stopIgnoringMessage(String),0,1,1,1
net.sf.freecol.client.control.InGameController.trainUnitInEurope(UnitType),5,3,5,6
net.sf.freecol.client.control.InGameController.unload(Unit),35,5,12,17
"net.sf.freecol.client.control.InGameController.unloadCargo(Goods, boolean)",7,3,7,9
"net.sf.freecol.client.control.InGameController.unloadUnitAtStop(Unit, LogBuilder)",35,10,11,19
net.sf.freecol.client.control.InGameController.updateActiveUnit(Tile),6,4,4,6
"net.sf.freecol.client.control.InGameController.updateGUI(Tile, boolean)",3,1,5,5
net.sf.freecol.client.control.InGameController.updateHandler(List<FreeColObject>),6,4,5,5
net.sf.freecol.client.control.InGameController.updateTradeRoute(TradeRoute),1,2,1,2
net.sf.freecol.client.control.InGameController.victory(Boolean),2,1,2,2
net.sf.freecol.client.control.InGameController.waitUnit(),1,2,1,2
"net.sf.freecol.client.control.InGameController.work(Unit, WorkLocation)",14,7,9,12
net.sf.freecol.client.control.MapEditorController.MapEditorController(FreeColClient),0,1,1,1
net.sf.freecol.client.control.MapEditorController.createMiniMapThumbNail(),0,1,1,1
net.sf.freecol.client.control.MapEditorController.getDefaultSpecification(),0,1,1,1
net.sf.freecol.client.control.MapEditorController.getMapTransform(),0,1,1,1
net.sf.freecol.client.control.MapEditorController.loadGame(),1,1,2,2
net.sf.freecol.client.control.MapEditorController.loadGame(File),6,1,4,4
net.sf.freecol.client.control.MapEditorController.newMap(),2,1,2,2
net.sf.freecol.client.control.MapEditorController.requireNativeNations(Game),3,1,3,3
net.sf.freecol.client.control.MapEditorController.saveMapEditorGame(),2,1,3,3
net.sf.freecol.client.control.MapEditorController.saveMapEditorGame(File),6,1,3,3
net.sf.freecol.client.control.MapEditorController.setMapTransform(MapTransform),0,1,1,1
net.sf.freecol.client.control.MapEditorController.startMapEditor(),2,1,3,3
net.sf.freecol.client.control.MapEditorController.transform(Tile),1,1,2,2
net.sf.freecol.client.control.MapTransform.getDescriptionPanel(),0,1,1,1
net.sf.freecol.client.control.MapTransform.setDescriptionPanel(JPanel),0,1,1,1
net.sf.freecol.client.control.MoveTest.tearDown(),0,1,1,1
net.sf.freecol.client.control.MoveTest.testSimpleMove(),1,1,2,2
net.sf.freecol.client.control.PreGameController.PreGameController(FreeColClient),0,1,1,1
net.sf.freecol.client.control.PreGameController.addPlayerHandler(List<Player>),0,1,1,1
"net.sf.freecol.client.control.PreGameController.chatHandler(String, String, Color, boolean)",0,1,1,1
"net.sf.freecol.client.control.PreGameController.errorHandler(StringTemplate, String)",0,1,1,1
"net.sf.freecol.client.control.PreGameController.logoutHandler(Player, LogoutReason)",1,1,2,2
"net.sf.freecol.client.control.PreGameController.readyHandler(Player, boolean)",0,1,1,1
net.sf.freecol.client.control.PreGameController.requestLaunch(),2,1,2,2
net.sf.freecol.client.control.PreGameController.sendChat(String),0,1,1,1
"net.sf.freecol.client.control.PreGameController.setAvailable(Nation, NationState)",0,1,1,1
"net.sf.freecol.client.control.PreGameController.setAvailableHandler(Nation, NationState)",0,1,1,1
"net.sf.freecol.client.control.PreGameController.setColor(Nation, Color)",0,1,1,1
"net.sf.freecol.client.control.PreGameController.setColorHandler(Nation, Color)",0,1,1,1
net.sf.freecol.client.control.PreGameController.setNation(Nation),0,1,1,1
net.sf.freecol.client.control.PreGameController.setNationType(NationType),0,1,1,1
net.sf.freecol.client.control.PreGameController.setNationTypeHandler(NationType),0,1,1,1
net.sf.freecol.client.control.PreGameController.setReady(boolean),0,1,1,1
net.sf.freecol.client.control.PreGameController.startGameHandler(),7,3,3,4
net.sf.freecol.client.control.PreGameController.startGameInternal(),8,2,8,8
net.sf.freecol.client.control.PreGameController.updateGameOptions(),0,1,1,1
net.sf.freecol.client.control.PreGameController.updateGameOptionsHandler(OptionGroup),1,1,2,2
net.sf.freecol.client.control.PreGameController.updateHandler(List<FreeColObject>),8,1,4,4
net.sf.freecol.client.control.PreGameController.updateMapGeneratorOptions(),0,1,1,1
net.sf.freecol.client.control.PreGameController.updateMapGeneratorOptionsHandler(OptionGroup),1,1,2,2
"net.sf.freecol.client.control.SoundController.SoundController(FreeColClient, boolean)",5,3,3,4
net.sf.freecol.client.control.SoundController.canPlaySound(),1,1,2,2
net.sf.freecol.client.control.SoundController.getSoundMixerLabelText(),3,1,3,3
"net.sf.freecol.client.control.SoundController.play(SoundPlayer, String)",4,4,1,5
net.sf.freecol.client.control.SoundController.playMusic(String),0,1,1,1
net.sf.freecol.client.control.SoundController.playSound(String),0,1,1,1
net.sf.freecol.client.control.SoundController.setDefaultPlaylist(List<File>),1,1,2,2
net.sf.freecol.client.gui.AllTests.suite(),0,1,1,1
"net.sf.freecol.client.gui.Canvas.Canvas(FreeColClient, GraphicsDevice, Dimension, MapViewer, MapControls)",3,1,2,6
"net.sf.freecol.client.gui.Canvas.addAsFrame(JComponent, boolean, PopupPosition, boolean)",12,1,7,9
"net.sf.freecol.client.gui.Canvas.addCentered(Component, Integer)",0,1,1,1
net.sf.freecol.client.gui.Canvas.addMapControls(),2,2,2,3
"net.sf.freecol.client.gui.Canvas.addToCanvas(Component, Integer)",1,1,2,2
"net.sf.freecol.client.gui.Canvas.addToLayer(Component, Integer)",0,1,1,1
"net.sf.freecol.client.gui.Canvas.adjustLocationForClearSpace(Point, int, int)",2,1,5,6
"net.sf.freecol.client.gui.Canvas.animationLabel(JLabel, boolean)",2,1,2,2
"net.sf.freecol.client.gui.Canvas.capSizeToMaximum(JInternalFrame, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.Canvas.checkWindowed(GraphicsDevice, Dimension)",5,1,3,3
"net.sf.freecol.client.gui.Canvas.chooseLocation(Component, int, int, PopupPosition)",9,1,8,13
net.sf.freecol.client.gui.Canvas.closeMainPanel(),1,1,2,2
net.sf.freecol.client.gui.Canvas.closeMenus(),4,1,4,4
net.sf.freecol.client.gui.Canvas.closePanel(String),21,9,9,9
"net.sf.freecol.client.gui.Canvas.createFrame(JMenuBar, Rectangle)",0,1,1,1
net.sf.freecol.client.gui.Canvas.destroyFrame(),3,1,3,3
net.sf.freecol.client.gui.Canvas.dialogAdd(FreeColDialog<?>),1,1,2,2
net.sf.freecol.client.gui.Canvas.dialogRemove(FreeColDialog<?>),3,1,4,4
"net.sf.freecol.client.gui.Canvas.getClearSpace(int, int, int, int, int)",40,6,5,19
net.sf.freecol.client.gui.Canvas.getExistingFreeColDialog(Class<?>),3,3,2,3
net.sf.freecol.client.gui.Canvas.getExistingFreeColPanel(Class<T>),14,5,5,6
net.sf.freecol.client.gui.Canvas.getInternalFrame(Component),2,1,2,3
net.sf.freecol.client.gui.Canvas.getMatchingComponent(Predicate<Component>),10,5,4,5
net.sf.freecol.client.gui.Canvas.getParentFrame(),0,1,1,1
net.sf.freecol.client.gui.Canvas.getSavedPosition(Component),3,3,1,4
net.sf.freecol.client.gui.Canvas.getSavedSize(Component),3,3,1,4
net.sf.freecol.client.gui.Canvas.getShowingPanel(),6,5,1,5
net.sf.freecol.client.gui.Canvas.initializeInGame(),0,1,1,1
net.sf.freecol.client.gui.Canvas.isWindowed(),0,1,1,1
net.sf.freecol.client.gui.Canvas.mainTitle(),0,1,1,1
net.sf.freecol.client.gui.Canvas.mainTitleIfMainPanelIsAlreadyShowing(),2,1,3,3
net.sf.freecol.client.gui.Canvas.nothingShowing(),1,1,2,2
"net.sf.freecol.client.gui.Canvas.notifyClose(Component, JInternalFrame)",3,1,3,3
net.sf.freecol.client.gui.Canvas.paintComponent(Graphics),12,2,7,8
net.sf.freecol.client.gui.Canvas.paintJustTheMapImmediately(),2,2,3,4
"net.sf.freecol.client.gui.Canvas.playVideo(String, boolean, Runnable)",4,2,4,4
net.sf.freecol.client.gui.Canvas.prepareShowingMainMenu(),0,1,1,1
net.sf.freecol.client.gui.Canvas.quit(),0,1,1,1
net.sf.freecol.client.gui.Canvas.remove(Component),0,1,1,1
net.sf.freecol.client.gui.Canvas.removeFromCanvas(Component),7,2,4,6
net.sf.freecol.client.gui.Canvas.removeInGameComponents(),3,3,2,3
net.sf.freecol.client.gui.Canvas.removeKeyAndMouseListeners(),3,1,4,4
net.sf.freecol.client.gui.Canvas.removeMapControls(),2,2,2,3
net.sf.freecol.client.gui.Canvas.resetMenuBar(),0,1,1,1
"net.sf.freecol.client.gui.Canvas.restoreSavedSize(Component, Dimension)",8,1,3,9
"net.sf.freecol.client.gui.Canvas.saveInteger(String, String, int)",6,4,3,6
"net.sf.freecol.client.gui.Canvas.savePosition(Component, Point)",2,2,1,3
"net.sf.freecol.client.gui.Canvas.saveSize(Component, Dimension)",2,2,1,3
"net.sf.freecol.client.gui.Canvas.showFreeColDialog(FreeColDialog<T>, PopupPosition)",0,1,1,1
"net.sf.freecol.client.gui.Canvas.showFreeColPanel(FreeColPanel, PopupPosition, boolean)",0,1,1,1
net.sf.freecol.client.gui.Canvas.showMainPanel(),0,1,1,1
net.sf.freecol.client.gui.Canvas.showMapEditorTransformPanel(),0,1,1,1
net.sf.freecol.client.gui.Canvas.startMapEditorGUI(),0,1,1,1
net.sf.freecol.client.gui.Canvas.toggleFrame(),1,1,2,2
net.sf.freecol.client.gui.Canvas.toggleWindowed(),0,1,1,1
net.sf.freecol.client.gui.Canvas.updateFrameSizesAndPositions(Dimension),13,4,3,8
net.sf.freecol.client.gui.Canvas.updateMenuBar(),0,1,1,1
net.sf.freecol.client.gui.Canvas.updateRepaintTimer(boolean),2,1,2,2
net.sf.freecol.client.gui.Canvas.updateSize(),6,1,4,5
"net.sf.freecol.client.gui.Canvas.viewFreeColDialog(FreeColDialog<T>, PopupPosition)",7,1,5,5
"net.sf.freecol.client.gui.CanvasMapEditorMouseListener.CanvasMapEditorMouseListener(FreeColClient, Scrolling)",0,1,1,1
"net.sf.freecol.client.gui.CanvasMapEditorMouseListener.drawBox(JComponent, Point, Point)",2,2,4,5
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseClicked(MouseEvent),5,2,4,5
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseDragged(MouseEvent),1,2,1,2
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseEntered(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseExited(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseMoved(MouseEvent),1,2,1,2
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mousePressed(MouseEvent),14,2,10,11
net.sf.freecol.client.gui.CanvasMapEditorMouseListener.mouseReleased(MouseEvent),29,3,16,18
net.sf.freecol.client.gui.CanvasMouseListener.CanvasMouseListener(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.CanvasMouseListener.mouseClicked(MouseEvent),2,3,1,3
net.sf.freecol.client.gui.CanvasMouseListener.mouseEntered(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.CanvasMouseListener.mouseExited(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.CanvasMouseListener.mousePressed(MouseEvent),5,3,3,7
net.sf.freecol.client.gui.CanvasMouseListener.mouseReleased(MouseEvent),2,3,1,3
"net.sf.freecol.client.gui.CanvasMouseMotionListener.CanvasMouseMotionListener(FreeColClient, Scrolling)",0,1,1,1
net.sf.freecol.client.gui.CanvasMouseMotionListener.mouseDragged(MouseEvent),1,2,1,2
net.sf.freecol.client.gui.CanvasMouseMotionListener.mouseMoved(MouseEvent),0,1,1,1
"net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(String, T)",0,1,1,1
"net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(String, T, boolean)",0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.ChoiceItem(T),3,1,4,4
net.sf.freecol.client.gui.ChoiceItem.cancelOption(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.compareTo(ChoiceItem<T>),3,1,3,3
net.sf.freecol.client.gui.ChoiceItem.defaultOption(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.equals(Object),3,3,3,4
net.sf.freecol.client.gui.ChoiceItem.getChoice(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.getIcon(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.getObject(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.hashCode(),4,1,1,5
net.sf.freecol.client.gui.ChoiceItem.isCancel(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.isDefault(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.isEnabled(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.isOK(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.okOption(),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.setEnabled(boolean),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.setIcon(ImageIcon),0,1,1,1
net.sf.freecol.client.gui.ChoiceItem.toString(),0,1,1,1
net.sf.freecol.client.gui.FontLibrary.createMainFont(String),2,1,3,3
"net.sf.freecol.client.gui.FontLibrary.displayTest(Font, String)",2,1,3,3
net.sf.freecol.client.gui.FontLibrary.getFontKey(FontType),2,1,2,3
net.sf.freecol.client.gui.FontLibrary.getFontScaling(),0,1,1,1
net.sf.freecol.client.gui.FontLibrary.getMainFont(),0,1,1,1
net.sf.freecol.client.gui.FontLibrary.getMainFontSize(),0,1,1,1
net.sf.freecol.client.gui.FontLibrary.getScaledFont(String),0,1,1,1
"net.sf.freecol.client.gui.FontLibrary.getScaledFont(String, String)",0,1,1,1
"net.sf.freecol.client.gui.FontLibrary.getScaledFont(String, float, String)",1,2,1,2
"net.sf.freecol.client.gui.FontLibrary.getScaledSize(Size, float)",0,1,1,1
net.sf.freecol.client.gui.FontLibrary.getUnscaledFont(String),0,1,1,1
"net.sf.freecol.client.gui.FontLibrary.getUnscaledFont(String, String)",25,6,10,16
net.sf.freecol.client.gui.FontLibrary.setMainFontSize(float),0,1,1,1
"net.sf.freecol.client.gui.FontLibrary.tryFont(FontType, String)",2,2,1,3
net.sf.freecol.client.gui.FontTest.testLogicalSerif(),1,1,2,2
net.sf.freecol.client.gui.FrameMotionListener.FrameMotionListener(JInternalFrame),0,1,1,1
net.sf.freecol.client.gui.FrameMotionListener.mouseDragged(MouseEvent),2,2,3,4
net.sf.freecol.client.gui.FrameMotionListener.mousePressed(MouseEvent),2,2,2,3
net.sf.freecol.client.gui.FrameMotionListener.mouseReleased(MouseEvent),2,2,3,4
"net.sf.freecol.client.gui.FreeColFrame.FreeColFrame(FreeColClient, GraphicsDevice, JMenuBar, boolean, Rectangle)",8,1,4,9
net.sf.freecol.client.gui.FreeColFrame.exitFullScreen(),0,1,1,1
net.sf.freecol.client.gui.FreeColFrame.getFrameName(),0,1,1,1
net.sf.freecol.client.gui.FreeColFrame.removeMenuBar(),0,1,1,1
net.sf.freecol.client.gui.FreeColFrame.resetMenuBar(),1,1,2,2
net.sf.freecol.client.gui.FreeColFrame.setMenuBar(FreeColMenuBar),0,1,1,1
net.sf.freecol.client.gui.FreeColFrame.updateMenuBar(),1,1,2,2
"net.sf.freecol.client.gui.FullScreenFrameListener.FullScreenFrameListener(FreeColClient, FreeColFrame)",0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowActivated(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowClosed(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowClosing(WindowEvent),3,1,3,3
net.sf.freecol.client.gui.FullScreenFrameListener.windowDeactivated(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowDeiconified(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowIconified(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.FullScreenFrameListener.windowOpened(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.GUI.GUI(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.GUI.activateGotoPath(),0,1,1,1
"net.sf.freecol.client.gui.GUI.animateUnitAttack(Unit, Unit, Tile, Tile, boolean)",0,1,1,1
"net.sf.freecol.client.gui.GUI.animateUnitMove(Unit, Tile, Tile)",0,1,1,1
net.sf.freecol.client.gui.GUI.canGameChangingModsBeAdded(),0,1,1,1
net.sf.freecol.client.gui.GUI.canZoomInMap(),0,1,1,1
net.sf.freecol.client.gui.GUI.canZoomInMapControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.canZoomOutMap(),0,1,1,1
net.sf.freecol.client.gui.GUI.canZoomOutMapControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.changeView(),0,1,1,1
net.sf.freecol.client.gui.GUI.changeView(MapTransform),0,1,1,1
net.sf.freecol.client.gui.GUI.changeView(Tile),0,1,1,1
"net.sf.freecol.client.gui.GUI.changeView(Unit, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.changeWindowedMode(),0,1,1,1
net.sf.freecol.client.gui.GUI.clearGotoPath(),0,1,1,1
"net.sf.freecol.client.gui.GUI.clickAt(int, int, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.closeMainPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.closeMenus(),0,1,1,1
net.sf.freecol.client.gui.GUI.closePanel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.closeStatusPanel(),0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(String, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(StringTemplate, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, GoodsType, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, ImageIcon, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, Settlement, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirm(Tile, StringTemplate, Unit, String, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.confirmAbandonEducation(Unit, boolean)",11,3,7,10
net.sf.freecol.client.gui.GUI.confirmClearTradeRoute(Unit),1,2,1,2
"net.sf.freecol.client.gui.GUI.confirmEuropeanTribute(Unit, Colony, NationSummary)",11,2,4,10
"net.sf.freecol.client.gui.GUI.confirmHostileAction(Unit, Tile)",11,7,4,10
net.sf.freecol.client.gui.GUI.confirmLeaveColony(Unit),1,2,2,2
"net.sf.freecol.client.gui.GUI.confirmNativeTribute(Unit, IndianSettlement)",7,1,3,5
"net.sf.freecol.client.gui.GUI.confirmPreCombat(Unit, Tile)",3,2,3,3
net.sf.freecol.client.gui.GUI.confirmStopGame(),0,1,1,1
"net.sf.freecol.client.gui.GUI.createColonyTileImage(Tile, Colony)",0,1,1,1
"net.sf.freecol.client.gui.GUI.createTileImage(Tile, Player)",0,1,1,1
net.sf.freecol.client.gui.GUI.createTileImageWithBeachBorderAndItems(Tile),0,1,1,1
"net.sf.freecol.client.gui.GUI.displayChat(String, String, Color, boolean)",0,1,1,1
"net.sf.freecol.client.gui.GUI.displayColonyTiles(Graphics2D, Tile[][], Colony)",0,1,1,1
net.sf.freecol.client.gui.GUI.displayObject(FreeColObject),0,1,1,1
"net.sf.freecol.client.gui.GUI.displayStartChat(String, String, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.emergencyPurge(),0,1,1,1
net.sf.freecol.client.gui.GUI.enableMapControls(boolean),0,1,1,1
net.sf.freecol.client.gui.GUI.getActiveUnit(),0,1,1,1
net.sf.freecol.client.gui.GUI.getArmedUnitSettlementChoice(Settlement),0,1,1,1
"net.sf.freecol.client.gui.GUI.getBoycottChoice(Goods, Europe)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getBuyChoice(Unit, Settlement, Goods, int, boolean)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(StringTemplate, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, GoodsType, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Nation, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Settlement, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getChoice(Tile, StringTemplate, Unit, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getClaimChoice(Tile, Player, int, Player)",2,1,2,2
net.sf.freecol.client.gui.GUI.getFixedImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.GUI.getFocus(),0,1,1,1
net.sf.freecol.client.gui.GUI.getFocusMapPoint(),0,1,1,1
"net.sf.freecol.client.gui.GUI.getIndianSettlementTradeChoice(Settlement, StringTemplate, boolean, boolean, boolean)",4,2,4,5
"net.sf.freecol.client.gui.GUI.getInput(Tile, StringTemplate, String, String, String)",0,1,1,1
net.sf.freecol.client.gui.GUI.getMapViewDimension(),0,1,1,1
"net.sf.freecol.client.gui.GUI.getMissionaryChoice(Unit, IndianSettlement, boolean, boolean)",4,1,4,4
"net.sf.freecol.client.gui.GUI.getNewColonyName(Player, Tile)",4,4,4,4
net.sf.freecol.client.gui.GUI.getScaledImageLibrary(),0,1,1,1
"net.sf.freecol.client.gui.GUI.getScoutForeignColonyChoice(Colony, Unit, boolean)",0,1,1,1
"net.sf.freecol.client.gui.GUI.getScoutIndianSettlementChoice(IndianSettlement, String)",10,1,5,5
"net.sf.freecol.client.gui.GUI.getScrollDirection(int, int, int, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.getSelectedTile(),0,1,1,1
"net.sf.freecol.client.gui.GUI.getSellChoice(Unit, Settlement, Goods, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.getSoundMixerLabelText(),0,1,1,1
net.sf.freecol.client.gui.GUI.getViewMode(),0,1,1,1
net.sf.freecol.client.gui.GUI.installLookAndFeel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.invokeNowOrLater(Runnable),0,1,1,1
net.sf.freecol.client.gui.GUI.invokeNowOrWait(Runnable),0,1,1,1
net.sf.freecol.client.gui.GUI.isClientOptionsDialogShowing(),0,1,1,1
net.sf.freecol.client.gui.GUI.isGotoStarted(),0,1,1,1
net.sf.freecol.client.gui.GUI.isPanelShowing(),0,1,1,1
net.sf.freecol.client.gui.GUI.isWindowed(),0,1,1,1
net.sf.freecol.client.gui.GUI.miniMapToggleFogOfWarControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.miniMapToggleViewControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.paintImmediately(),0,1,1,1
net.sf.freecol.client.gui.GUI.performGoto(Tile),0,1,1,1
"net.sf.freecol.client.gui.GUI.performGoto(int, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.playSound(String),3,1,3,3
"net.sf.freecol.client.gui.GUI.prepareDrag(int, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.prepareShowingMainMenu(),0,1,1,1
net.sf.freecol.client.gui.GUI.quitGUI(),0,1,1,1
"net.sf.freecol.client.gui.GUI.reconnectGUI(Unit, Tile)",0,1,1,1
net.sf.freecol.client.gui.GUI.refresh(),0,1,1,1
net.sf.freecol.client.gui.GUI.refreshGuiUsingClientOptions(),0,1,1,1
net.sf.freecol.client.gui.GUI.refreshPlayersTable(),0,1,1,1
net.sf.freecol.client.gui.GUI.refreshTile(Tile),0,1,1,1
net.sf.freecol.client.gui.GUI.reloadResources(),0,1,1,1
net.sf.freecol.client.gui.GUI.removeComponent(Component),0,1,1,1
net.sf.freecol.client.gui.GUI.removeDialog(FreeColDialog<?>),0,1,1,1
net.sf.freecol.client.gui.GUI.removeInGameComponents(),0,1,1,1
net.sf.freecol.client.gui.GUI.removeTradeRoutePanel(FreeColPanel),0,1,1,1
net.sf.freecol.client.gui.GUI.repaint(),0,1,1,1
net.sf.freecol.client.gui.GUI.resetMapControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.resetMenuBar(),0,1,1,1
net.sf.freecol.client.gui.GUI.resetScrollSpeed(),0,1,1,1
"net.sf.freecol.client.gui.GUI.restoreSavedSize(Component, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.GUI.scrollMap(Direction, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.setFocus(Tile),0,1,1,1
net.sf.freecol.client.gui.GUI.setFocusMapPoint(Point),0,1,1,1
net.sf.freecol.client.gui.GUI.setRangedAttackMode(boolean),0,1,1,1
net.sf.freecol.client.gui.GUI.setUnitPath(PathNode),0,1,1,1
net.sf.freecol.client.gui.GUI.showAboutPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showBuildQueuePanel(Colony),0,1,1,1
"net.sf.freecol.client.gui.GUI.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showChatPanel(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showClientOptionsDialog(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showColonyPanel(Colony, Unit)",0,1,1,1
net.sf.freecol.client.gui.GUI.showColopediaPanel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.showColorChooserPanel(ActionListener),0,1,1,1
net.sf.freecol.client.gui.GUI.showCompactLabourReport(),0,1,1,1
net.sf.freecol.client.gui.GUI.showCompactLabourReport(UnitData),0,1,1,1
net.sf.freecol.client.gui.GUI.showConfirmDeclarationDialog(),0,1,1,1
net.sf.freecol.client.gui.GUI.showDeclarationPanel(Runnable),0,1,1,1
net.sf.freecol.client.gui.GUI.showDifficultyDialog(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showDumpCargoDialog(Unit, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showEditOptionDialog(Option),0,1,1,1
net.sf.freecol.client.gui.GUI.showEditSettlementDialog(IndianSettlement),0,1,1,1
"net.sf.freecol.client.gui.GUI.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showErrorPanel(Exception, StringTemplate)",1,1,2,2
"net.sf.freecol.client.gui.GUI.showErrorPanel(String, Runnable)",0,1,1,1
net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showErrorPanel(StringTemplate, String, Runnable)",2,1,2,3
net.sf.freecol.client.gui.GUI.showEuropePanel(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showEventPanel(String, String, String)",0,1,1,1
net.sf.freecol.client.gui.GUI.showFindSettlementPanel(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showFirstContactDialog(Player, Player, Tile, int, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showHighScoresPanel(String, List<HighScore>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showIndianSettlementPanel(IndianSettlement),0,1,1,1
"net.sf.freecol.client.gui.GUI.showInformationPanel(FreeColObject, String)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showInformationPanel(FreeColObject, StringTemplate)",0,1,1,1
net.sf.freecol.client.gui.GUI.showInformationPanel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.showInformationPanel(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.GUI.showLoadDialog(File, String...)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showLoadSaveFileDialog(File, String...)",2,1,3,3
"net.sf.freecol.client.gui.GUI.showLoadingSavegameDialog(boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.showLogFilePanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showMainPanel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.showMainTitle(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showMapSizeDialog(),0,1,1,1
net.sf.freecol.client.gui.GUI.showModelMessages(List<ModelMessage>),0,1,1,1
"net.sf.freecol.client.gui.GUI.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showNativeDemandDialog(Unit, Colony, GoodsType, int, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",0,1,1,1
net.sf.freecol.client.gui.GUI.showNewPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showNewPanel(Specification),0,1,1,1
"net.sf.freecol.client.gui.GUI.showOpeningVideo(String, Runnable)",0,1,1,1
net.sf.freecol.client.gui.GUI.showParametersDialog(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showPopupMenu(JPopupMenu, int, int)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showPreCombatDialog(Unit, FreeColGameObject, Tile)",0,1,1,1
net.sf.freecol.client.gui.GUI.showPurchasePanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showRecruitPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportCargoPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportColonyPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportContinentalCongressPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportEducationPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportExplorationPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportForeignAffairPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportHistoryPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportIndianPanel(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showReportLabourPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportMilitaryPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportNavalPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportProductionPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportReligiousPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportRequirementsPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportTradePanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showReportTurnPanel(List<ModelMessage>),0,1,1,1
net.sf.freecol.client.gui.GUI.showRiverStyleDialog(List<String>),0,1,1,1
"net.sf.freecol.client.gui.GUI.showSaveDialog(File, String)",0,1,1,1
net.sf.freecol.client.gui.GUI.showScaleMapSizeDialog(),0,1,1,1
"net.sf.freecol.client.gui.GUI.showSelectAmountDialog(GoodsType, int, int, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.showSelectDestinationDialog(Unit),0,1,1,1
"net.sf.freecol.client.gui.GUI.showSelectTributeAmountDialog(StringTemplate, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.showServerListPanel(List<ServerInfo>),0,1,1,1
"net.sf.freecol.client.gui.GUI.showStartGamePanel(Game, Player, boolean)",0,1,1,1
"net.sf.freecol.client.gui.GUI.showStatisticsPanel(Map<String, String>, Map<String, String>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showStatusPanel(String),0,1,1,1
net.sf.freecol.client.gui.GUI.showTilePanel(Tile),0,1,1,1
net.sf.freecol.client.gui.GUI.showTilePopup(Tile),0,1,1,1
net.sf.freecol.client.gui.GUI.showTradeRouteInputPanel(TradeRoute),0,1,1,1
net.sf.freecol.client.gui.GUI.showTradeRoutePanel(Unit),0,1,1,1
net.sf.freecol.client.gui.GUI.showTrainPanel(),0,1,1,1
net.sf.freecol.client.gui.GUI.showVictoryDialog(DialogHandler<Boolean>),0,1,1,1
"net.sf.freecol.client.gui.GUI.showWarehouseDialog(Colony, DialogHandler<Boolean>)",0,1,1,1
net.sf.freecol.client.gui.GUI.showWorkProductionPanel(Unit),0,1,1,1
net.sf.freecol.client.gui.GUI.startGUI(Dimension),0,1,1,1
net.sf.freecol.client.gui.GUI.startMapEditorGUI(),0,1,1,1
net.sf.freecol.client.gui.GUI.stopMapAsyncPainter(),0,1,1,1
"net.sf.freecol.client.gui.GUI.tileAt(int, int)",0,1,1,1
net.sf.freecol.client.gui.GUI.toggleRangedAttackMode(),0,1,1,1
net.sf.freecol.client.gui.GUI.traverseGotoPath(),0,1,1,1
net.sf.freecol.client.gui.GUI.updateEuropeanSubpanels(),0,1,1,1
"net.sf.freecol.client.gui.GUI.updateGoto(int, int, boolean)",0,1,1,1
net.sf.freecol.client.gui.GUI.updateMapControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.updateMenuBar(),0,1,1,1
net.sf.freecol.client.gui.GUI.useMapAsyncPainter(),0,1,1,1
net.sf.freecol.client.gui.GUI.zoomInMap(),0,1,1,1
net.sf.freecol.client.gui.GUI.zoomInMapControls(),0,1,1,1
net.sf.freecol.client.gui.GUI.zoomOutMap(),0,1,1,1
net.sf.freecol.client.gui.GUI.zoomOutMapControls(),0,1,1,1
net.sf.freecol.client.gui.GrayLayer.GrayLayer(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.GrayLayer.paintComponent(Graphics),10,2,8,9
net.sf.freecol.client.gui.GrayLayer.setPlayer(Player),1,2,1,2
net.sf.freecol.client.gui.ImageLibrary.ImageLibrary(ImageCache),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.ImageLibrary(float, ImageCache)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.PathType.getImageKey(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.PathType.getKey(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.PathType.getNextTurnImageKey(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.PathType.getPathType(Unit),10,1,4,5
net.sf.freecol.client.gui.ImageLibrary.changeScaleFactor(float),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.createChip(Graphics2D, String, Color, Color, double, Color, Color, ...)",4,1,3,4
"net.sf.freecol.client.gui.ImageLibrary.createStringImage(String, Color, Font, FontMetrics)",50,2,16,17
net.sf.freecol.client.gui.ImageLibrary.determineInformationPanelSkinKey(Player),4,1,3,4
"net.sf.freecol.client.gui.ImageLibrary.getAboveTileImageInternal(TileType, int, Dimension)",1,2,1,2
"net.sf.freecol.client.gui.ImageLibrary.getAlarmChip(Graphics2D, IndianSettlement, Player)",10,2,6,9
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledRiverDeltaTerrainImage(Direction, long)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledRiverTerrainImage(Tile, long)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledTerrainImage(TileType, long)",1,2,1,2
"net.sf.freecol.client.gui.ImageLibrary.getAnimatedScaledWaterAndBeachTerrainImage(TileType, List<Direction>, long)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getBaseTileTransitionImage(Tile, Direction, boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getBeachCenterImageResource(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getBeachCornerImage(int, int, int)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getBeachEdgeImage(int, int, int)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getBorderImage(TileType, Direction, int, int)",1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getBrightPanelBackground(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getBuildableTypeImage(BuildableType, Dimension)",1,1,2,2
"net.sf.freecol.client.gui.ImageLibrary.getBuildingTypeImage(BuildingType, Dimension)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getBuildingTypeKey(BuildingType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getButtonBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getButtonImages(String),3,1,3,3
net.sf.freecol.client.gui.ImageLibrary.getCanvasBackgroundImage(),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getColopediaCellImage(boolean),1,1,1,2
net.sf.freecol.client.gui.ImageLibrary.getColopediaConceptImage(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getColor(String),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getColor(String, Color)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getColorCellRendererBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getCompassRose(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getCursor(),1,2,2,2
"net.sf.freecol.client.gui.ImageLibrary.getForestCornerImage(TileType, Direction)",1,2,1,2
"net.sf.freecol.client.gui.ImageLibrary.getForestImage(TileType, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getForestImageInternal(TileType, TileImprovementStyle, Dimension)",5,3,3,4
net.sf.freecol.client.gui.ImageLibrary.getForestedTileSize(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getFoundingFatherImage(FoundingFather, boolean)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getGoodsColor(GoodsType, int, Location)",12,1,6,9
"net.sf.freecol.client.gui.ImageLibrary.getGoodsTypeImage(GoodsType, Dimension)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getGoodsTypeKey(GoodsType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getIndianSettlementChip(Graphics2D, IndianSettlement)",1,1,1,2
net.sf.freecol.client.gui.ImageLibrary.getInformationPanelSkin(Player),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getInformationPanelSkinTopInset(Player),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getLCRImage(Dimension),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getLibertyImage(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getListBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getLockLabel(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMeetingImage(Player),1,1,1,2
net.sf.freecol.client.gui.ImageLibrary.getMenuBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMenuBarBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMercenaryLeaderKey(int),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMiniMapBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMiniMapSkin(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMinimapBackgroundColor(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMinimapBorderColor(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMinimapEconomicColor(TileType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMinimapPoliticsColor(TileType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getMissionChip(Graphics2D, Player, boolean)",2,1,1,3
net.sf.freecol.client.gui.ImageLibrary.getMonarchImage(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getMonarchImage(String),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getMonarchKey(String),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getNationImage(Nation, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getNationImage(Nation, float)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getNationKey(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getObjectImage(FreeColObject),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getObjectImage(FreeColObject, Dimension)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getObjectImageIcon(FreeColObject),2,2,1,3
"net.sf.freecol.client.gui.ImageLibrary.getObjectImageInternal(FreeColObject, Dimension)",37,2,10,10
"net.sf.freecol.client.gui.ImageLibrary.getOccupationIndicatorChip(Graphics2D, Unit, String)",1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getOptionPaneBackground(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getOverlayImageInternal(TileType, int, Dimension)",1,2,1,2
net.sf.freecol.client.gui.ImageLibrary.getPanelBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getPanelBackground(Class<?>),5,3,3,4
net.sf.freecol.client.gui.ImageLibrary.getPathImage(PathType),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getPathImage(Unit),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getPathNextTurnImage(PathType),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getPathNextTurnImage(Unit),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getPlaceholderImage(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getPopupMenuBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getProgressBarBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getRangedTargetCrosshair(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getResourceTypeImage(ResourceType, Dimension, boolean)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getResourceTypeImage(ResourceType, float, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getResourceTypeKey(ResourceType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getRiverImage(String, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getRiverImageInternal(String, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getRiverMouthImage(Direction, int, int, int)",1,1,1,2
net.sf.freecol.client.gui.ImageLibrary.getRiverStyleKey(String),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getRiverStyleKeys(boolean),2,1,3,3
net.sf.freecol.client.gui.ImageLibrary.getRoadColor(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSZA(String, float)",1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getScaleFactor(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledAboveTileImage(Tile),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingImage(Building),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingTypeImage(BuildingType, Player, float)",1,1,1,2
"net.sf.freecol.client.gui.ImageLibrary.getScaledBuildingTypeImage(BuildingType, float)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledFont(String, String)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledForestImage(TileType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledForestImage(TileType, TileImprovementStyle)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledGoodsTypeImage(GoodsType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledImage(String),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledNationImage(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledOverlayImage(Tile),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledResourceImage(Resource),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledResourceTypeImage(ResourceType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(String),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(String, float)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledRiverImage(TileImprovementStyle),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledSettlementImage(Settlement),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledSettlementTypeImage(SettlementType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledTerrainImage(TileType, int, int)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledUnitImage(Unit),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getScaledUnitImage(Unit, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getScaledUnitTypeImage(UnitType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSettlementImage(Settlement, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSettlementImage(Settlement, float)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSettlementKey(Settlement),19,1,4,9
"net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeImage(SettlementType, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeImage(SettlementType, float)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSettlementTypeKey(SettlementType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSizedImage(String, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSizedOverlayImage(TileType, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSmallBuildableTypeImage(BuildableType, Player)",1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getSmallBuildingImage(Building),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallGoodsTypeImage(GoodsType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallNationImage(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallResourceTypeImage(ResourceType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallSettlementImage(Settlement),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallUnitImage(Unit),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitImage(Unit, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType, String, boolean)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getSmallUnitTypeImage(UnitType, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerGoodsTypeImage(GoodsType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerNationImage(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerRiverImage(String),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerSettlementImage(Settlement),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerSettlementTypeImage(SettlementType),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerUnitImage(Unit),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getSmallerUnitTypeImage(UnitType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getStringImage(Graphics, String, Color, Font)",2,2,2,3
"net.sf.freecol.client.gui.ImageLibrary.getTerrainImage(TileType, int, int, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getTerrainImageInternal(TileType, int, int, Dimension)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTerrainImageKey(TileType),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getTerrainMask(Direction),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTerrainMaskKey(Direction),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getTerrainMaskResource(Direction),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTextAreaBackground(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTextFieldBackground(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getTileImageWithOverlayAndForest(TileType, Dimension)",8,2,6,9
net.sf.freecol.client.gui.ImageLibrary.getTileImprovementImage(String),1,1,2,2
net.sf.freecol.client.gui.ImageLibrary.getTileSize(),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTinyUnitImage(Unit),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getTinyUnitTypeImage(UnitType),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getTinyUnitTypeImage(UnitType, boolean)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getToolTipBackground(),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitImage(Unit, boolean, float)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, Player, String, boolean, boolean, float)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, String, boolean, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImage(UnitType, float)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.getUnitTypeImageKey(UnitType, Player, String, boolean)",9,1,6,9
net.sf.freecol.client.gui.ImageLibrary.getUnscaledImage(String),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getUnscaledSmallerNationImage(Nation),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.getVideo(String),0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.makeForegroundColor(Color),2,1,2,3
net.sf.freecol.client.gui.ImageLibrary.makeStringBorderColor(Color),1,1,1,2
net.sf.freecol.client.gui.ImageLibrary.scale(Dimension),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.scale(Dimension, float)",0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.scaleDimension(Dimension, float)",0,1,1,1
net.sf.freecol.client.gui.ImageLibrary.scaleInt(int),0,1,1,1
"net.sf.freecol.client.gui.ImageLibrary.variationSeedUsing(int, int)",0,1,1,1
"net.sf.freecol.client.gui.LoadingSavegameInfo.LoadingSavegameInfo(boolean, InetAddress, int, String, boolean)",0,1,1,1
net.sf.freecol.client.gui.LoadingSavegameInfo.getAddress(),0,1,1,1
net.sf.freecol.client.gui.LoadingSavegameInfo.getPort(),0,1,1,1
net.sf.freecol.client.gui.LoadingSavegameInfo.getServerName(),0,1,1,1
net.sf.freecol.client.gui.LoadingSavegameInfo.isPublicServer(),0,1,1,1
net.sf.freecol.client.gui.LoadingSavegameInfo.isSinglePlayer(),0,1,1,1
net.sf.freecol.client.gui.ModifierFormat.format(float),1,1,2,2
net.sf.freecol.client.gui.ModifierFormat.getFeatureAsString(Feature),1,1,2,2
net.sf.freecol.client.gui.ModifierFormat.getModifierAsString(Modifier),0,1,1,1
"net.sf.freecol.client.gui.ModifierFormat.getModifierLabels(Modifier, FreeColSpecObjectType, Turn)",3,1,3,4
net.sf.freecol.client.gui.ModifierFormat.getModifierStrings(Modifier),0,1,1,1
"net.sf.freecol.client.gui.ModifierFormat.getModifierStrings(float, ModifierType)",3,2,2,5
net.sf.freecol.client.gui.ModifierFormat.getSourceName(FreeColObject),11,2,6,10
net.sf.freecol.client.gui.ModifierFormat.getUnknownValue(),0,1,1,1
net.sf.freecol.client.gui.ScrollThread.ScrollThread(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.ScrollThread.abort(),0,1,1,1
net.sf.freecol.client.gui.ScrollThread.isAborted(),0,1,1,1
net.sf.freecol.client.gui.ScrollThread.normalScrolling(GUI),14,6,6,8
net.sf.freecol.client.gui.ScrollThread.run(),0,1,1,1
net.sf.freecol.client.gui.ScrollThread.setDirection(Direction),0,1,1,1
"net.sf.freecol.client.gui.Scrolling.Scrolling(FreeColClient, Canvas)",0,1,1,1
net.sf.freecol.client.gui.Scrolling.getRootComponent(),0,1,1,1
"net.sf.freecol.client.gui.Scrolling.getScrollDirection(int, int, int)",13,1,1,13
net.sf.freecol.client.gui.Scrolling.isAsyncPainterEnabled(),0,1,1,1
net.sf.freecol.client.gui.Scrolling.performAutoScrollIfActive(MouseEvent),3,1,3,3
net.sf.freecol.client.gui.Scrolling.performDragScrollIfActive(MouseEvent),3,1,3,3
"net.sf.freecol.client.gui.Scrolling.scroll(MouseEvent, int)",4,4,5,5
net.sf.freecol.client.gui.Scrolling.stopScrollIfScrollIsActive(),3,1,3,3
"net.sf.freecol.client.gui.Size.Size(float, float)",0,1,1,1
net.sf.freecol.client.gui.Size.down(),1,1,2,2
net.sf.freecol.client.gui.Size.forFont(),0,1,1,1
net.sf.freecol.client.gui.Size.forImage(),0,1,1,1
net.sf.freecol.client.gui.Size.scaled(float),2,1,3,3
net.sf.freecol.client.gui.Size.up(),1,1,2,2
"net.sf.freecol.client.gui.SplashScreen.SplashScreen(GraphicsDevice, InputStream)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.SwingGUI(FreeColClient),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.activateGotoPath(),5,2,3,4
"net.sf.freecol.client.gui.SwingGUI.animate(Animation, JLabel)",3,1,3,3
"net.sf.freecol.client.gui.SwingGUI.animateUnitAttack(Unit, Unit, Tile, Tile, boolean)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.animateUnitMove(Unit, Tile, Tile)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.animations(List<Animation>),17,4,10,11
net.sf.freecol.client.gui.SwingGUI.canGameChangingModsBeAdded(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.canZoomInMap(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.canZoomInMapControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.canZoomOutMap(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.canZoomOutMapControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.changeActiveUnit(Unit),5,2,5,6
net.sf.freecol.client.gui.SwingGUI.changeDone(boolean),4,1,4,4
net.sf.freecol.client.gui.SwingGUI.changeMapScale(float),3,1,4,4
"net.sf.freecol.client.gui.SwingGUI.changeSelectedTile(Tile, boolean)",6,2,8,9
net.sf.freecol.client.gui.SwingGUI.changeView(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.changeView(MapTransform),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.changeView(Tile),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.changeView(Unit, boolean)",3,1,4,5
net.sf.freecol.client.gui.SwingGUI.changeViewMode(ViewMode),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.changeWindowedMode(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.clearDrag(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.clearGotoPath(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.clickAt(int, int, int)",51,13,21,24
net.sf.freecol.client.gui.SwingGUI.closeMainPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.closeMenus(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.closePanel(String),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.closeStatusPanel(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.configureMigLayout(float),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.confirm(Tile, StringTemplate, ImageIcon, String, String)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.createColonyTileImage(Tile, Colony)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.createTileImage(Tile, Player)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.createTileImageWithBeachBorderAndItems(Tile),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.determineMainFontSizeUsingClientOptions(int),5,3,5,5
net.sf.freecol.client.gui.SwingGUI.determineScaleFactorUsingClientOptions(int),11,1,6,8
"net.sf.freecol.client.gui.SwingGUI.displayChat(String, String, Color, boolean)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.displayColonyTiles(Graphics2D, Tile[][], Colony)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.displayObject(FreeColObject),10,1,8,8
"net.sf.freecol.client.gui.SwingGUI.displayStartChat(String, String, boolean)",1,1,2,2
net.sf.freecol.client.gui.SwingGUI.emergencyPurge(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.enableMapControls(boolean),3,2,2,3
net.sf.freecol.client.gui.SwingGUI.getActiveUnit(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.getChoice(Tile, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getDragPoint(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getFixedImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getFocus(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getFocusMapPoint(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.getInput(Tile, StringTemplate, String, String, String)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getMapScale(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.getMapViewDimension(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getPopupPosition(Tile),4,2,1,4
net.sf.freecol.client.gui.SwingGUI.getScaledImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getSelectedTile(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.getViewMode(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.installLookAndFeel(String),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.invokeNowOrLater(Runnable),2,1,2,2
net.sf.freecol.client.gui.SwingGUI.invokeNowOrWait(Runnable),4,1,3,3
net.sf.freecol.client.gui.SwingGUI.isClientOptionsDialogShowing(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.isDrag(int, int)",2,2,1,3
net.sf.freecol.client.gui.SwingGUI.isGotoStarted(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.isPanelShowing(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.isWindowed(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.miniMapToggleFogOfWarControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.miniMapToggleViewControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.paintImmediately(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.performGoto(Tile),5,1,5,5
"net.sf.freecol.client.gui.SwingGUI.performGoto(int, int)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.prepareDrag(int, int)",3,2,4,4
net.sf.freecol.client.gui.SwingGUI.prepareResources(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.prepareShowingMainMenu(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.prepareUnitLabelsForAnimation(List<Animation>),3,1,3,3
net.sf.freecol.client.gui.SwingGUI.quitGUI(),1,1,2,2
"net.sf.freecol.client.gui.SwingGUI.reconnectGUI(Unit, Tile)",6,1,5,5
net.sf.freecol.client.gui.SwingGUI.refresh(),3,1,4,4
net.sf.freecol.client.gui.SwingGUI.refreshGuiUsingClientOptions(),7,1,7,7
net.sf.freecol.client.gui.SwingGUI.refreshPlayersTable(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.refreshTile(Tile),5,1,4,4
"net.sf.freecol.client.gui.SwingGUI.refreshTilesForUnit(Unit, Tile, Tile)",5,1,4,6
"net.sf.freecol.client.gui.SwingGUI.releaseUnitOutForAnimation(Unit, JLabel)",1,1,2,2
net.sf.freecol.client.gui.SwingGUI.reloadResources(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.removeComponent(Component),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.removeDialog(FreeColDialog<?>),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.removeInGameComponents(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.removeTradeRoutePanel(FreeColPanel),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.repaint(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.resetMapControls(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.resetMapZoom(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.resetMenuBar(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.resetScrollSpeed(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.restoreSavedSize(Component, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.scrollMap(Direction, boolean)",7,2,7,7
"net.sf.freecol.client.gui.SwingGUI.setDragPoint(int, int)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.setFocus(Tile),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.setFocusMapPoint(Point),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.setRangedAttackMode(boolean),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.setUnitPath(PathNode),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showAboutPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showBuildQueuePanel(Colony),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showChatPanel(),1,1,2,2
"net.sf.freecol.client.gui.SwingGUI.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showClientOptionsDialog(),2,1,2,2
"net.sf.freecol.client.gui.SwingGUI.showColonyPanel(Colony, Unit)",7,3,5,6
net.sf.freecol.client.gui.SwingGUI.showColopediaPanel(String),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showColorChooserPanel(ActionListener),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showCompactLabourReport(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showCompactLabourReport(UnitData),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showConfirmDeclarationDialog(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showDeclarationPanel(Runnable),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showDumpCargoDialog(Unit, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showEditOptionDialog(Option),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showEditSettlementDialog(IndianSettlement),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showErrorPanel(String, Runnable)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showEuropePanel(),5,1,3,3
"net.sf.freecol.client.gui.SwingGUI.showEventPanel(String, String, String)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showFindSettlementPanel(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showFirstContactDialog(Player, Player, Tile, int, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showHighScoresPanel(String, List<HighScore>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showIndianSettlementPanel(IndianSettlement),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showInformationPanel(FreeColObject, StringTemplate)",4,1,4,4
"net.sf.freecol.client.gui.SwingGUI.showLoadDialog(File, String...)",5,3,4,5
"net.sf.freecol.client.gui.SwingGUI.showLoadingSavegameDialog(boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showLogFilePanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showMainPanel(String),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.showMainTitle(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showMapSizeDialog(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showModelMessages(List<ModelMessage>),5,2,3,5
"net.sf.freecol.client.gui.SwingGUI.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showNamingDialog(StringTemplate, String, Unit, DialogHandler<String>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showNativeDemandDialog(Unit, Colony, GoodsType, int, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",5,2,1,7
net.sf.freecol.client.gui.SwingGUI.showNewPanel(Specification),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showOpeningVideo(String, Runnable)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showParametersDialog(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showPopupMenu(JPopupMenu, int, int)",0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showPreCombatDialog(Unit, FreeColGameObject, Tile)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showPurchasePanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showRecruitPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportCargoPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportColonyPanel(),1,1,1,2
net.sf.freecol.client.gui.SwingGUI.showReportContinentalCongressPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportEducationPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportExplorationPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportForeignAffairPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportHistoryPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportIndianPanel(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportLabourPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportMilitaryPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportNavalPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportProductionPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportReligiousPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportRequirementsPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportTradePanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showReportTurnPanel(List<ModelMessage>),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showRiverStyleDialog(List<String>),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showSaveDialog(File, String)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showScaleMapSizeDialog(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showSelectAmountDialog(GoodsType, int, int, boolean)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showSelectDestinationDialog(Unit),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showSelectTributeAmountDialog(StringTemplate, int)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showServerListPanel(List<ServerInfo>),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showStartGamePanel(Game, Player, boolean)",5,3,4,4
"net.sf.freecol.client.gui.SwingGUI.showStatisticsPanel(Map<String, String>, Map<String, String>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showStatusPanel(String),2,1,2,2
net.sf.freecol.client.gui.SwingGUI.showTilePanel(Tile),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showTilePopup(Tile),3,2,3,4
net.sf.freecol.client.gui.SwingGUI.showTradeRouteInputPanel(TradeRoute),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showTradeRoutePanel(Unit),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.showTrainPanel(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showVictoryDialog(DialogHandler<Boolean>),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.showWarehouseDialog(Colony, DialogHandler<Boolean>)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.showWorkProductionPanel(Unit),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.startGUI(Dimension),5,1,2,3
net.sf.freecol.client.gui.SwingGUI.startGoto(),1,1,2,2
net.sf.freecol.client.gui.SwingGUI.startMapEditorGUI(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.stopGoto(),2,1,3,3
net.sf.freecol.client.gui.SwingGUI.stopMapAsyncPainter(),0,1,1,1
"net.sf.freecol.client.gui.SwingGUI.tileAt(int, int)",0,1,1,1
net.sf.freecol.client.gui.SwingGUI.toNonDiagonalDirections(Direction),1,5,5,5
net.sf.freecol.client.gui.SwingGUI.toggleRangedAttackMode(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.traverseGotoPath(),5,2,4,5
net.sf.freecol.client.gui.SwingGUI.updateEuropeanSubpanels(),6,1,3,4
"net.sf.freecol.client.gui.SwingGUI.updateGoto(int, int, boolean)",3,1,5,5
net.sf.freecol.client.gui.SwingGUI.updateGotoTile(Tile),12,4,8,10
net.sf.freecol.client.gui.SwingGUI.updateMapControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.updateMenuBar(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.updateUnitPath(),5,2,5,6
net.sf.freecol.client.gui.SwingGUI.useMapAsyncPainter(),0,1,1,1
net.sf.freecol.client.gui.SwingGUI.zoomInMap(),2,1,2,3
net.sf.freecol.client.gui.SwingGUI.zoomInMapControls(),1,2,1,2
net.sf.freecol.client.gui.SwingGUI.zoomOutMap(),2,1,2,3
net.sf.freecol.client.gui.SwingGUI.zoomOutMapControls(),1,2,1,2
"net.sf.freecol.client.gui.TilePopup.TilePopup(FreeColClient, Tile)",73,3,31,34
net.sf.freecol.client.gui.TilePopup.addColony(Colony),0,1,1,1
"net.sf.freecol.client.gui.TilePopup.addDebugItems(FreeColClient, Tile)",24,3,16,18
net.sf.freecol.client.gui.TilePopup.addIndianSettlement(IndianSettlement),0,1,1,1
net.sf.freecol.client.gui.TilePopup.addTile(Tile),1,1,2,2
"net.sf.freecol.client.gui.TilePopup.addUnit(Container, Unit, boolean, boolean)",6,1,4,6
net.sf.freecol.client.gui.TilePopup.hasItem(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.DialogCallback.DialogCallback(FreeColDialog<T>, PopupPosition, DialogHandler<T>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.DialogCallback.run(),2,1,2,2
"net.sf.freecol.client.gui.Widgets.Widgets(FreeColClient, Canvas)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.confirm(StringTemplate, ImageIcon, String, String, PopupPosition)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.getChoice(StringTemplate, ImageIcon, String, List<ChoiceItem<T>>, PopupPosition)",1,2,1,2
net.sf.freecol.client.gui.Widgets.getFrame(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.getInput(StringTemplate, String, String, String, PopupPosition)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showAboutPanel(),0,1,1,1
net.sf.freecol.client.gui.Widgets.showBuildQueuePanel(Colony),2,2,3,3
"net.sf.freecol.client.gui.Widgets.showCaptureGoodsDialog(Unit, List<Goods>, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showChatPanel(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showChooseFoundingFatherDialog(List<FoundingFather>, DialogHandler<FoundingFather>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showColopediaPanel(String),0,1,1,1
net.sf.freecol.client.gui.Widgets.showColorChooserPanel(ActionListener),0,1,1,1
net.sf.freecol.client.gui.Widgets.showCompactLabourReport(),0,1,1,1
net.sf.freecol.client.gui.Widgets.showCompactLabourReport(UnitData),0,1,1,1
net.sf.freecol.client.gui.Widgets.showConfirmDeclarationDialog(),0,1,1,1
net.sf.freecol.client.gui.Widgets.showDeclarationPanel(Runnable),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showDifficultyDialog(Specification, OptionGroup, boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showDumpCargoDialog(Unit, PopupPosition, DialogHandler<List<Goods>>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showEditOptionDialog(Option),1,2,1,2
net.sf.freecol.client.gui.Widgets.showEditSettlementDialog(IndianSettlement),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showEmigrationDialog(Player, boolean, DialogHandler<Integer>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showEndTurnDialog(List<Unit>, DialogHandler<Boolean>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showErrorPanel(String),1,2,1,2
net.sf.freecol.client.gui.Widgets.showEuropePanel(Runnable),4,2,3,4
"net.sf.freecol.client.gui.Widgets.showEventPanel(String, String, String)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showFindSettlementPanel(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showFirstContactDialog(Player, Player, Tile, int, PopupPosition, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showGameOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showHighScoresPanel(String, List<HighScore>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showIndianSettlementPanel(IndianSettlement, PopupPosition)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showInformationPanel(FreeColObject, PopupPosition, ImageIcon, StringTemplate)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showLoadDialog(File, FileFilter[])",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showLoadingSavegameDialog(boolean, boolean)",1,1,2,2
net.sf.freecol.client.gui.Widgets.showLogFilePanel(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showMapGeneratorOptionsDialog(boolean, DialogHandler<OptionGroup>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showMapSizeDialog(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showMonarchDialog(MonarchAction, StringTemplate, String, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showNamingDialog(StringTemplate, String, PopupPosition, DialogHandler<String>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showNativeDemandDialog(Unit, Colony, GoodsType, int, PopupPosition, DialogHandler<Boolean>)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showNegotiationDialog(FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate, PopupPosition)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showNewPanel(Specification),0,1,1,1
net.sf.freecol.client.gui.Widgets.showParametersDialog(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showPreCombatDialog(Unit, FreeColGameObject, PopupPosition)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showPurchasePanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showRecruitPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportCargoPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportColonyPanel(boolean),6,1,4,4
net.sf.freecol.client.gui.Widgets.showReportContinentalCongressPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportEducationPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportExplorationPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportForeignAffairPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportHistoryPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportIndianPanel(),1,1,2,2
"net.sf.freecol.client.gui.Widgets.showReportLabourDetailPanel(UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showReportLabourPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportMilitaryPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportNavalPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportProductionPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportReligiousPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportRequirementsPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportTradePanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showReportTurnPanel(List<ModelMessage>),2,1,2,2
net.sf.freecol.client.gui.Widgets.showRiverStyleDialog(List<String>),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showSaveDialog(File, FileFilter[], String)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showScaleMapSizeDialog(),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showSelectAmountDialog(GoodsType, int, int, boolean)",1,1,1,2
"net.sf.freecol.client.gui.Widgets.showSelectDestinationDialog(Unit, PopupPosition)",0,1,1,1
"net.sf.freecol.client.gui.Widgets.showSelectTributeAmountDialog(StringTemplate, int)",1,1,1,2
net.sf.freecol.client.gui.Widgets.showServerListPanel(List<ServerInfo>),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showStatisticsPanel(Map<String, String>, Map<String, String>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showTilePanel(Tile),2,2,2,3
net.sf.freecol.client.gui.Widgets.showTradeRouteInputPanel(TradeRoute),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showTradeRoutePanel(Unit, PopupPosition)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showTrainPanel(),1,1,2,2
net.sf.freecol.client.gui.Widgets.showVictoryDialog(DialogHandler<Boolean>),0,1,1,1
"net.sf.freecol.client.gui.Widgets.showWarehouseDialog(Colony, DialogHandler<Boolean>)",0,1,1,1
net.sf.freecol.client.gui.Widgets.showWorkProductionPanel(Unit),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.WindowedFrameListener(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowActivated(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowClosed(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowClosing(WindowEvent),3,1,3,3
net.sf.freecol.client.gui.WindowedFrameListener.windowDeactivated(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowDeiconified(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowIconified(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.WindowedFrameListener.windowOpened(WindowEvent),0,1,1,1
net.sf.freecol.client.gui.action.AboutAction.AboutAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.AboutAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ActionManager.ActionManager(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ActionManager.addSpecificationActions(Specification),6,1,5,5
net.sf.freecol.client.gui.action.ActionManager.getFreeColAction(String),1,1,2,2
"net.sf.freecol.client.gui.action.ActionManager.initializeActions(InGameController, ConnectController)",3,1,4,4
net.sf.freecol.client.gui.action.ActionManager.makeMiniMapButtons(),0,1,1,1
net.sf.freecol.client.gui.action.ActionManager.makeUnitActionButtons(Specification),9,1,8,8
net.sf.freecol.client.gui.action.ActionManager.refreshResources(),3,1,3,3
net.sf.freecol.client.gui.action.ActionManager.update(),1,1,2,2
net.sf.freecol.client.gui.action.AssignTradeRouteAction.AssignTradeRouteAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.AssignTradeRouteAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.AssignTradeRouteAction.shouldBeEnabled(),2,2,3,3
net.sf.freecol.client.gui.action.AttackRangedAction.AttackRangedAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.AttackRangedAction.actionPerformed(ActionEvent),1,2,1,2
net.sf.freecol.client.gui.action.AttackRangedAction.shouldBeEnabled(),2,2,4,5
net.sf.freecol.client.gui.action.BuildColonyAction.BuildColonyAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.BuildColonyAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.BuildColonyAction.shouldBeEnabled(),4,2,5,6
net.sf.freecol.client.gui.action.CenterAction.CenterAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.CenterAction.actionPerformed(ActionEvent),3,1,3,3
net.sf.freecol.client.gui.action.ChangeAction.ChangeAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ChangeAction.actionPerformed(ActionEvent),13,6,11,11
net.sf.freecol.client.gui.action.ChangeAction.shouldBeEnabled(),1,1,2,2
net.sf.freecol.client.gui.action.ChangeAction.update(),6,1,5,5
net.sf.freecol.client.gui.action.ChangeWindowedModeAction.ChangeWindowedModeAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ChangeWindowedModeAction.actionPerformed(ActionEvent),1,2,1,2
net.sf.freecol.client.gui.action.ChatAction.ChatAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ChatAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ChatAction.shouldBeEnabled(),3,1,5,5
net.sf.freecol.client.gui.action.ClearOrdersAction.ClearOrdersAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ClearOrdersAction.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.client.gui.action.ColopediaAction.ColopediaAction(FreeColClient, PanelType)",0,1,1,1
net.sf.freecol.client.gui.action.ColopediaAction.PanelType.getKey(),0,1,1,1
net.sf.freecol.client.gui.action.ColopediaAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ContinueAction.ContinueAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ContinueAction.actionPerformed(ActionEvent),5,1,4,4
net.sf.freecol.client.gui.action.DebugAction.DebugAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DebugAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.DebugAction.shouldBeEnabled(),0,1,1,1
net.sf.freecol.client.gui.action.DeclareIndependenceAction.DeclareIndependenceAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DeclareIndependenceAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.DeclareIndependenceAction.shouldBeEnabled(),1,1,3,3
net.sf.freecol.client.gui.action.DetermineHighSeasAction.DetermineHighSeasAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DetermineHighSeasAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.DetermineHighSeasAction.shouldBeEnabled(),1,1,3,3
net.sf.freecol.client.gui.action.DisbandUnitAction.DisbandUnitAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DisbandUnitAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.DisplayBordersAction.DisplayBordersAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DisplayBordersAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.DisplayFogOfWarAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.DisplayFogOfWarAction.shouldBeEnabled(),2,2,3,4
net.sf.freecol.client.gui.action.DisplayGridAction.DisplayGridAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.DisplayGridAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayText.getKey(),0,1,1,1
"net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayTileTextAction(FreeColClient, DisplayText)",0,1,1,1
net.sf.freecol.client.gui.action.DisplayTileTextAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.DisplayTileTextAction.shouldBeSelected(),1,1,4,4
net.sf.freecol.client.gui.action.EndTurnAction.EndTurnAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.EndTurnAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.EuropeAction.EuropeAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.EuropeAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.EuropeAction.shouldBeEnabled(),1,1,3,3
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction.ExecuteGotoOrdersAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.FindSettlementAction.FindSettlementAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.FindSettlementAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.FortifyAction.FortifyAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.FortifyAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.FortifyAction.shouldBeEnabled(),1,1,2,2
"net.sf.freecol.client.gui.action.FreeColAction.FreeColAction(FreeColClient, String)",2,1,3,3
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.InnerMenuKeyListener(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyPressed(MenuKeyEvent),1,1,2,2
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyReleased(MenuKeyEvent),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener.menuKeyTyped(MenuKeyEvent),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.addImageIcons(String),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.cloneOption(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getAccelerator(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getActionManager(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getClientOptions(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getConnectController(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getEnabledBy(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getFreeColClient(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getGUI(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getGame(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getGroup(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getId(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getKeyStrokeText(KeyStroke),1,1,2,2
net.sf.freecol.client.gui.action.FreeColAction.getMap(),1,1,2,2
net.sf.freecol.client.gui.action.FreeColAction.getMenuKeyListener(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getMnemonic(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getName(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getShortDescription(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getValue(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.getXMLTagName(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.hasOrderButtons(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.igc(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.readFromXML(FreeColXMLReader),2,1,3,3
net.sf.freecol.client.gui.action.FreeColAction.setAccelerator(KeyStroke),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.setGroup(String),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.setMnemonic(int),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.setValue(FreeColAction),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.shouldBeEnabled(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.toString(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.toXML(FreeColXMLWriter),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.update(),0,1,1,1
net.sf.freecol.client.gui.action.FreeColAction.updateImageIcon(String),2,1,2,2
net.sf.freecol.client.gui.action.FreeColAction.updateRegisteredImageIcons(),1,1,2,2
net.sf.freecol.client.gui.action.GotoAction.GotoAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.GotoAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.GotoAction.shouldBeEnabled(),1,1,2,2
net.sf.freecol.client.gui.action.GotoTileAction.GotoTileAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.GotoTileAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.GotoTileAction.shouldBeEnabled(),1,1,2,2
"net.sf.freecol.client.gui.action.ImprovementAction.ImprovementAction(FreeColClient, TileImprovementType)",0,1,1,1
net.sf.freecol.client.gui.action.ImprovementAction.actionPerformed(ActionEvent),1,2,1,2
net.sf.freecol.client.gui.action.ImprovementAction.shouldBeEnabled(),2,2,4,5
net.sf.freecol.client.gui.action.LoadAction.LoadAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.LoadAction.actionPerformed(ActionEvent),6,3,3,6
net.sf.freecol.client.gui.action.LoadAction.shouldBeEnabled(),1,1,4,4
net.sf.freecol.client.gui.action.MapControlsAction.MapControlsAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.MapControlsAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.MapControlsAction.update(),1,1,2,2
net.sf.freecol.client.gui.action.MapEditorAction.MapEditorAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.MapEditorAction.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.client.gui.action.MapboardAction.MapboardAction(FreeColClient, String)",0,1,1,1
net.sf.freecol.client.gui.action.MapboardAction.shouldBeEnabled(),2,1,5,5
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.MiniMapToggleFogOfWarAction(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.MiniMapToggleFogOfWarAction(FreeColClient, boolean)",0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.update(),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction.updateIcons(),2,1,2,2
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.MiniMapToggleViewAction(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.action.MiniMapToggleViewAction.MiniMapToggleViewAction(FreeColClient, boolean)",0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.update(),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapToggleViewAction.updateIcons(),2,1,2,2
net.sf.freecol.client.gui.action.MiniMapZoomInAction.MiniMapZoomInAction(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.action.MiniMapZoomInAction.MiniMapZoomInAction(FreeColClient, boolean)",0,1,1,1
net.sf.freecol.client.gui.action.MiniMapZoomInAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapZoomInAction.shouldBeEnabled(),1,1,2,2
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.MiniMapZoomOutAction(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.action.MiniMapZoomOutAction.MiniMapZoomOutAction(FreeColClient, boolean)",0,1,1,1
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.MiniMapZoomOutAction.shouldBeEnabled(),1,1,2,2
"net.sf.freecol.client.gui.action.MoveAction.MoveAction(FreeColClient, Direction)",0,1,1,1
"net.sf.freecol.client.gui.action.MoveAction.MoveAction(FreeColClient, Direction, boolean)",0,1,1,1
net.sf.freecol.client.gui.action.MoveAction.actionPerformed(ActionEvent),6,1,3,5
net.sf.freecol.client.gui.action.NewAction.NewAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.NewAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.NewEmptyMapAction.NewEmptyMapAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.NewEmptyMapAction.actionPerformed(ActionEvent),1,2,1,2
net.sf.freecol.client.gui.action.NewEmptyMapAction.shouldBeEnabled(),0,1,1,1
net.sf.freecol.client.gui.action.OpenAction.OpenAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.OpenAction.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.action.PreferencesAction.PreferencesAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.PreferencesAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.QuitAction.QuitAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.QuitAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReconnectAction.ReconnectAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReconnectAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.RenameAction.RenameAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.RenameAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportCargoAction.ReportCargoAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportCargoAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportColonyAction.ReportColonyAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportColonyAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportContinentalCongressAction.ReportContinentalCongressAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportContinentalCongressAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportEducationAction.ReportEducationAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportEducationAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportExplorationAction.ReportExplorationAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportExplorationAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportForeignAction.ReportForeignAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportForeignAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportHighScoresAction.ReportHighScoresAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportHighScoresAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportHistoryAction.ReportHistoryAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportHistoryAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportIndianAction.ReportIndianAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportIndianAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportLabourAction.ReportLabourAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportLabourAction.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.action.ReportMilitaryAction.ReportMilitaryAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportMilitaryAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportNavalAction.ReportNavalAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportNavalAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportProductionAction.ReportProductionAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportProductionAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportReligionAction.ReportReligionAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportReligionAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportRequirementsAction.ReportRequirementsAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportRequirementsAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportTradeAction.ReportTradeAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportTradeAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ReportTurnAction.ReportTurnAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ReportTurnAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.RetireAction.RetireAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.RetireAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.RetireAction.shouldBeEnabled(),1,1,3,3
net.sf.freecol.client.gui.action.SaveAction.SaveAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.SaveAction.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.action.SaveAction.shouldBeEnabled(),2,3,1,3
net.sf.freecol.client.gui.action.SaveAndQuitAction.SaveAndQuitAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.SaveAndQuitAction.actionPerformed(ActionEvent),4,3,2,3
net.sf.freecol.client.gui.action.SaveAndQuitAction.shouldBeEnabled(),2,3,1,3
net.sf.freecol.client.gui.action.ScaleMapAction.ScaleMapAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ScaleMapAction.actionPerformed(ActionEvent),1,1,2,2
"net.sf.freecol.client.gui.action.ScaleMapAction.scaleMapTo(int, int)",0,1,1,1
net.sf.freecol.client.gui.action.ScaleMapAction.shouldBeEnabled(),1,1,3,3
"net.sf.freecol.client.gui.action.SelectableAction.SelectableAction(FreeColClient, String, String)",0,1,1,1
net.sf.freecol.client.gui.action.SelectableAction.getOption(),4,2,3,4
net.sf.freecol.client.gui.action.SelectableAction.isSelected(),0,1,1,1
net.sf.freecol.client.gui.action.SelectableAction.setOption(boolean),2,1,2,3
net.sf.freecol.client.gui.action.SelectableAction.setSelected(boolean),0,1,1,1
net.sf.freecol.client.gui.action.SelectableAction.shouldBeSelected(),0,1,1,1
net.sf.freecol.client.gui.action.SelectableAction.update(),0,1,1,1
net.sf.freecol.client.gui.action.SentryAction.SentryAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.SentryAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ShowDifficultyAction.ShowDifficultyAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ShowDifficultyAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ShowGameOptionsAction.ShowGameOptionsAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ShowGameOptionsAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ShowMainAction.ShowMainAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ShowMainAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction.ShowMapGeneratorOptionsAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.SkipUnitAction.SkipUnitAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.SkipUnitAction.actionPerformed(ActionEvent),3,2,3,4
net.sf.freecol.client.gui.action.StartMapAction.StartMapAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.StartMapAction.actionPerformed(ActionEvent),2,2,3,4
net.sf.freecol.client.gui.action.TilePopupAction.TilePopupAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.TilePopupAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ToggleViewModeAction.ToggleViewModeAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ToggleViewModeAction.actionPerformed(ActionEvent),1,1,1,3
net.sf.freecol.client.gui.action.TradeRouteAction.TradeRouteAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.TradeRouteAction.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.client.gui.action.UnitAction.UnitAction(FreeColClient, String)",0,1,1,1
net.sf.freecol.client.gui.action.UnitAction.shouldBeEnabled(),1,1,5,5
net.sf.freecol.client.gui.action.UnloadAction.UnloadAction(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.action.UnloadAction.UnloadAction(FreeColClient, Unit)",0,1,1,1
net.sf.freecol.client.gui.action.UnloadAction.actionPerformed(ActionEvent),1,1,2,2
net.sf.freecol.client.gui.action.UnloadAction.getUnit(),1,1,2,2
net.sf.freecol.client.gui.action.UnloadAction.shouldBeEnabled(),1,1,6,6
net.sf.freecol.client.gui.action.WaitAction.WaitAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.WaitAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ZoomInAction.ZoomInAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ZoomInAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ZoomInAction.shouldBeEnabled(),1,2,1,2
net.sf.freecol.client.gui.action.ZoomOutAction.ZoomOutAction(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.action.ZoomOutAction.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.action.ZoomOutAction.shouldBeEnabled(),1,2,1,2
"net.sf.freecol.client.gui.animation.Animation.Animation(Unit, List<Tile>)",0,1,1,1
net.sf.freecol.client.gui.animation.Animation.getTiles(),0,1,1,1
net.sf.freecol.client.gui.animation.Animation.getUnit(),0,1,1,1
net.sf.freecol.client.gui.animation.Animation.setPoints(List<Point>),0,1,1,1
net.sf.freecol.client.gui.animation.Animations.getAttackAnimationBase(Unit),1,1,2,2
"net.sf.freecol.client.gui.animation.Animations.unitAttack(FreeColClient, Unit, Unit, Tile, Tile, boolean, float)",10,2,7,7
"net.sf.freecol.client.gui.animation.Animations.unitMove(FreeColClient, Unit, Tile, Tile, float)",4,1,3,3
"net.sf.freecol.client.gui.animation.UnitImageAnimation.UnitImageAnimation(Unit, Tile, SimpleZippedAnimation)",0,1,1,1
"net.sf.freecol.client.gui.animation.UnitImageAnimation.build(Unit, Tile, Direction, String, float)",5,4,3,4
"net.sf.freecol.client.gui.animation.UnitImageAnimation.executeWithLabel(JLabel, Procedure)",9,1,5,5
net.sf.freecol.client.gui.animation.UnitImageAnimation.setMirrored(boolean),0,1,1,1
net.sf.freecol.client.gui.animation.UnitImageAnimation.trialDirections(Direction),6,1,3,7
"net.sf.freecol.client.gui.animation.UnitMoveAnimation.UnitMoveAnimation(Unit, Tile, Tile, int, float)",0,1,1,1
"net.sf.freecol.client.gui.animation.UnitMoveAnimation.executeWithLabel(JLabel, Procedure)",18,1,4,12
"net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CaptureGoodsDialog(FreeColClient, JFrame, Unit, List<Goods>)",10,2,5,7
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.CheckBoxRenderer(),0,1,1,1
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.CheckBoxRenderer(Market),0,1,1,1
"net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer.getListCellRendererComponent(JList<? extends GoodsItem>, GoodsItem, int, boolean, boolean)",2,1,2,2
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.GoodsItem(Goods),0,1,1,1
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.getGoods(),0,1,1,1
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.pricePerGood(Market),2,1,2,3
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem.toString(),0,1,1,1
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.getResponse(),6,1,4,4
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.updateComponents(),15,1,7,8
"net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog.ChooseFoundingFatherDialog(FreeColClient, JFrame, List<FoundingFather>)",1,1,2,2
net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog.getResponse(),1,2,2,2
"net.sf.freecol.client.gui.dialog.ClientOptionsDialog.ClientOptionsDialog(FreeColClient, JFrame, boolean)",1,1,2,2
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.ColorButton(Color),0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.getColor(),0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.getUIClassID(),0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton.setColor(Color),1,1,1,2
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ConfirmDeclarationDialog(FreeColClient, JFrame)",8,1,5,6
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer.EnumRenderer(String),0,1,1,1
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer.setLabelValues(JLabel, T)",0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.addComboBox(JPanel, JComboBox<T>, String, T)",0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.getNumbers(int),1,1,2,2
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.getResponse(),1,2,1,2
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.itemStateChanged(ItemEvent),0,1,1,1
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.setColors(),3,1,3,3
"net.sf.freecol.client.gui.dialog.DifficultyDialog.DifficultyDialog(FreeColClient, JFrame, Specification, OptionGroup, boolean)",1,1,2,2
net.sf.freecol.client.gui.dialog.DifficultyDialog.addLoadAction(JButton),6,1,3,3
net.sf.freecol.client.gui.dialog.DifficultyDialog.addResetAction(JButton),0,1,1,1
net.sf.freecol.client.gui.dialog.DifficultyDialog.addSaveAction(JButton),2,1,2,2
net.sf.freecol.client.gui.dialog.DifficultyDialog.getSpecification(),0,1,1,1
net.sf.freecol.client.gui.dialog.DifficultyDialog.saveDefaultOptions(),0,1,1,1
net.sf.freecol.client.gui.dialog.DifficultyDialog.valueChanged(TreeSelectionEvent),1,1,2,2
"net.sf.freecol.client.gui.dialog.DumpCargoDialog.DumpCargoDialog(FreeColClient, JFrame, Unit)",2,1,3,3
net.sf.freecol.client.gui.dialog.DumpCargoDialog.getResponse(),6,1,4,4
"net.sf.freecol.client.gui.dialog.EditOptionDialog.EditOptionDialog(FreeColClient, JFrame, Option)",0,1,1,1
net.sf.freecol.client.gui.dialog.EditOptionDialog.getResponse(),2,1,2,3
"net.sf.freecol.client.gui.dialog.EditSettlementDialog.EditSettlementDialog(FreeColClient, JFrame, IndianSettlement)",1,1,2,2
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerNation(),0,1,1,1
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerNationType(),1,1,2,2
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getOwnerPlayer(),0,1,1,1
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getResponse(),31,4,16,17
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getSettlementType(),0,1,1,1
net.sf.freecol.client.gui.dialog.EditSettlementDialog.getSkillModel(),1,1,2,2
net.sf.freecol.client.gui.dialog.EditSettlementDialog.itemStateChanged(ItemEvent),3,1,3,3
"net.sf.freecol.client.gui.dialog.EmigrationDialog.EmigrationDialog(FreeColClient, JFrame, Europe, boolean)",2,1,3,3
"net.sf.freecol.client.gui.dialog.EndTurnDialog.EndTurnDialog(FreeColClient, JFrame, List<Unit>)",3,2,2,3
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.UnitCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.getListCellRendererComponent(JList<? extends UnitWrapper>, UnitWrapper, int, boolean, boolean)",2,1,2,2
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer.largestIconSize(JList<? extends UnitWrapper>),5,1,4,4
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper.UnitWrapper(Unit),0,1,1,1
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper.toString(),0,1,1,1
net.sf.freecol.client.gui.dialog.EndTurnDialog.selectUnit(),8,1,4,5
"net.sf.freecol.client.gui.dialog.FirstContactDialog.FirstContactDialog(FreeColClient, JFrame, Player, Player, Tile, int)",6,1,5,7
net.sf.freecol.client.gui.dialog.Flag.Background.Background(Alignment),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.Decoration.Decoration(UnionPosition...),1,1,2,2
"net.sf.freecol.client.gui.dialog.Flag.Decoration.Decoration(UnionShape, UnionPosition...)",0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.Decoration.getUnionPositions(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.Decoration.getUnionShape(),0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.Flag(Background, Decoration, UnionPosition)",0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.Flag(Background, Decoration, UnionPosition, UnionShape)",0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.UnionPosition.UnionPosition(Alignment, int)",0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.center(GeneralPath, double, double)",0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.drawBackground(Graphics2D),0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.drawPerBend(Graphics2D, boolean)",1,1,1,2
net.sf.freecol.client.gui.dialog.Flag.drawPerSaltire(Graphics2D),1,1,2,2
net.sf.freecol.client.gui.dialog.Flag.drawQuarters(Graphics2D),2,1,2,3
"net.sf.freecol.client.gui.dialog.Flag.drawStripes(Graphics2D, Alignment, int)",3,1,2,4
net.sf.freecol.client.gui.dialog.Flag.get5Star(),1,1,2,2
net.sf.freecol.client.gui.dialog.Flag.getBackground(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getBackgroundColors(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getBend(boolean),2,1,2,2
net.sf.freecol.client.gui.dialog.Flag.getCircleOfStars(double),6,1,5,5
net.sf.freecol.client.gui.dialog.Flag.getCross(Decoration),1,1,1,3
net.sf.freecol.client.gui.dialog.Flag.getDecoration(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getDecorationColor(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getGridOfStars(Double),12,6,3,8
net.sf.freecol.client.gui.dialog.Flag.getImage(),17,3,7,31
net.sf.freecol.client.gui.dialog.Flag.getPall(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getRectangle(),34,2,7,20
net.sf.freecol.client.gui.dialog.Flag.getRhombus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.getStar(double, double)",0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.getStar(double, double, double)",1,1,2,2
net.sf.freecol.client.gui.dialog.Flag.getStarColor(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getStars(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getStripeHeight(Alignment),1,1,1,2
net.sf.freecol.client.gui.dialog.Flag.getStripeWidth(Alignment),1,1,1,2
net.sf.freecol.client.gui.dialog.Flag.getStripes(),0,1,1,1
"net.sf.freecol.client.gui.dialog.Flag.getTriangle(UnionShape, boolean)",6,1,2,7
net.sf.freecol.client.gui.dialog.Flag.getUnionColor(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getUnionPosition(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getUnionRectangle(Double),3,2,2,3
net.sf.freecol.client.gui.dialog.Flag.getUnionRhombus(),15,4,4,7
net.sf.freecol.client.gui.dialog.Flag.getUnionShape(),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.getUnionTriangle(boolean),41,1,9,20
net.sf.freecol.client.gui.dialog.Flag.setBackground(Background),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setBackgroundColors(Color...),3,1,3,3
net.sf.freecol.client.gui.dialog.Flag.setBackgroundColors(List<Color>),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setDecoration(Decoration),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setDecorationColor(Color),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setStarColor(Color),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setStars(int),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setStripes(int),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setUnionColor(Color),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setUnionPosition(UnionPosition),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.setUnionShape(UnionShape),0,1,1,1
net.sf.freecol.client.gui.dialog.Flag.transformBend(GeneralPath),8,1,6,7
net.sf.freecol.client.gui.dialog.Flag.transformTriangle(GeneralPath),1,1,1,4
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.FreeColChoiceDialog(FreeColClient, JFrame)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.FreeColChoiceDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, List<ChoiceItem<T>>)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColChoiceDialog.initializeChoiceDialog(JFrame, boolean, JComponent, ImageIcon, String, List<ChoiceItem<T>>)",1,1,2,2
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.FreeColConfirmDialog(FreeColClient, JFrame)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.FreeColConfirmDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, String)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColConfirmDialog.initializeConfirmDialog(JFrame, boolean, JComponent, ImageIcon, String, String)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColDialog.FreeColDialog(FreeColClient, JFrame)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColDialog.FreeColDialog(FreeColClient, JFrame, DialogType, boolean, StringTemplate, ImageIcon, List<ChoiceItem<T>>)",0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.choices(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getFreeColClient(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getGUI(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getGame(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getMyPlayer(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getResponse(),6,4,4,4
net.sf.freecol.client.gui.dialog.FreeColDialog.getSmallAbstractUnitImage(AbstractUnit),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.getSpecification(),1,1,2,2
net.sf.freecol.client.gui.dialog.FreeColDialog.getValue(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.igc(),0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColDialog.initializeDialog(JFrame, DialogType, boolean, JComponent, ImageIcon, List<ChoiceItem<T>>)",9,2,5,8
net.sf.freecol.client.gui.dialog.FreeColDialog.isModal(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.iterateOverOpaqueLayersComponents(JComponent),4,1,3,4
net.sf.freecol.client.gui.dialog.FreeColDialog.propertyChange(PropertyChangeEvent),3,1,7,7
net.sf.freecol.client.gui.dialog.FreeColDialog.removeNotify(),2,1,3,3
net.sf.freecol.client.gui.dialog.FreeColDialog.requestFocus(),2,1,3,3
net.sf.freecol.client.gui.dialog.FreeColDialog.responded(),1,1,2,2
net.sf.freecol.client.gui.dialog.FreeColDialog.selectDefault(List<ChoiceItem<T>>),11,1,7,8
net.sf.freecol.client.gui.dialog.FreeColDialog.selectOptions(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.setOpaqueLayerRecursive(Component),7,1,5,6
net.sf.freecol.client.gui.dialog.FreeColDialog.setSubcomponentsNotOpaque(JComponent),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.setValue(Object),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColDialog.setVisible(boolean),1,1,2,2
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.FreeColInputDialog(FreeColClient, JFrame)",0,1,1,1
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.FreeColInputDialog(FreeColClient, JFrame, boolean, StringTemplate, ImageIcon, String, String)",0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColInputDialog.getResponse(),3,3,3,3
"net.sf.freecol.client.gui.dialog.FreeColInputDialog.initializeInputDialog(JFrame, boolean, JComponent, ImageIcon, String, String)",1,1,2,2
"net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.FreeColStringInputDialog(FreeColClient, JFrame, boolean, StringTemplate, String, String, String)",0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.getInputValue(),0,1,1,1
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog.requestFocus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.GameOptionsDialog.GameOptionsDialog(FreeColClient, JFrame, boolean)",5,1,5,5
"net.sf.freecol.client.gui.dialog.LoadDialog.LoadDialog(FreeColClient, JFrame, File, FileFilter[])",5,1,4,4
net.sf.freecol.client.gui.dialog.LoadDialog.getResponse(),1,1,1,2
"net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.LoadingSavegameDialog(FreeColClient, JFrame)",0,1,1,1
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getAddress(),1,1,2,2
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getInfo(),0,1,1,1
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getPort(),1,1,2,2
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.getServerName(),0,1,1,1
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.isPublic(),1,1,2,2
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.isSinglePlayer(),0,1,1,1
"net.sf.freecol.client.gui.dialog.LoadingSavegameDialog.reset(boolean, boolean)",3,1,3,3
"net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.MapGeneratorOptionsDialog(FreeColClient, JFrame, boolean)",6,4,3,4
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.makeMapButton(File),5,1,5,5
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.save(File),4,3,4,4
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog.updateFile(File),1,1,2,2
"net.sf.freecol.client.gui.dialog.MapSizeDialog.MapSizeDialog(FreeColClient, JFrame)",0,1,1,1
net.sf.freecol.client.gui.dialog.MapSizeDialog.getInputValue(),3,1,1,4
net.sf.freecol.client.gui.dialog.MapSizeDialog.requestFocus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.MonarchDialog.MonarchDialog(FreeColClient, JFrame, MonarchAction, StringTemplate, String)",8,2,4,9
"net.sf.freecol.client.gui.dialog.NativeDemandDialog.NativeDemandDialog(FreeColClient, JFrame, Unit, Colony, GoodsType, int)",3,1,3,3
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.ColonyTradeItemPanel(Player),0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.actionPerformed(ActionEvent),3,1,2,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel.update(DiplomaticTrade),8,2,6,7
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.GoldTradeItemPanel(Player, int)",0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.actionPerformed(ActionEvent),3,1,2,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel.update(DiplomaticTrade),1,1,2,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsBoxRenderer.getListCellRendererComponent(JList<? extends Goods>, Goods, int, boolean, boolean)",1,1,2,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsTradeItemPanel(Player, List<Goods>)",0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.actionPerformed(ActionEvent),3,1,2,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.update(DiplomaticTrade),14,4,8,8
"net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteBoxRenderer.getListCellRendererComponent(JList<? extends Player>, Player, int, boolean, boolean)",1,1,2,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteTradeItemPanel(Player, Player)",1,1,2,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.actionPerformed(ActionEvent),6,1,3,5
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.update(DiplomaticTrade),3,1,4,4
"net.sf.freecol.client.gui.dialog.NegotiationDialog.NegotiationDialog(FreeColClient, JFrame, FreeColGameObject, FreeColGameObject, DiplomaticTrade, StringTemplate)",32,1,20,29
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction.RemoveAction(TradeItem),0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceBoxRenderer.getListCellRendererComponent(JList<? extends Stance>, Stance, int, boolean, boolean)",1,1,2,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceTradeItemPanel(Player, Player)",0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.actionPerformed(ActionEvent),3,1,2,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.setSelectedValue(Stance),3,1,3,3
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.update(DiplomaticTrade),6,1,5,6
"net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitBoxRenderer.getListCellRendererComponent(JList<? extends Unit>, Unit, int, boolean, boolean)",1,1,2,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitTradeItemPanel(Player, List<Unit>)",0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.actionPerformed(ActionEvent),3,1,2,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.update(DiplomaticTrade),7,1,6,6
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addColonyTradeItem(Player, Colony)",1,1,1,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addGoldTradeItem(Player, int)",1,1,1,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addGoodsTradeItem(Player, Goods)",1,1,1,2
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addInciteTradeItem(Player, Player)",1,1,1,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.addStanceTradeItem(Stance),0,1,1,1
"net.sf.freecol.client.gui.dialog.NegotiationDialog.addUnitTradeItem(Player, Unit)",1,1,1,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.getAnyGoods(),0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.getResponse(),6,1,1,4
"net.sf.freecol.client.gui.dialog.NegotiationDialog.getTradeItemButton(TradeItem, boolean)",5,1,3,3
net.sf.freecol.client.gui.dialog.NegotiationDialog.getUnitUnitList(Unit),5,1,4,4
net.sf.freecol.client.gui.dialog.NegotiationDialog.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.removeTradeItems(Class<? extends TradeItem>),0,1,1,1
net.sf.freecol.client.gui.dialog.NegotiationDialog.updateDialog(boolean),12,1,12,13
net.sf.freecol.client.gui.dialog.NegotiationDialog.updateSummary(),9,1,6,6
"net.sf.freecol.client.gui.dialog.OptionsDialog.OptionsDialog(FreeColClient, OptionGroup, String, String, String, boolean)",0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.actionPerformed(ActionEvent),10,3,6,6
net.sf.freecol.client.gui.dialog.OptionsDialog.cancelOptionsDialog(),1,1,2,2
net.sf.freecol.client.gui.dialog.OptionsDialog.getDefaultFileName(),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.getGroup(),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.getOptionGroupId(),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.getOptionUI(),0,1,1,1
"net.sf.freecol.client.gui.dialog.OptionsDialog.initialize(JFrame, List<JButton>)",2,1,3,3
net.sf.freecol.client.gui.dialog.OptionsDialog.load(File),3,2,2,3
net.sf.freecol.client.gui.dialog.OptionsDialog.loadDefaultOptions(),1,1,2,2
"net.sf.freecol.client.gui.dialog.OptionsDialog.preparePanel(String, OptionGroupUI)",0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.save(File),1,2,1,2
net.sf.freecol.client.gui.dialog.OptionsDialog.saveDefaultOptions(),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.set(OptionGroup),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.setDialogHandler(DialogHandler<OptionGroup>),0,1,1,1
net.sf.freecol.client.gui.dialog.OptionsDialog.update(),0,1,1,1
"net.sf.freecol.client.gui.dialog.Parameters.Parameters(int, int)",0,1,1,1
"net.sf.freecol.client.gui.dialog.ParametersDialog.ParametersDialog(FreeColClient, JFrame)",0,1,1,1
net.sf.freecol.client.gui.dialog.ParametersDialog.checkFields(),4,3,3,5
net.sf.freecol.client.gui.dialog.ParametersDialog.getResponse(),1,2,2,2
net.sf.freecol.client.gui.dialog.ParametersDialog.requestFocus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.PreCombatDialog.PreCombatDialog(FreeColClient, JFrame, Unit, FreeColGameObject)",10,3,7,7
"net.sf.freecol.client.gui.dialog.PreCombatDialog.addLabels(JPanel, JLabel[], boolean, int)",12,1,3,8
"net.sf.freecol.client.gui.dialog.RiverStyleDialog.RiverStyleDialog(FreeColClient, JFrame, List<String>)",1,1,2,2
"net.sf.freecol.client.gui.dialog.SaveDialog.SaveDialog(FreeColClient, JFrame, File, FileFilter[], String)",5,1,4,4
net.sf.freecol.client.gui.dialog.SaveDialog.getResponse(),3,2,2,3
"net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.ScaleMapSizeDialog(FreeColClient, JFrame)",0,1,1,1
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.checkFields(),4,3,3,5
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.getResponse(),1,2,2,2
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog.requestFocus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.SelectAmountDialog.SelectAmountDialog(FreeColClient, JFrame, GoodsType, int, int, boolean)",19,6,8,11
net.sf.freecol.client.gui.dialog.SelectAmountDialog.getInputValue(),1,1,1,2
net.sf.freecol.client.gui.dialog.SelectAmountDialog.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectAmountDialog.verifyWholeBox(JComboBox<Integer>),4,3,2,4
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.Destination(Location, int, Unit, List<GoodsType>)",0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.calculateScore(),10,1,3,6
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getDestinationComparator(int),3,1,1,3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getDestinationComparatorIndex(Comparator<Destination>),3,1,1,3
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getExtras(Location, Unit, List<GoodsType>)",62,1,22,25
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getScore(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination.getTurns(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer.LocationRenderer(ImageLibrary),0,1,1,1
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer.setLabelValues(JLabel, Destination)",0,1,1,1
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.SelectDestinationDialog(FreeColClient, JFrame, Unit)",4,2,2,3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.getDestinationComparator(),1,1,2,2
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.getResponse(),3,3,2,3
"net.sf.freecol.client.gui.dialog.SelectDestinationDialog.loadDestinations(Unit, List<GoodsType>)",19,3,14,16
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.recenter(Destination),2,1,3,3
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.setDestinationComparator(Comparator<Destination>),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.updateDestinationComparator(),0,1,1,1
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.updateDestinationList(),10,1,8,8
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.valueChanged(ListSelectionEvent),1,2,1,2
"net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.SelectTributeAmountDialog(FreeColClient, JFrame, StringTemplate, int)",0,1,1,1
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.getInputValue(),3,1,1,4
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog.requestFocus(),0,1,1,1
"net.sf.freecol.client.gui.dialog.VictoryDialog.VictoryDialog(FreeColClient, JFrame)",0,1,1,1
"net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseDialog(FreeColClient, Colony, DialogHandler<Boolean>)",9,1,5,5
"net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel.WarehouseGoodsPanel(FreeColClient, Colony, GoodsType)",6,1,3,5
net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel.saveSettings(),4,1,7,8
"net.sf.freecol.client.gui.dialog.WarehouseDialog.createWarehousePanel(FreeColClient, Colony)",1,1,2,2
net.sf.freecol.client.gui.dialog.WarehouseDialog.scrollPaneWithHiddenBorder(JPanel),0,1,1,1
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.BaseTileTransitionImageCreator(ImageLibrary, ImageCache)",0,1,1,1
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getBaseTileTransitionImage(Tile, Direction, boolean, boolean)",48,6,20,29
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getSpecialBeachBaseTileTransitionImage(Direction),0,1,1,1
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getSpecialBeachBaseTileTransitionMask(Direction),0,1,1,1
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.getTerrainOrBeachImageResource(Tile, Tile)",5,2,4,5
"net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator.shouldIncludeSpecialBeachTransitionInDirection(Tile, Tile, Direction)",5,2,5,6
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.BeachTileAnimationImageCreator(ImageLibrary, ImageCache)",0,1,1,1
net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.determineDirectionCombinationKey(List<Direction>),1,1,3,3
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage)",8,4,4,8
"net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator.getAnimatedScaledWaterAndBeachTerrainImage(TileType, List<Direction>, long)",1,2,1,2
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.DeltaAnimationImageCreator(ImageLibrary, ImageCache)",0,1,1,1
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage, BufferedImage)",8,5,5,9
"net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.getAnimatedScaledRiverDeltaTerrainImage(Direction, long)",1,2,1,2
net.sf.freecol.client.gui.images.DeltaAnimationImageCreator.getRiverPebblesImageResource(),0,1,1,1
"net.sf.freecol.client.gui.images.ImageCreators.ImageCreators(ImageLibrary, ImageCache)",0,1,1,1
net.sf.freecol.client.gui.images.ImageCreators.getBaseTileTransitionImageCreator(),0,1,1,1
net.sf.freecol.client.gui.images.ImageCreators.getBeachTileAnimationImageCreator(),0,1,1,1
net.sf.freecol.client.gui.images.ImageCreators.getDeltaAnimationImageCreator(),0,1,1,1
net.sf.freecol.client.gui.images.ImageCreators.getRiverAnimationImageCreator(),0,1,1,1
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.RiverAnimationImageCreator(ImageLibrary, ImageCache)",0,1,1,1
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.createRiverMaskImageWithTransitions(BufferedImage, List<Direction>)",2,2,2,3
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineMinorToMajorRiverTransitions(Tile, List<Direction>)",5,2,6,6
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineRiverCombinations(Tile),3,1,4,4
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.determineRiverTransitionsUsingStyle(Tile),1,2,2,2
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.directionsToString(List<Direction>),0,1,1,1
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.generateImage(BufferedImage, BufferedImage, int, BufferedImage, BufferedImage)",6,4,4,7
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.getAnimatedScaledRiverTerrainImage(Tile, long)",4,2,1,4
net.sf.freecol.client.gui.images.RiverAnimationImageCreator.getRiverPebblesImageResource(),0,1,1,1
"net.sf.freecol.client.gui.images.RiverAnimationImageCreator.toLargerMaskWithLessTransparency(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.client.gui.label.AbstractGoodsLabel.AbstractGoodsLabel(FreeColClient, AbstractGoods)",0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.equals(Object),3,3,5,6
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getAbstractGoods(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getAmount(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.getType(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.hashCode(),3,1,1,4
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isFullChosen(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isPartialChosen(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.isSuperFullChosen(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setAmount(int),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setDefaultAmount(),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setFullChosen(boolean),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setPartialChosen(boolean),0,1,1,1
net.sf.freecol.client.gui.label.AbstractGoodsLabel.setSuperFullChosen(boolean),0,1,1,1
"net.sf.freecol.client.gui.label.CargoLabel.removeCargo(Component, CargoPanel)",0,1,1,1
net.sf.freecol.client.gui.label.FreeColLabel.FreeColLabel(),0,1,1,1
net.sf.freecol.client.gui.label.FreeColLabel.FreeColLabel(Icon),0,1,1,1
"net.sf.freecol.client.gui.label.GoodsLabel.GoodsLabel(FreeColClient, Goods)",0,1,1,1
"net.sf.freecol.client.gui.label.GoodsLabel.addCargo(Component, Unit, CargoPanel)",2,2,2,3
net.sf.freecol.client.gui.label.GoodsLabel.getGoods(),0,1,1,1
net.sf.freecol.client.gui.label.GoodsLabel.initialize(),6,1,9,9
net.sf.freecol.client.gui.label.GoodsLabel.isOnCarrier(),1,1,2,2
"net.sf.freecol.client.gui.label.GoodsLabel.removeCargo(Component, CargoPanel)",0,1,1,1
"net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(FreeColClient, GoodsType)",0,1,1,1
net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(GoodsTypeLabel),0,1,1,1
"net.sf.freecol.client.gui.label.GoodsTypeLabel.GoodsTypeLabel(ImageLibrary, GoodsType)",0,1,1,1
net.sf.freecol.client.gui.label.GoodsTypeLabel.equals(Object),2,3,2,3
net.sf.freecol.client.gui.label.GoodsTypeLabel.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.label.GoodsTypeLabel.getType(),0,1,1,1
net.sf.freecol.client.gui.label.GoodsTypeLabel.hashCode(),0,1,1,1
"net.sf.freecol.client.gui.label.MarketLabel.MarketLabel(FreeColClient, GoodsType, Market)",1,2,1,2
net.sf.freecol.client.gui.label.MarketLabel.addBorder(),0,1,1,1
"net.sf.freecol.client.gui.label.MarketLabel.addCargo(Component, Unit, CargoPanel)",4,4,4,5
net.sf.freecol.client.gui.label.MarketLabel.getMarket(),0,1,1,1
net.sf.freecol.client.gui.label.MarketLabel.isOnCarrier(),0,1,1,1
net.sf.freecol.client.gui.label.MarketLabel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.label.MarketLabel.setDefaultAmount(),0,1,1,1
net.sf.freecol.client.gui.label.MarketLabel.update(),4,1,4,4
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods)",0,1,1,1
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods, int)",0,1,1,1
"net.sf.freecol.client.gui.label.ProductionLabel.ProductionLabel(FreeColClient, AbstractGoods, int, int, boolean)",21,1,11,21
net.sf.freecol.client.gui.label.ProductionLabel.getMinimumSize(),0,1,1,1
net.sf.freecol.client.gui.label.ProductionLabel.getPreferredSize(),1,1,2,2
net.sf.freecol.client.gui.label.ProductionLabel.getProductionStringWidth(),1,1,2,2
net.sf.freecol.client.gui.label.ProductionLabel.numberOfGoodsIconsToDisplay(),0,1,1,1
net.sf.freecol.client.gui.label.ProductionLabel.paintComponent(Graphics),4,1,4,5
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit)",0,1,1,1
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit, boolean)",0,1,1,1
"net.sf.freecol.client.gui.label.UnitLabel.UnitLabel(FreeColClient, Unit, boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.actionPerformed(ActionEvent),21,1,9,25
"net.sf.freecol.client.gui.label.UnitLabel.addCargo(Component, Unit, CargoPanel)",6,3,4,4
net.sf.freecol.client.gui.label.UnitLabel.getGUI(),0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.getUnit(),0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.isOnCarrier(),1,1,2,2
net.sf.freecol.client.gui.label.UnitLabel.paintComponent(Graphics),17,2,15,16
"net.sf.freecol.client.gui.label.UnitLabel.removeCargo(Component, CargoPanel)",0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.setDescriptionLabel(String),0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.setEnabled(boolean),3,1,3,3
net.sf.freecol.client.gui.label.UnitLabel.setSelected(boolean),0,1,1,1
net.sf.freecol.client.gui.label.UnitLabel.setSmall(boolean),7,1,4,4
net.sf.freecol.client.gui.label.UnitLabel.updateIcon(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.CanvasMapViewer(FreeColClient, MapViewer)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.changeSize(Dimension),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.drawRenderingTimeStrings(Graphics, long, boolean)",1,1,1,2
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.isMapAvailable(),1,1,3,3
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintBlackBackground(Graphics2D, Dimension)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintComponent(Graphics),4,1,4,4
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintImmediately(),1,2,1,2
"net.sf.freecol.client.gui.mapviewer.CanvasMapViewer.paintMainMenuBackground(Graphics2D, Dimension)",2,1,2,2
net.sf.freecol.client.gui.mapviewer.ChatDisplay.ChatDisplay(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.mapviewer.ChatDisplay.addMessage(GUIMessage),1,1,2,2
"net.sf.freecol.client.gui.mapviewer.ChatDisplay.display(Graphics2D, Dimension)",4,2,3,4
net.sf.freecol.client.gui.mapviewer.ChatDisplay.prepareMessages(),4,1,3,3
"net.sf.freecol.client.gui.mapviewer.GUIMessage.GUIMessage(String, Color)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.GUIMessage.getColor(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.GUIMessage.getCreationTime(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.GUIMessage.getMessage(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapAsyncPainter(MapViewer),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.MapRendererThread(Dimension, TileBounds, Tile, Point)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.deliverRenderedImage(Point),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.paint(),11,5,6,9
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.produceRenderedImage(Point, Direction)",3,1,2,4
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread.run(),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.determineMapFocusPointOnRender(long),1,1,1,2
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.getBackBufferImage(),23,6,8,14
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.getNewFocusPoint(long),2,1,2,2
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.isStopped(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.plusOffsets(Point, Direction, int, int)",1,9,1,9
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.scrollFocusOnBufferSize(Point, Direction)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.scrollFocusOnOriginalSize(Point, Direction)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.setScrollDirection(Direction),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.stop(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.MapViewer(FreeColClient, ImageLibrary, ActionListener)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.TextSpecification.TextSpecification(String, Font)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.TileClippingBounds(MapViewerBounds, Map, Rectangle)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getBaseTiles(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getBottomRightDirtyTile(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getExtendedTiles(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getSuperExtendedTiles(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getTopLeftDirtyTile(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds.getUnitTiles(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.applyRenderingHints(Graphics2D),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewer.calculateUnitImagePositionInTile(BufferedImage),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.changeScale(float),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.changeSize(Dimension),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.convertToMapTile(int, int)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.createCapitalLabel(int, int, Color)",1,1,2,2
"net.sf.freecol.client.gui.mapviewer.MapViewer.createLabel(Graphics2D, String, Font, Color)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.createLabel(Graphics2D, TextSpecification[], Color)",4,1,3,4
"net.sf.freecol.client.gui.mapviewer.MapViewer.createReligiousMissionLabel(int, int, Color, boolean)",3,1,3,3
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayDebugAiDefensiveMap(Graphics2D, TileClippingBounds)",16,2,8,10
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayGrid(Graphics2D, ClientOptions, TileClippingBounds)",11,1,6,6
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayMap(Graphics2D, Dimension)",4,4,4,4
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayNonAnimationImages(Graphics2D, Rectangle, TileClippingBounds, boolean)",47,8,20,29
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayPath(Graphics2D, PathNode, MapViewerBounds)",33,4,10,13
"net.sf.freecol.client.gui.mapviewer.MapViewer.displaySettlementLabels(Graphics2D, Settlement, Player, int, RescaleOp)",41,3,17,20
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayTerritorialBorders(Graphics2D, Tile, BorderType, boolean)",48,1,19,32
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayToNonAnimationBufferImage(MapViewerBounds, Rectangle, Graphics2D, Map, boolean)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.displayUnit(Graphics2D, Unit)",19,1,20,21
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerBounds(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerRepaintManager(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.getMapViewerState(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.getTileBounds(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.getVisibleCursorTile(MapViewerBounds),1,1,1,2
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintBlackBackground(Graphics2D, Rectangle)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTile(Graphics2D, Position, List<Tile>, TileRenderingCallback)",2,2,2,3
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTile(Graphics2D, TileClippingBounds, TileRenderingCallback)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTileWithExtendedImageSize(Graphics2D, TileClippingBounds, TileRenderingCallback)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintEachTileWithSuperExtendedImageSize(Graphics2D, TileClippingBounds, TileRenderingCallback)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.paintImmediatelyToBuffersOnly(),4,3,3,5
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintMap(Graphics2D, Dimension, MapViewerBounds)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintMap(Graphics2D, Dimension, MapViewerBounds, boolean)",42,6,27,31
"net.sf.freecol.client.gui.mapviewer.MapViewer.paintSingleTile(Graphics2D, TileClippingBounds, Tile, TileRenderingCallback)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewer.shouldFogOfWarBeDisplayed(Player, ClientOptions)",1,1,3,3
net.sf.freecol.client.gui.mapviewer.MapViewer.stopMapAsyncPainter(),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewer.updateScaledVariables(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.useMapAsyncPainter(),2,2,2,3
"net.sf.freecol.client.gui.mapviewer.MapViewer.verifyAndMarkAsClean(Dimension, Rectangle)",3,1,3,3
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.MapViewerBounds(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.calculateDrawnTileBounds(Tile),1,2,1,2
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.calculateTilePosition(Tile, boolean)",2,3,1,3
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.changeSize(Dimension, TileBounds)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.convertToMapTile(Map, int, int)",25,2,7,13
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getBottomRightVisibleTile(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getFocus(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getFocusMapPoint(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getSize(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTileBounds(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTopLeftVisibleTile(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.getTopLeftVisibleTilePoint(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerBounds.inRange(int, int, int)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.isTileVisible(Tile),2,2,4,5
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.onScreen(Tile),1,1,4,4
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.positionMap(),7,2,3,8
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.resetScrollSpeed(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.scrollMap(Direction),16,7,2,13
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setFocus(Tile),2,2,1,3
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setFocusMapPoint(Point),1,2,1,2
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.setOffsetFocus(Tile),14,2,5,9
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.tileToPoint(Tile),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerBounds.updateSizeVariables(TileBounds),2,1,2,3
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.MapViewerRepaintManager(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getBackBufferImage(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getDirtyClipBounds(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.getNonAnimationBufferImage(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.initializeBuffers(Dimension),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isAllDirty(),2,1,6,6
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isBuffersUninitialized(Dimension),1,1,3,3
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.isRepaintsBlocked(Dimension),1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsClean(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(),1,2,1,2
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Collection<Tile>),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Rectangle),2,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.markAsDirty(Tile),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.moveContents(Image, int, int)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.moveContentsAndRecreateImage(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.prepareBuffers(MapViewerBounds, Tile)",3,4,4,4
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.reuseNonDirtyAreasIfPossible(MapViewerBounds, Tile, Point)",1,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.setRepaintsBlocked(boolean),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.updateDirtyRegion(MapViewerBounds, int, int)",3,1,3,3
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager.updateDirtyRegionWithDirtyTiles(MapViewerBounds),4,1,3,3
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.MapViewerScaledUtils(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getBorderPoints(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getBorderStroke(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getControlPoints(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFog(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontItalic(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontNormal(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontProduction(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getFontTiny(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.getGridStroke(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils.updateScaledVariables(ImageLibrary),4,1,3,4
"net.sf.freecol.client.gui.mapviewer.MapViewerState.MapViewerState(ChatDisplay, UnitAnimator, ActionListener)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.changeGotoPath(PathNode),1,2,1,2
net.sf.freecol.client.gui.mapviewer.MapViewerState.displayChat(GUIMessage),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.findUnitInFront(Tile),19,7,10,13
net.sf.freecol.client.gui.mapviewer.MapViewerState.getActiveUnit(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getChatDisplay(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getCursor(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getCursorTile(),3,1,2,4
net.sf.freecol.client.gui.mapviewer.MapViewerState.getGotoPath(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getSelectedTile(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getUnitAnimator(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getUnitPath(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.getViewMode(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.isRangedAttackMode(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.setActiveUnit(Unit),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.setCursorBlinking(boolean),2,1,2,2
net.sf.freecol.client.gui.mapviewer.MapViewerState.setRangedAttackMode(boolean),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.setSelectedTile(Tile),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.setUnitPath(PathNode),0,1,1,1
net.sf.freecol.client.gui.mapviewer.MapViewerState.setViewMode(ViewMode),0,1,1,1
net.sf.freecol.client.gui.mapviewer.RoadPainter.RoadPainter(Dimension),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.RoadPainter.displayRoad(Graphics2D, Tile, RescaleOp)",10,1,6,10
net.sf.freecol.client.gui.mapviewer.TerrainCursor.TerrainCursor(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TerrainCursor.actionPerformed(ActionEvent),3,2,2,4
net.sf.freecol.client.gui.mapviewer.TerrainCursor.addActionListener(ActionListener),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TerrainCursor.isActive(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TerrainCursor.removeActionListener(ActionListener),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TerrainCursor.startBlinking(),1,1,2,2
net.sf.freecol.client.gui.mapviewer.TerrainCursor.stopBlinking(),1,1,2,2
"net.sf.freecol.client.gui.mapviewer.TileBounds.TileBounds(Dimension, float)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.TileBounds.calculateUnitLabelPositionInTile(JLabel, Point)",1,2,1,2
net.sf.freecol.client.gui.mapviewer.TileBounds.getHalfHeight(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TileBounds.getHalfWidth(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TileBounds.getHeight(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.TileBounds.getWidth(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.TileViewer.TileViewer(FreeColClient, ImageLibrary)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.TileViewer.allDirectionsWithLand(Tile),1,1,2,2
"net.sf.freecol.client.gui.mapviewer.TileViewer.createColonyTileImage(Tile, Colony)",3,1,3,3
"net.sf.freecol.client.gui.mapviewer.TileViewer.createTileImage(Tile, Player)",3,1,3,3
net.sf.freecol.client.gui.mapviewer.TileViewer.createTileImageWithBeachBorderAndItems(Tile),4,2,4,4
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayAnimatedBaseTiles(Graphics2D, Tile, boolean)",15,2,10,11
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayCenteredImage(Graphics2D, BufferedImage)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayCenteredImage(Graphics2D, BufferedImage, RescaleOp)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayColonyTile(Graphics2D, Tile, Colony, BufferedImage)",5,2,4,6
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayColonyTiles(Graphics2D, Tile[][], Colony)",6,1,4,4
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayLargeCenteredImage(Graphics2D, BufferedImage, RescaleOp)",1,1,1,2
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayOptionalTileText(Graphics2D, Tile)",19,2,10,15
"net.sf.freecol.client.gui.mapviewer.TileViewer.displaySettlementWithChipsOrPopulationNumber(Graphics2D, Tile, boolean, RescaleOp)",19,2,8,10
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTile(Graphics2D, Tile, Player, BufferedImage)",5,2,4,6
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileItem(Graphics2D, Tile, RescaleOp, TileItem)",18,6,8,10
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileItems(Graphics2D, Tile, RescaleOp, BufferedImage)",12,5,9,9
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayTileWithBeach(Graphics2D, Tile)",5,2,5,6
"net.sf.freecol.client.gui.mapviewer.TileViewer.displayUnknownTileBorder(Graphics2D, Tile)",5,2,4,5
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawBaseTileTransitionAtDirection(Graphics2D, Tile, Direction)",1,1,2,2
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawBaseTileTransitions(Graphics2D, Tile)",2,2,2,3
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawForestCornerImageFor(Tile, Graphics2D, Direction, Direction, Direction)",6,3,4,6
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawForestCornerImages(Tile, Graphics2D)",0,1,1,1
"net.sf.freecol.client.gui.mapviewer.TileViewer.drawRiverMouth(Graphics2D, Tile, long)",8,5,5,8
net.sf.freecol.client.gui.mapviewer.TileViewer.hasRiverDelta(Tile),8,5,5,8
"net.sf.freecol.client.gui.mapviewer.TileViewer.hasSameForestedTileType(Tile, Tile)",1,1,4,4
net.sf.freecol.client.gui.mapviewer.TileViewer.updateScaledVariables(),0,1,1,1
"net.sf.freecol.client.gui.mapviewer.UnitAnimator.UnitAnimator(FreeColClient, MapViewer, ImageLibrary)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.UnitAnimator.createUnitAnimationLabel(Unit),0,1,1,1
net.sf.freecol.client.gui.mapviewer.UnitAnimator.enterUnitOutForAnimation(Unit),2,1,2,2
"net.sf.freecol.client.gui.mapviewer.UnitAnimator.getAnimationPosition(JLabel, Tile)",0,1,1,1
net.sf.freecol.client.gui.mapviewer.UnitAnimator.isOutForAnimation(Unit),0,1,1,1
net.sf.freecol.client.gui.mapviewer.UnitAnimator.isUnitsOutForAnimation(),0,1,1,1
net.sf.freecol.client.gui.mapviewer.UnitAnimator.releaseUnitOutForAnimation(Unit),3,2,2,3
net.sf.freecol.client.gui.menu.DebugMenu.DebugMenu(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.menu.DebugMenu.addGameMapOptions(Game, GUI, Player)",4,3,3,4
net.sf.freecol.client.gui.menu.DebugMenu.buildDebugMenu(),8,3,6,7
"net.sf.freecol.client.gui.menu.FreeColMenuBar.FreeColMenuBar(FreeColClient, MouseMotionListener)",0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuBar.add(JMenu),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuBar.buildColopediaMenu(),1,1,2,2
net.sf.freecol.client.gui.menu.FreeColMenuBar.getCheckBoxMenuItem(String),2,1,2,2
net.sf.freecol.client.gui.menu.FreeColMenuBar.getMenuItem(String),4,1,3,3
"net.sf.freecol.client.gui.menu.FreeColMenuBar.getMenuItem(String, ActionListener)",0,1,1,1
"net.sf.freecol.client.gui.menu.FreeColMenuBar.getRadioButtonMenuItem(String, ButtonGroup)",2,1,2,2
net.sf.freecol.client.gui.menu.FreeColMenuBar.paintComponent(Graphics),2,1,2,2
net.sf.freecol.client.gui.menu.FreeColMenuBar.setEnabled(boolean),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuBar.update(),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.createAndShowGUI(),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.createContentPane(),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.createImageIcon(String),2,2,2,2
net.sf.freecol.client.gui.menu.FreeColMenuTest.createMenuBar(),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.getClassName(Object),0,1,1,1
net.sf.freecol.client.gui.menu.FreeColMenuTest.itemStateChanged(ItemEvent),1,1,1,2
net.sf.freecol.client.gui.menu.FreeColMenuTest.main(String[]),0,1,1,1
"net.sf.freecol.client.gui.menu.InGameMenuBar.InGameMenuBar(FreeColClient, MouseMotionListener)",0,1,1,1
net.sf.freecol.client.gui.menu.InGameMenuBar.buildGameMenu(),0,1,1,1
net.sf.freecol.client.gui.menu.InGameMenuBar.buildOrdersMenu(),4,1,4,4
net.sf.freecol.client.gui.menu.InGameMenuBar.buildReportMenu(),0,1,1,1
net.sf.freecol.client.gui.menu.InGameMenuBar.buildViewMenu(),1,1,2,2
net.sf.freecol.client.gui.menu.InGameMenuBar.paintComponent(Graphics),2,3,1,3
net.sf.freecol.client.gui.menu.InGameMenuBar.reset(),1,1,2,2
"net.sf.freecol.client.gui.menu.MapEditorMenuBar.MapEditorMenuBar(FreeColClient, MouseMotionListener)",0,1,1,1
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildGameMenu(),0,1,1,1
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildToolsMenu(),0,1,1,1
net.sf.freecol.client.gui.menu.MapEditorMenuBar.buildViewMenu(),1,1,2,2
net.sf.freecol.client.gui.menu.MapEditorMenuBar.reset(),1,1,2,2
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.MenuMouseMotionListener(Scrolling),0,1,1,1
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.mouseDragged(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.menu.MenuMouseMotionListener.mouseMoved(MouseEvent),2,1,2,2
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitOptionUI(AbstractUnitOption, boolean)",3,1,4,4
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitRenderer.setLabelValues(JLabel, AbstractUnitOption)",0,1,1,1
"net.sf.freecol.client.gui.option.AbstractUnitOptionUI.RoleRenderer.setLabelValues(JLabel, String)",1,1,2,2
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.getListCellRenderer(),0,1,1,1
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.itemStateChanged(ItemEvent),9,1,6,6
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.AudioMixerOptionUI.AudioMixerOptionUI(GUI, AudioMixerOption, boolean)",7,1,5,5
net.sf.freecol.client.gui.option.AudioMixerOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.AudioMixerOptionUI.getJLabel(),0,1,1,1
net.sf.freecol.client.gui.option.AudioMixerOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.AudioMixerOptionUI.updateMixerLabel(),0,1,1,1
net.sf.freecol.client.gui.option.AudioMixerOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.BooleanOptionUI.BooleanOptionUI(BooleanOption, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.addActionListener(ActionListener),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.getValue(),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.removeActionListener(ActionListener),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.setValue(boolean),0,1,1,1
net.sf.freecol.client.gui.option.BooleanOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.FileOptionUI.FileOptionUI(GUI, FileOption, boolean)",13,1,7,8
net.sf.freecol.client.gui.option.FileOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.FileOptionUI.reset(),1,1,2,2
net.sf.freecol.client.gui.option.FileOptionUI.setValue(File),0,1,1,1
net.sf.freecol.client.gui.option.FileOptionUI.updateOption(),2,1,3,3
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.BlinkingLabel(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.actionPerformed(ActionEvent),3,1,3,3
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.getMinimumSize(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.getPreferredSize(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyPressed(KeyEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyReleased(KeyEvent),1,1,2,2
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.keyTyped(KeyEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseClicked(MouseEvent),1,1,2,2
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseEntered(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseExited(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mousePressed(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.mouseReleased(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.startBlinking(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel.stopBlinking(),0,1,1,1
"net.sf.freecol.client.gui.option.FreeColActionUI.FreeColActionUI(FreeColAction, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.actionPerformed(ActionEvent),2,1,3,3
net.sf.freecol.client.gui.option.FreeColActionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.getHumanKeyStrokeText(KeyStroke),2,2,1,3
net.sf.freecol.client.gui.option.FreeColActionUI.getRecordImage(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.getRemoveImage(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.removeKeyStroke(KeyStroke),2,1,5,5
net.sf.freecol.client.gui.option.FreeColActionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.setOptionGroupUI(OptionGroupUI),0,1,1,1
net.sf.freecol.client.gui.option.FreeColActionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.IntegerOptionUI.IntegerOptionUI(IntegerOption, boolean)",3,1,2,3
net.sf.freecol.client.gui.option.IntegerOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.IntegerOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.IntegerOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.LanguageOptionUI.LanguageOptionUI(LanguageOption, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.LanguageOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.LanguageOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.LanguageOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.ListOptionUI.ListOptionUI(GUI, ListOption<T>, boolean, Function<AbstractOption, Boolean>)",32,9,13,20
net.sf.freecol.client.gui.option.ListOptionUI.canModifyChoice(AbstractOption<T>),0,1,1,1
net.sf.freecol.client.gui.option.ListOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.ListOptionUI.getJLabel(),0,1,1,1
net.sf.freecol.client.gui.option.ListOptionUI.getValue(),1,1,2,2
net.sf.freecol.client.gui.option.ListOptionUI.reset(),1,1,2,2
"net.sf.freecol.client.gui.option.ListOptionUI.setCellRenderer(GUI, AbstractOption<T>, boolean)",2,1,3,3
net.sf.freecol.client.gui.option.ListOptionUI.updateOption(),0,1,1,1
net.sf.freecol.client.gui.option.ListOptionUI.valueChanged(ListSelectionEvent),3,1,4,4
net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer.BoxRenderer(GUI),0,1,1,1
"net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer.setLabelValues(JLabel, FreeColModFile)",1,1,2,2
net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer.ModOptionRenderer(GUI),0,1,1,1
"net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer.setLabelValues(JLabel, ModOption)",2,1,2,2
"net.sf.freecol.client.gui.option.ModOptionUI.ModOptionUI(GUI, ModOption, boolean)",2,1,3,3
net.sf.freecol.client.gui.option.ModOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.ModOptionUI.getListCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.option.ModOptionUI.labelModFile(GUI, JLabel, FreeColModFile)",4,1,4,4
net.sf.freecol.client.gui.option.ModOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.ModOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.OptionGroupUI.OptionGroupUI(GUI, OptionGroup, boolean)",1,1,2,2
net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree.OptionTree(DefaultTreeModel),0,1,1,1
"net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree.convertValueToText(Object, boolean, boolean, boolean, int, boolean)",0,1,1,1
"net.sf.freecol.client.gui.option.OptionGroupUI.addOptionUI(Option, boolean)",12,3,8,8
"net.sf.freecol.client.gui.option.OptionGroupUI.buildTree(OptionGroup, DefaultMutableTreeNode)",7,4,3,4
net.sf.freecol.client.gui.option.OptionGroupUI.getOptionUI(String),0,1,1,1
"net.sf.freecol.client.gui.option.OptionGroupUI.getOptionUI(String, Class<T>)",0,1,1,1
net.sf.freecol.client.gui.option.OptionGroupUI.getTree(),0,1,1,1
net.sf.freecol.client.gui.option.OptionGroupUI.removeKeyStroke(KeyStroke),3,1,3,3
net.sf.freecol.client.gui.option.OptionGroupUI.reset(),1,1,2,2
net.sf.freecol.client.gui.option.OptionGroupUI.selectOption(String),1,1,2,2
net.sf.freecol.client.gui.option.OptionGroupUI.updateOption(),1,1,2,2
net.sf.freecol.client.gui.option.OptionGroupUI.valueChanged(TreeSelectionEvent),8,1,5,5
"net.sf.freecol.client.gui.option.OptionUI.OptionUI(T, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.getJLabel(),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.getListCellRenderer(),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.getOption(),0,1,1,1
"net.sf.freecol.client.gui.option.OptionUI.getOptionUI(GUI, Option, boolean)",19,17,15,17
net.sf.freecol.client.gui.option.OptionUI.initialize(),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.isEditable(),1,1,2,2
net.sf.freecol.client.gui.option.OptionUI.isEnabled(),1,1,2,2
net.sf.freecol.client.gui.option.OptionUI.setEditable(boolean),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.setEnabler(BooleanOptionUI),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.setLabel(JLabel),0,1,1,1
net.sf.freecol.client.gui.option.OptionUI.setOption(T),0,1,1,1
"net.sf.freecol.client.gui.option.PercentageOptionUI.PercentageOptionUI(PercentageOption, boolean)",2,1,2,2
net.sf.freecol.client.gui.option.PercentageOptionUI.reset(),0,1,1,1
"net.sf.freecol.client.gui.option.RangeOptionUI.RangeOptionUI(RangeOption, boolean)",4,1,3,3
net.sf.freecol.client.gui.option.RangeOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.RangeOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.SelectOptionUI.SelectOptionUI(SelectOption, boolean)",3,1,3,3
net.sf.freecol.client.gui.option.SelectOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.SelectOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.SelectOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.SliderOptionUI.SliderOptionUI(T, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.SliderOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.SliderOptionUI.getJLabel(),0,1,1,1
net.sf.freecol.client.gui.option.SliderOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.SliderOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.StringOptionUI.StringOptionUI(StringOption, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.StringOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.StringOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.StringOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.TextOptionUI.TextOptionUI(TextOption, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.TextOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.TextOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.TextOptionUI.updateOption(),0,1,1,1
"net.sf.freecol.client.gui.option.UnitTypeOptionUI.ChoiceRenderer.setLabelValues(JLabel, UnitType)",1,1,2,2
"net.sf.freecol.client.gui.option.UnitTypeOptionUI.UnitTypeOptionUI(UnitTypeOption, boolean)",0,1,1,1
net.sf.freecol.client.gui.option.UnitTypeOptionUI.getComponent(),0,1,1,1
net.sf.freecol.client.gui.option.UnitTypeOptionUI.reset(),0,1,1,1
net.sf.freecol.client.gui.option.UnitTypeOptionUI.updateOption(),0,1,1,1
net.sf.freecol.client.gui.panel.AboutPanel.AboutPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.AboutPanel.actionPerformed(ActionEvent),3,1,5,5
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter.BuildQueueMouseAdapter(boolean),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter.mousePressed(MouseEvent),17,3,11,14
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueuePanel(FreeColClient, Colony)",13,1,6,7
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.BuildablesTransferable(List<IndexedBuildable>),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getBuildables(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getTransferData(DataFlavor),1,2,1,2
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.getTransferDataFlavors(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable.isDataFlavorSupported(DataFlavor),0,1,1,1
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.canImport(JComponent, DataFlavor[])",1,1,2,2
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.createTransferable(JComponent),2,2,2,3
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.exportDone(JComponent, Transferable, int)",0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.getSourceActions(JComponent),1,1,1,2
"net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.importData(JComponent, Transferable)",41,12,18,28
net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer.DefaultBuildQueueCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer.getListCellRendererComponent(JList<? extends BuildableType>, BuildableType, int, boolean, boolean)",8,1,5,6
"net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.IndexedBuildable(BuildableType, int)",0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.getBuildable(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable.getIndex(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.actionPerformed(ActionEvent),9,3,5,8
"net.sf.freecol.client.gui.panel.BuildQueuePanel.checkAbilities(BuildableType, List<String>)",6,1,4,4
net.sf.freecol.client.gui.panel.BuildQueuePanel.convertJComp(JComponent),6,1,1,4
net.sf.freecol.client.gui.panel.BuildQueuePanel.getBuildableTypes(JList<? extends BuildableType>),2,2,3,3
net.sf.freecol.client.gui.panel.BuildQueuePanel.getColony(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.getMaximumIndex(BuildableType),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.getMinimumIndex(BuildableType),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.hasBuildingType(BuildingType),6,5,5,5
net.sf.freecol.client.gui.panel.BuildQueuePanel.itemStateChanged(ItemEvent),2,1,3,3
net.sf.freecol.client.gui.panel.BuildQueuePanel.removeBuildable(Object),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.setBuyLabel(BuildableType),1,1,2,2
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateAllLists(),8,1,8,8
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateBuildingList(),29,6,17,20
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateCompact(boolean),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateDetailView(),1,1,1,2
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateLists(boolean),0,1,1,1
net.sf.freecol.client.gui.panel.BuildQueuePanel.updateUnitList(),25,3,15,16
"net.sf.freecol.client.gui.panel.BuildingPanel.BuildingPanel(FreeColClient, Building)",0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel.UpkeepLabel(int),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel.paintComponent(Graphics),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.BuildingPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.createToolTip(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.getBuilding(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.getUnitLabels(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.initialize(),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.paintComponent(Graphics),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.BuildingPanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.BuildingPanel.update(),19,1,13,13
"net.sf.freecol.client.gui.panel.CargoPanel.CargoPanel(FreeColClient, boolean)",1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.accepts(Goods),1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.accepts(Unit),1,1,2,2
"net.sf.freecol.client.gui.panel.CargoPanel.add(Component, boolean)",2,2,4,5
net.sf.freecol.client.gui.panel.CargoPanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.getCarrier(),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.initialize(),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.isActive(),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.remove(Component),1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.setCarrier(Unit),1,1,2,2
net.sf.freecol.client.gui.panel.CargoPanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.CargoPanel.update(),11,1,6,6
net.sf.freecol.client.gui.panel.CargoPanel.updateTitle(),1,1,2,2
net.sf.freecol.client.gui.panel.ChatPanel.ChatPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.ChatPanel.actionPerformed(ActionEvent),4,1,3,4
net.sf.freecol.client.gui.panel.ChatPanel.getChatText(),0,1,1,1
net.sf.freecol.client.gui.panel.ChatPanel.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.ASingleBuildingPanel(Building),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.add(Component, boolean)",7,4,3,4
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.initialize(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.tryWork(Unit),1,2,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel.update(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.BuildingsPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.cleanup(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.initialize(),2,2,2,3
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.update(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel.ColonyCargoPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel.update(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.ColonyInPortPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.accepts(Unit),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.initialize(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel.selectLabel(),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.ColonyPanel(FreeColClient, Colony)",7,1,6,6
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.OutsideColonyPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.add(Component, boolean)",13,5,6,7
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.initialize(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.selectLabel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.PopulationPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.createToolTip(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.initialize(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel.update(),6,2,5,6
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.ASingleTilePanel(ColonyTile, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.add(Component, boolean)",7,4,3,4
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.cleanup(),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.contains(int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.getColonyTile(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.initialize(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.tryWork(Unit),17,6,10,13
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.update(),10,2,7,7
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel.updateDescriptionLabel(UnitLabel),2,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.TilesPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.cleanup(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.initialize(),10,6,5,6
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.paintComponent(Graphics),1,1,2,2
"net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.showPoorProduction(WorkLocation, StringTemplate)",2,2,2,3
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.update(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.WarehousePanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.add(Component, boolean)",3,3,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.initialize(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.propertyChange(PropertyChangeEvent),2,1,2,3
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel.update(),8,2,5,6
net.sf.freecol.client.gui.panel.ColonyPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.addMouseListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.addPropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.cleanup(),4,1,5,5
net.sf.freecol.client.gui.panel.ColonyPanel.closeColonyPanel(),15,6,7,10
net.sf.freecol.client.gui.panel.ColonyPanel.generateColonyUnitsMenu(),16,1,10,11
net.sf.freecol.client.gui.panel.ColonyPanel.getColony(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.getTilesPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.getTilesScrollGuiScaledDimension(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.getUnitList(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.getWarehousePanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.initialize(Colony),8,1,7,9
net.sf.freecol.client.gui.panel.ColonyPanel.propertyChange(PropertyChangeEvent),17,2,13,14
net.sf.freecol.client.gui.panel.ColonyPanel.removeMouseListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.removeNotify(),1,2,1,2
net.sf.freecol.client.gui.panel.ColonyPanel.removePropertyChangeListeners(),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.setColony(Colony),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.setSelectedUnit(Unit),1,1,2,2
net.sf.freecol.client.gui.panel.ColonyPanel.setSelectedUnitLabel(UnitLabel),6,1,4,4
net.sf.freecol.client.gui.panel.ColonyPanel.setTransferHandlers(boolean),1,1,1,2
"net.sf.freecol.client.gui.panel.ColonyPanel.tryWork(Unit, WorkLocation)",3,2,3,4
net.sf.freecol.client.gui.panel.ColonyPanel.update(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateBuildingsPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateCarrierButtons(),12,5,8,8
net.sf.freecol.client.gui.panel.ColonyPanel.updateConstructionPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateInPortPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateNetProductionPanel(),3,1,3,3
net.sf.freecol.client.gui.panel.ColonyPanel.updateOutsideColonyPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updatePopulationPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateProduction(),11,2,7,8
net.sf.freecol.client.gui.panel.ColonyPanel.updateTilesPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColonyPanel.updateWarehousePanel(),0,1,1,1
net.sf.freecol.client.gui.panel.ColorCellEditor.ColorCellEditor(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.ColorCellEditor.actionPerformed(ActionEvent),9,1,4,6
net.sf.freecol.client.gui.panel.ColorCellEditor.getCellEditorValue(),0,1,1,1
"net.sf.freecol.client.gui.panel.ColorCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.ColorCellRenderer.ColorCellRenderer(boolean),1,1,2,2
"net.sf.freecol.client.gui.panel.ColorCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",1,1,2,2
"net.sf.freecol.client.gui.panel.ColorChooserPanel.ColorChooserPanel(FreeColClient, ActionListener)",0,1,1,1
net.sf.freecol.client.gui.panel.ColorChooserPanel.getColor(),0,1,1,1
net.sf.freecol.client.gui.panel.ColorChooserPanel.removeNotify(),0,1,1,1
"net.sf.freecol.client.gui.panel.ConstructionPanel.ConstructionPanel(FreeColClient, Colony, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.ConstructionPanel.cleanup(),2,1,3,3
net.sf.freecol.client.gui.panel.ConstructionPanel.getDefaultLabel(),0,1,1,1
net.sf.freecol.client.gui.panel.ConstructionPanel.initialize(),3,1,3,3
net.sf.freecol.client.gui.panel.ConstructionPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.ConstructionPanel.setDefaultLabel(StringTemplate),0,1,1,1
net.sf.freecol.client.gui.panel.ConstructionPanel.update(),1,1,2,2
net.sf.freecol.client.gui.panel.ConstructionPanel.update(BuildableType),7,1,4,4
net.sf.freecol.client.gui.panel.CornerMapControls.CornerMapControls(FreeColClient),4,2,1,3
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin.MiniMapPanelSkin(),0,1,1,1
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin.paintComponent(Graphics),1,1,2,2
"net.sf.freecol.client.gui.panel.CornerMapControls.calculateFirstPosition(Dimension, List<UnitButton>, int, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.panel.CornerMapControls.calculateTotalDimension(List<UnitButton>, int)",3,3,2,3
"net.sf.freecol.client.gui.panel.CornerMapControls.centerComponentOnCoordinate(JComponent, PropertyList, String)",0,1,1,1
net.sf.freecol.client.gui.panel.CornerMapControls.getComponentsPresent(),7,1,7,7
net.sf.freecol.client.gui.panel.CornerMapControls.getComponentsToAdd(Dimension),10,2,8,9
"net.sf.freecol.client.gui.panel.CornerMapControls.layoutUnitButtons(List<UnitButton>, Dimension, Point, int)",3,3,2,3
net.sf.freecol.client.gui.panel.CornerMapControls.updateLayoutIfNeeded(),3,2,2,3
"net.sf.freecol.client.gui.panel.DeclarationPanel.DeclarationPanel(FreeColClient, Runnable)",0,1,1,1
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.SignaturePanel(),0,1,1,1
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.addActionListener(ActionListener),1,1,2,2
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.getAbbreviatedName(String),10,5,4,10
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.initialize(String),0,1,1,1
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.isTooLarge(String),0,1,1,1
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.notifyStopped(),1,1,2,2
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.paintComponent(Graphics),3,2,2,4
"net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.scaleToInt(double, float)",0,1,1,1
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel.startAnimation(),8,1,4,5
net.sf.freecol.client.gui.panel.DeclarationPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.DeclarationPanel.closePanel(),1,1,2,2
net.sf.freecol.client.gui.panel.DeclarationPanel.paintComponent(Graphics),0,1,1,1
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.DefaultTransferHandler(FreeColClient, FreeColPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.FreeColDragGestureRecognizer(DragGestureListener),0,1,1,1
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.gestured(JComponent, MouseEvent, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.registerListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer.unregisterListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragDropEnd(DragSourceDropEvent),4,1,3,3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragEnter(DragSourceDragEvent),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragExit(DragSourceEvent),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragGestureRecognized(DragGestureEvent),2,2,3,3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dragOver(DragSourceDragEvent),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.dropActionChanged(DragSourceDragEvent),0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.getCursor(JComponent),8,3,4,6
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler.updatePartialChosen(JComponent, boolean)",1,1,2,2
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.canImport(JComponent, DataFlavor[])",2,1,2,3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.createTransferable(JComponent),1,1,1,2
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.equipUnitIfPossible(UnitLabel, AbstractGoods)",7,4,8,9
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.exportAsDrag(JComponent, InputEvent, int)",3,1,2,3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.getAmount(GoodsType, int, int, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.DefaultTransferHandler.getDropTarget(JComponent),4,1,3,3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.getSourceActions(JComponent),0,1,1,1
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importData(JComponent, Transferable)",31,3,17,19
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importFail(JComponent, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importGoods(JComponent, GoodsLabel, UnitLabel)",35,7,16,18
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importGoodsType(JComponent, GoodsTypeLabel)",3,3,3,3
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importMarket(JComponent, MarketLabel)",10,7,5,7
"net.sf.freecol.client.gui.panel.DefaultTransferHandler.importUnit(JComponent, UnitLabel, UnitLabel)",2,3,3,3
net.sf.freecol.client.gui.panel.DefaultTransferHandler.restoreSelection(UnitLabel),2,1,3,3
"net.sf.freecol.client.gui.panel.DragListener.DragListener(FreeColClient, FreeColPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.DragListener.mousePressed(MouseEvent),44,6,23,26
net.sf.freecol.client.gui.panel.DropListener.mouseReleased(MouseEvent),3,1,3,3
net.sf.freecol.client.gui.panel.DropTarget.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.DropTarget.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.DropTarget.accepts(Unit),0,1,1,1
net.sf.freecol.client.gui.panel.DropTarget.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.ErrorPanel.ErrorPanel(FreeColClient),1,1,2,2
"net.sf.freecol.client.gui.panel.ErrorPanel.ErrorPanel(FreeColClient, String)",0,1,1,1
net.sf.freecol.client.gui.panel.ErrorPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.accepts(Unit),1,1,2,2
"net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.add(Component, boolean)",30,11,14,18
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.initialize(Location),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel.update(),13,1,9,9
"net.sf.freecol.client.gui.panel.EuropePanel.EuropeButton.EuropeButton(String, int, String, ActionListener)",0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.EuropeInPortPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.accepts(Unit),2,3,1,3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.addPropertyChangeListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel.removePropertyChangeListeners(),0,1,1,1
"net.sf.freecol.client.gui.panel.EuropePanel.EuropePanel(FreeColClient, boolean)",3,1,3,3
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.EuropeanDocksPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.add(Component, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.addPropertyChangeListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.remove(Component),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.removePropertyChangeListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.selectLabel(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel.suggested(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.MarketPanel(EuropePanel),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(Goods),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.accepts(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.add(Component, boolean)",13,3,5,7
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.initialize(),3,1,3,3
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel.remove(Component),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.TransactionLog(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.add(String),2,1,2,3
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.initialize(),0,1,1,1
"net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.logPurchase(GoodsType, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog.logSale(GoodsType, int, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.exitAction(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.getUnitList(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.initialize(Europe),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.refresh(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.panel.EuropePanel.sailAction(),2,1,3,3
net.sf.freecol.client.gui.panel.EuropePanel.setSelectedUnitLabel(UnitLabel),6,1,4,4
net.sf.freecol.client.gui.panel.EuropePanel.unloadAction(),10,1,6,6
"net.sf.freecol.client.gui.panel.EventPanel.EventPanel(FreeColClient, String, String, String)",2,1,2,3
net.sf.freecol.client.gui.panel.FindSettlementPanel.FindSettlementPanel(FreeColClient),2,1,2,2
net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer.SettlementRenderer(ImageLibrary),0,1,1,1
"net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer.setLabelValues(JLabel, Settlement)",1,1,1,2
net.sf.freecol.client.gui.panel.FindSettlementPanel.itemStateChanged(ItemEvent),1,1,2,4
net.sf.freecol.client.gui.panel.FindSettlementPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.FindSettlementPanel.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.panel.FindSettlementPanel.selectSettlement(),3,1,4,4
net.sf.freecol.client.gui.panel.FindSettlementPanel.updateSearch(DisplayListOption),9,1,5,8
net.sf.freecol.client.gui.panel.FindSettlementPanel.valueChanged(ListSelectionEvent),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(Action),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(ButtonStyle, Action)",0,1,1,1
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(Icon),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(String),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColButton.FreeColButton(String, Icon)",0,1,1,1
net.sf.freecol.client.gui.panel.FreeColButton.getButtonStyle(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColButton.withButtonStyle(ButtonStyle),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColImageBorder.FreeColImageBorder(String),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColImageBorder.FreeColImageBorder(String, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.FreeColImageBorder.ensureInitialized(),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColImageBorder.getBorderInsets(Component),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColImageBorder.getBorderInsets(Component, Insets)",6,2,1,6
net.sf.freecol.client.gui.panel.FreeColImageBorder.getHeight(Image),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColImageBorder.getImage(String),2,3,1,3
net.sf.freecol.client.gui.panel.FreeColImageBorder.getWidth(Image),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColImageBorder.loadImages(),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColImageBorder.loadImages(BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, BufferedImage, ...)",0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColImageBorder.paintBorder(Component, Graphics, int, int, int, int)",8,1,9,9
net.sf.freecol.client.gui.panel.FreeColImageBorder.reloadAllImages(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColImageBorder.setScaleFactor(float),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.FreeColPanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColPanel.FreeColPanel(FreeColClient, String, LayoutManager)",0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.FreeColPanel.addClosingCallback(Runnable),4,1,3,3
net.sf.freecol.client.gui.panel.FreeColPanel.createColonyButton(Colony),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getClientOptions(),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColPanel.getFreeColClient(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getGUI(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getGame(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getImageLibrary(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getMap(),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColPanel.getMyPlayer(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getSmallAbstractUnitImage(AbstractUnit),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.getSpecification(),1,2,1,2
net.sf.freecol.client.gui.panel.FreeColPanel.igc(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.isEditable(),0,1,1,1
net.sf.freecol.client.gui.panel.FreeColPanel.removeNotify(),2,2,2,3
net.sf.freecol.client.gui.panel.FreeColPanel.requestFocus(),1,1,2,2
net.sf.freecol.client.gui.panel.FreeColPanel.setEscapeAction(AbstractAction),0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType)",0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColProgressBar.FreeColProgressBar(FreeColClient, GoodsType, int, int, int, int)",1,1,2,2
net.sf.freecol.client.gui.panel.FreeColProgressBar.paintComponent(Graphics),19,1,8,14
"net.sf.freecol.client.gui.panel.FreeColProgressBar.update(int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.FreeColProgressBar.update(int, int, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.GoodsTypePanel.GoodsTypePanel(LayoutManager, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.GoodsTypePanel.GoodsTypePanel(boolean),0,1,1,1
net.sf.freecol.client.gui.panel.GoodsTypePanel.accepts(GoodsType),0,1,1,1
"net.sf.freecol.client.gui.panel.GoodsTypePanel.add(Component, boolean)",2,2,2,3
net.sf.freecol.client.gui.panel.GoodsTypePanel.addLabel(GoodsTypeLabel),3,2,4,4
net.sf.freecol.client.gui.panel.GoodsTypePanel.findLabel(GoodsType),4,3,3,4
net.sf.freecol.client.gui.panel.GoodsTypePanel.removeGoodsType(GoodsType),1,2,2,2
net.sf.freecol.client.gui.panel.GoodsTypePanel.setLabels(List<GoodsTypeLabel>),3,1,3,3
net.sf.freecol.client.gui.panel.ImageSelection.ImageSelection(JLabel),0,1,1,1
net.sf.freecol.client.gui.panel.ImageSelection.getTransferData(DataFlavor),1,1,1,2
net.sf.freecol.client.gui.panel.ImageSelection.getTransferDataFlavors(),0,1,1,1
net.sf.freecol.client.gui.panel.ImageSelection.isDataFlavorSupported(DataFlavor),0,1,1,1
"net.sf.freecol.client.gui.panel.InPortPanel.InPortPanel(LayoutManager, PortPanel, String, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.InPortPanel.selectLabel(),12,5,6,8
"net.sf.freecol.client.gui.panel.IndianSettlementPanel.IndianSettlementPanel(FreeColClient, IndianSettlement)",18,1,14,17
net.sf.freecol.client.gui.panel.InfoPanel.InfoPanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.InfoPanel.InfoPanel(FreeColClient, boolean)",2,1,2,2
"net.sf.freecol.client.gui.panel.InfoPanel.addLabels(JPanel, List<JLabel>, int)",8,4,5,5
net.sf.freecol.client.gui.panel.InfoPanel.changeMode(InfoPanelMode),6,1,3,6
net.sf.freecol.client.gui.panel.InfoPanel.fillEndPanel(),1,1,2,2
net.sf.freecol.client.gui.panel.InfoPanel.fillMapPanel(MapTransform),2,1,3,3
net.sf.freecol.client.gui.panel.InfoPanel.fillTilePanel(Tile),19,1,7,7
net.sf.freecol.client.gui.panel.InfoPanel.fillUnitPanel(Unit),7,1,6,6
net.sf.freecol.client.gui.panel.InfoPanel.getTile(),3,3,3,4
net.sf.freecol.client.gui.panel.InfoPanel.newPanel(LayoutManager),0,1,1,1
net.sf.freecol.client.gui.panel.InfoPanel.paintComponent(Graphics),1,1,2,2
net.sf.freecol.client.gui.panel.InfoPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.InfoPanel.refresh(),1,1,1,5
net.sf.freecol.client.gui.panel.InfoPanel.setPanel(MigPanel),2,1,2,2
net.sf.freecol.client.gui.panel.InfoPanel.update(),2,1,2,3
net.sf.freecol.client.gui.panel.InfoPanel.update(MapTransform),3,1,2,4
net.sf.freecol.client.gui.panel.InfoPanel.update(Tile),3,1,2,4
net.sf.freecol.client.gui.panel.InfoPanel.update(Unit),10,2,6,7
net.sf.freecol.client.gui.panel.InfoPanel.updateLayoutIfNeeded(),5,2,3,5
"net.sf.freecol.client.gui.panel.InformationPanel.InformationPanel(FreeColClient, String[], FreeColObject[], ImageIcon[])",0,1,1,1
"net.sf.freecol.client.gui.panel.InformationPanel.createPanelWithAllContent(String[], FreeColObject[], ImageIcon[], int)",10,1,5,5
net.sf.freecol.client.gui.panel.InformationPanel.displayLabel(FreeColObject),9,1,5,5
net.sf.freecol.client.gui.panel.InformationPanel.paintComponent(Graphics),0,1,1,1
net.sf.freecol.client.gui.panel.MainPanel.MainPanel(FreeColClient),2,1,2,3
net.sf.freecol.client.gui.panel.MainPanel.actionPerformed(ActionEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MainPanel.createImportantButton(Action),0,1,1,1
"net.sf.freecol.client.gui.panel.MapControls.MapControls(FreeColClient, boolean)",1,1,2,2
net.sf.freecol.client.gui.panel.MapControls.canZoomInMapControls(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.canZoomOutMapControls(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.clear(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.initializeUnitButtons(),1,2,1,2
net.sf.freecol.client.gui.panel.MapControls.repaint(),1,1,2,2
"net.sf.freecol.client.gui.panel.MapControls.update(ViewMode, Unit, Tile)",5,1,4,8
net.sf.freecol.client.gui.panel.MapControls.updateLayoutIfNeeded(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.updateMinimap(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.zoomIn(),0,1,1,1
net.sf.freecol.client.gui.panel.MapControls.zoomOut(),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.LostCityRumourTransform.transform(Tile),4,1,3,3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.MapEditorTransformPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.ResourceTransform.transform(Tile),8,3,4,6
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.RiverStyleTransform(int),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.getType(),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.setStyle(String),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform.transform(Tile),4,1,3,3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform.RiverTransform(int),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform.transform(Tile),14,2,7,8
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.SettlementTransform.transform(Tile),3,3,2,4
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.TileTypeTransform(TileType),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.getTileType(),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform.transform(Tile),0,1,1,1
"net.sf.freecol.client.gui.panel.MapEditorTransformPanel.buildButton(Image, String, MapTransform)",12,1,5,6
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.buildList(),1,1,2,2
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.getNativeNation(),1,1,2,2
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.getResourceChoice(List<ResourceType>),0,1,1,1
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.setNativeNation(Nation),0,1,1,1
net.sf.freecol.client.gui.panel.MigPanel.MigPanel(LayoutManager),0,1,1,1
net.sf.freecol.client.gui.panel.MigPanel.MigPanel(String),0,1,1,1
"net.sf.freecol.client.gui.panel.MigPanel.MigPanel(String, LayoutManager)",0,1,1,1
net.sf.freecol.client.gui.panel.MigPanel.getMigLayout(),0,1,1,1
net.sf.freecol.client.gui.panel.MigPanel.getUIClassID(),1,1,2,2
net.sf.freecol.client.gui.panel.MiniMap.MiniMap(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.MinimapPainterThread.run(),3,1,3,3
"net.sf.freecol.client.gui.panel.MiniMap.PrerenderedMinimap.PrerenderedMinimap(BufferedImage, int)",0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.canZoomIn(),1,1,2,2
net.sf.freecol.client.gui.panel.MiniMap.canZoomOut(),1,1,2,2
net.sf.freecol.client.gui.panel.MiniMap.getGUI(),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.getGame(),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.getMap(),1,1,2,2
net.sf.freecol.client.gui.panel.MiniMap.mouseClicked(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mouseDragged(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mouseEntered(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mouseExited(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mouseMoved(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mousePressed(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.mouseReleased(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.paintComponent(Graphics),1,2,1,2
"net.sf.freecol.client.gui.panel.MiniMap.paintEachTile(Graphics2D, Tile, int, List<Tile>, TileRenderingCallback)",2,2,2,3
"net.sf.freecol.client.gui.panel.MiniMap.paintEntireMinimap(Graphics, int, Dimension)",22,1,9,9
net.sf.freecol.client.gui.panel.MiniMap.paintMap(Graphics2D),3,4,1,4
"net.sf.freecol.client.gui.panel.MiniMap.paintMarkerForVisibleAreaOnMainMap(Graphics2D, Dimension, int, Dimension)",1,2,1,2
net.sf.freecol.client.gui.panel.MiniMap.recreateBufferImage(),1,2,1,2
net.sf.freecol.client.gui.panel.MiniMap.setFocus(MouseEvent),2,3,1,3
net.sf.freecol.client.gui.panel.MiniMap.setTileSize(int),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.setZoomOption(int),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.updateCachedMinimap(),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.zoomIn(),0,1,1,1
net.sf.freecol.client.gui.panel.MiniMap.zoomOut(),0,1,1,1
net.sf.freecol.client.gui.panel.NewPanel.NewPanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.NewPanel.NewPanel(FreeColClient, Specification)",24,3,12,14
net.sf.freecol.client.gui.panel.NewPanel.actionPerformed(ActionEvent),22,4,3,13
net.sf.freecol.client.gui.panel.NewPanel.checkDifficulty(),1,2,1,2
net.sf.freecol.client.gui.panel.NewPanel.checkTC(),1,2,1,2
net.sf.freecol.client.gui.panel.NewPanel.enableComponents(),1,1,1,5
"net.sf.freecol.client.gui.panel.NewPanel.enableComponents(Component[], boolean)",1,1,2,2
net.sf.freecol.client.gui.panel.NewPanel.getSelectedAdvantages(),0,1,1,1
net.sf.freecol.client.gui.panel.NewPanel.getSelectedDifficulty(),0,1,1,1
net.sf.freecol.client.gui.panel.NewPanel.getSelectedName(),0,1,1,1
net.sf.freecol.client.gui.panel.NewPanel.getSelectedPort(JTextField),3,2,1,4
net.sf.freecol.client.gui.panel.NewPanel.getSelectedRules(),0,1,1,1
net.sf.freecol.client.gui.panel.NewPanel.getSpecification(),1,2,1,2
net.sf.freecol.client.gui.panel.NewPanel.itemStateChanged(ItemEvent),1,1,2,2
net.sf.freecol.client.gui.panel.NewPanel.update(boolean),3,2,2,3
net.sf.freecol.client.gui.panel.NewPanel.updateDifficultyBox(),4,1,4,5
"net.sf.freecol.client.gui.panel.NewUnitPanel.NewUnitPanel(FreeColClient, LayoutManager, String, List<UnitType>)",0,1,1,1
net.sf.freecol.client.gui.panel.NewUnitPanel.actionPerformed(ActionEvent),4,1,3,3
net.sf.freecol.client.gui.panel.NewUnitPanel.removeNotify(),3,1,3,3
net.sf.freecol.client.gui.panel.NewUnitPanel.update(),1,1,2,2
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.AdvantageCellEditor(JComboBox<EuropeanNationType>),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.AdvantageCellEditor(List<EuropeanNationType>),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor.getCellEditorValue(),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer.AdvantageCellRenderer(Advantages),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",5,1,4,6
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.AvailableCellEditor(),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getActiveBox(int),1,1,1,2
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getCellEditorValue(),1,1,2,2
"net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer.AvailableCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",1,1,2,2
"net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.HeaderListener(JTableHeader, HeaderRenderer)",0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.mousePressed(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener.mouseReleased(MouseEvent),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.HeaderRenderer(Component...),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",1,1,2,2
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer.setPressedColumn(int),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.NationCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.NationStateRenderer.getListCellRendererComponent(JList<? extends NationState>, NationState, int, boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.PlayerCellEditor(),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.getCellEditorValue(),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor.getTableCellEditorComponent(JTable, Object, boolean, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer.PlayerCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",7,4,3,4
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTable(FreeColClient, NationOptions, Player)",1,1,1,4
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.PlayersTableModel(PreGameController, NationOptions, Player)",2,1,3,3
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnClass(int),1,6,1,6
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnCount(),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getColumnName(int),0,1,1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getRowCount(),0,1,1,1
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.getValueAt(int, int)",7,7,10,11
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.isCellEditable(int, int)",8,6,11,11
"net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.setValueAt(Object, int, int)",7,1,6,10
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel.update(),2,1,3,3
net.sf.freecol.client.gui.panel.PlayersTable.update(),0,1,1,1
"net.sf.freecol.client.gui.panel.PortPanel.PortPanel(FreeColClient, LayoutManager)",0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.getCargoPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.getPressListener(),0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.getSelectedUnit(),1,1,2,2
net.sf.freecol.client.gui.panel.PortPanel.getSelectedUnitLabel(),0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.getTransferHandler(),0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.PortPanel.setSelectedUnit(Unit),6,4,4,4
net.sf.freecol.client.gui.panel.PortPanel.setSelectedUnitLabel(UnitLabel),0,1,1,1
net.sf.freecol.client.gui.panel.PurchasePanel.PurchasePanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.QuickActionMenu.QuickActionMenu(FreeColClient, FreeColPanel)",0,1,1,1
"net.sf.freecol.client.gui.panel.QuickActionMenu.addBoardItems(UnitLabel, Location)",3,2,5,6
net.sf.freecol.client.gui.panel.QuickActionMenu.addCarrierItems(UnitLabel),4,2,4,5
net.sf.freecol.client.gui.panel.QuickActionMenu.addCommandItems(UnitLabel),17,1,12,16
net.sf.freecol.client.gui.panel.QuickActionMenu.addEducationItems(UnitLabel),21,1,11,12
"net.sf.freecol.client.gui.panel.QuickActionMenu.addLoadItems(Goods, Location)",5,1,5,5
"net.sf.freecol.client.gui.panel.QuickActionMenu.addMarketItems(AbstractGoods, Europe)",5,1,5,5
net.sf.freecol.client.gui.panel.QuickActionMenu.addMenuItems(JComponent),5,1,6,6
net.sf.freecol.client.gui.panel.QuickActionMenu.addPayArrears(GoodsType),2,1,2,2
net.sf.freecol.client.gui.panel.QuickActionMenu.addRoleItems(UnitLabel),19,6,7,9
net.sf.freecol.client.gui.panel.QuickActionMenu.addTileItem(Tile),1,1,2,2
net.sf.freecol.client.gui.panel.QuickActionMenu.addTileItem(UnitLabel),2,2,3,3
net.sf.freecol.client.gui.panel.QuickActionMenu.addWorkItems(UnitLabel),51,2,20,30
net.sf.freecol.client.gui.panel.QuickActionMenu.createGoodsMenu(GoodsLabel),29,1,16,16
net.sf.freecol.client.gui.panel.QuickActionMenu.createMarketMenu(MarketLabel),1,1,2,2
"net.sf.freecol.client.gui.panel.QuickActionMenu.createRoleItem(UnitLabel, Role, int, Role, int, int)",7,1,6,8
net.sf.freecol.client.gui.panel.QuickActionMenu.createTileMenu(ASingleTilePanel),2,1,3,3
net.sf.freecol.client.gui.panel.QuickActionMenu.createUnitMenu(UnitLabel),42,1,20,20
"net.sf.freecol.client.gui.panel.QuickActionMenu.descendingList(Map<JMenuItem, Integer>)",0,1,1,1
net.sf.freecol.client.gui.panel.QuickActionMenu.getWorkLabel(WorkLocation),0,1,1,1
"net.sf.freecol.client.gui.panel.QuickActionMenu.makeProductionItem(GoodsType, WorkLocation, int, UnitLabel, boolean)",4,1,3,4
net.sf.freecol.client.gui.panel.QuickActionMenu.promptForGoods(AbstractGoods),1,1,2,2
net.sf.freecol.client.gui.panel.RecruitPanel.RecruitPanel(FreeColClient),1,1,2,2
net.sf.freecol.client.gui.panel.RecruitPanel.actionPerformed(ActionEvent),9,3,4,5
net.sf.freecol.client.gui.panel.RecruitPanel.removeNotify(),3,1,1,3
net.sf.freecol.client.gui.panel.RecruitPanel.update(),4,1,3,4
"net.sf.freecol.client.gui.panel.ServerListPanel.ServerListPanel(FreeColClient, ConnectController)",1,1,2,2
"net.sf.freecol.client.gui.panel.ServerListPanel.ServerListTableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.ServerListPanel.initialize(List<ServerInfo>),2,1,2,2
net.sf.freecol.client.gui.panel.ServerListPanel.refreshTable(),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListPanel.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListPanel.setEnabled(boolean),1,1,2,2
net.sf.freecol.client.gui.panel.ServerListTableModel.ServerListTableModel(List<ServerInfo>),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListTableModel.getColumnCount(),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListTableModel.getColumnName(int),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListTableModel.getItem(int),0,1,1,1
net.sf.freecol.client.gui.panel.ServerListTableModel.getRowCount(),0,1,1,1
"net.sf.freecol.client.gui.panel.ServerListTableModel.getValueAt(int, int)",4,7,10,10
net.sf.freecol.client.gui.panel.ServerListTableModel.setItems(List<ServerInfo>),0,1,1,1
net.sf.freecol.client.gui.panel.StartGamePanel.StartGamePanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.StartGamePanel.checkVictoryConditions(),5,3,7,7
"net.sf.freecol.client.gui.panel.StartGamePanel.displayChat(String, String, boolean)",2,1,2,2
net.sf.freecol.client.gui.panel.StartGamePanel.initialize(boolean),6,1,6,6
net.sf.freecol.client.gui.panel.StartGamePanel.refreshPlayersTable(),1,1,2,2
net.sf.freecol.client.gui.panel.StartGamePanel.removeNotify(),1,1,2,2
net.sf.freecol.client.gui.panel.StartGamePanel.requestFocus(),0,1,1,1
net.sf.freecol.client.gui.panel.StartGamePanel.setEnabled(boolean),4,1,4,5
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.StatisticsModel(),0,1,1,1
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnClass(int),0,1,1,1
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnCount(),0,1,1,1
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getColumnName(int),0,1,1,1
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getRowCount(),0,1,1,1
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.getValueAt(int, int)",4,4,4,7
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel.setData(Map<String, String>)",1,1,2,2
"net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsPanel(FreeColClient, Map<String, String>, Map<String, String>)",0,1,1,1
"net.sf.freecol.client.gui.panel.StatisticsPanel.createStatsTable(String, Map<String, String>)",0,1,1,1
"net.sf.freecol.client.gui.panel.StatisticsPanel.displayStatsMessage(String, Map<String, String>)",6,1,5,5
net.sf.freecol.client.gui.panel.StatusPanel.StatusPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.StatusPanel.setStatusMessage(String),0,1,1,1
"net.sf.freecol.client.gui.panel.TilePanel.TilePanel(FreeColClient, Tile)",49,1,20,20
net.sf.freecol.client.gui.panel.TilePanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.AllGoodsTypesPanel(List<GoodsTypeLabel>),0,1,1,1
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.add(Component, boolean)",2,2,2,2
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.reset(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel.setEnabled(boolean),3,1,3,3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer.DestinationCellRenderer(),0,1,1,1
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer.getListCellRendererComponent(JList<? extends String>, String, int, boolean, boolean)",4,1,4,4
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel.StopGoodsTypesPanel(),0,1,1,1
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel.add(Component, boolean)",2,2,2,2
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.canImport(JComponent, DataFlavor[])",0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.createTransferable(JComponent),1,1,2,2
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.exportDone(JComponent, Transferable, int)",0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.getAllValues(JList<TradeRouteStop>),1,1,2,2
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.getSourceActions(JComponent),0,1,1,1
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler.importData(JComponent, Transferable)",11,2,8,8
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.StopListTransferable(List<TradeRouteStop>),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getStops(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getTransferData(DataFlavor),1,1,1,2
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.getTransferDataFlavors(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable.isDataFlavorSupported(DataFlavor),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer.StopRenderer(),0,1,1,1
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer.getListCellRendererComponent(JList<? extends TradeRouteStop>, TradeRouteStop, int, boolean, boolean)",10,5,6,7
"net.sf.freecol.client.gui.panel.TradeRouteInputPanel.TradeRouteInputPanel(FreeColClient, TradeRoute)",6,1,6,6
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.actionPerformed(ActionEvent),4,3,1,5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.addSelectedStops(),9,1,5,5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.buildCargoLabel(GoodsType),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.cancelImport(GoodsTypeLabel),3,1,3,3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.cancelTradeRoute(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.deleteCurrentlySelectedStops(),2,1,3,3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.enableImport(GoodsType),4,2,3,4
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.updateButtons(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.updateCargoPanel(TradeRouteStop),1,1,2,2
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.valueChanged(ListSelectionEvent),3,2,2,3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.verifyNewTradeRoute(),2,2,3,3
"net.sf.freecol.client.gui.panel.TradeRoutePanel.TradeRoutePanel(FreeColClient, Unit)",22,1,13,14
net.sf.freecol.client.gui.panel.TradeRoutePanel.actionPerformed(ActionEvent),5,2,3,5
net.sf.freecol.client.gui.panel.TradeRoutePanel.getRoute(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRoutePanel.newRoute(),8,1,5,5
net.sf.freecol.client.gui.panel.TradeRoutePanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.TradeRoutePanel.updateButtons(),3,1,3,3
net.sf.freecol.client.gui.panel.TradeRoutePanel.updateList(TradeRoute),14,1,8,10
net.sf.freecol.client.gui.panel.TrainPanel.TrainPanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.UnitButton.UnitButton(ActionManager, String)",0,1,1,1
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener.UnitButtonActionPropertyChangeListener(AbstractButton),0,1,1,1
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener.propertyChange(PropertyChangeEvent),12,1,12,12
net.sf.freecol.client.gui.panel.UnitButton.configurePropertiesFromAction(Action),4,1,3,3
net.sf.freecol.client.gui.panel.UnitButton.createActionPropertyChangeListener(Action),0,1,1,1
net.sf.freecol.client.gui.panel.UnitButton.refreshAction(),0,1,1,1
"net.sf.freecol.client.gui.panel.UnitPanel.UnitPanel(String, LayoutManager, PortPanel, String, boolean)",1,2,1,2
net.sf.freecol.client.gui.panel.UnitPanel.addPropertyChangeListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.cleanup(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.getPortPanel(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.initialize(),2,1,3,3
net.sf.freecol.client.gui.panel.UnitPanel.isEditable(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.propertyChange(PropertyChangeEvent),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.removePropertyChangeListeners(),0,1,1,1
net.sf.freecol.client.gui.panel.UnitPanel.setSelectedUnit(Unit),6,4,4,4
net.sf.freecol.client.gui.panel.UnitPanel.update(),22,1,12,12
"net.sf.freecol.client.gui.panel.Utility.blankBorder(int, int, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.createServerInetAddressBox(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.createTextArea(String),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.drawGoldenText(String, Graphics2D, Font, int, int)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getBorderColor(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getCellBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getColorCellBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String, Dimension)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.getDefaultTextArea(String, int)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getDefaultTextPane(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getDefaultTextPane(String),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getDialogBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getLeftCellBorder(),1,1,2,2
"net.sf.freecol.client.gui.panel.Utility.getLinkButton(String, Icon, String)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getLinkColor(),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.getMessageButton(String, String, Player, FreeColGameObject)",22,1,18,18
net.sf.freecol.client.gui.panel.Utility.getPossibleServerAddresses(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getProductionBorder(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getSimpleLineBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getTopCellBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getTopLeftCellBorder(),1,1,2,2
net.sf.freecol.client.gui.panel.Utility.getTrivialLineBorder(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.getWarningColor(),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.initStyleContext(Font),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizeBorder(JComponent, StringTemplate)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizeToolTip(JComponent, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizeToolTip(JComponent, StringTemplate)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedBorder(Named),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedBorder(Named, Color)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedBorder(String),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedBorder(String, Color)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedButton(String),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedButton(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedCheckBoxMenuItem(String, boolean)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedHeader(String, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(Named, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(String, int, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedHeaderLabel(StringTemplate, int, String)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedLabel(FreeColSpecObjectType),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedLabel(String),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedLabel(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedLabel(StringTemplate, Icon, int)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedMenu(String),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedMenu(StringTemplate),0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(String),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(String, Icon)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedMenuItem(StringTemplate, Icon)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedRadioButtonMenuItem(StringTemplate, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedTextArea(String),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedTextArea(String, int)",0,1,1,1
net.sf.freecol.client.gui.panel.Utility.localizedTextArea(StringTemplate),0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedTextArea(StringTemplate, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.localizedTextPanel(StringTemplate, ImageIcon)",0,1,1,1
"net.sf.freecol.client.gui.panel.Utility.padBorder(JComponent, int, int, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.WorkProductionPanel.WorkProductionPanel(FreeColClient, Unit)",5,1,4,5
"net.sf.freecol.client.gui.panel.WorkProductionPanel.output(List<Modifier>, UnitType)",10,4,4,5
net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(),0,1,1,1
net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(int),0,1,1,1
"net.sf.freecol.client.gui.panel.WrapLayout.WrapLayout(int, int, int)",0,1,1,1
"net.sf.freecol.client.gui.panel.WrapLayout.addRow(Dimension, int, int)",1,1,2,2
"net.sf.freecol.client.gui.panel.WrapLayout.layoutSize(Container, boolean)",17,1,8,11
net.sf.freecol.client.gui.panel.WrapLayout.minimumLayoutSize(Container),0,1,1,1
net.sf.freecol.client.gui.panel.WrapLayout.preferredLayoutSize(Container),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.BuildingDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.addSubTrees(DefaultMutableTreeNode),10,1,6,6
"net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel.buildDetail(String, JPanel)",51,2,21,25
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.ColopediaGameObjectTypePanel(FreeColClient, ColopediaPanel, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.addSubTrees(DefaultMutableTreeNode, List<T>)",0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.addSubTrees(DefaultMutableTreeNode, String, List<T>)",1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.appendRequiredAbility(StyledDocument, String, boolean)",4,1,4,4
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.buildItem(FreeColSpecObjectType, ImageIcon)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getAbilityComponent(Ability),2,2,2,2
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(FreeColSpecObjectType),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(FreeColSpecObjectType, String, ImageIcon)",1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getButton(PanelType, String, ImageIcon)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(AbstractGoods),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType, String)",0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getGoodsButton(GoodsType, int)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getId(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getListItemIconSize(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getModifierComponent(Modifier),1,1,2,2
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getName(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getResourceButton(ResourceType),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(AbstractUnit),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(UnitType),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel.getUnitButton(UnitType, String)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.ColopediaPanel(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.ColopediaPanel(FreeColClient, String)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.buildTree(),1,1,2,2
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.getListItemIconSize(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.hyperlinkUpdate(HyperlinkEvent),6,1,3,5
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.select(String),5,1,4,4
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.showDetails(ColopediaTreeItem),2,1,3,3
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel.valueChanged(TreeSelectionEvent),1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer.ColopediaTreeCellRenderer(ColopediaPanel, ImageLibrary)",0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer.getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)",2,1,3,3
"net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.ColopediaTreeItem(ColopediaDetailPanel, String, String, ImageIcon)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getIcon(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getId(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getPanelType(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.getText(),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem.toString(),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane.ConceptEditorPane(String),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane.paintComponent(Graphics),0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.addSubTrees(DefaultMutableTreeNode),2,1,3,3
"net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.buildDetail(String, JPanel)",1,2,1,2
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.getName(),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.FatherDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.addSubTrees(DefaultMutableTreeNode),5,1,5,5
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.buildDetail(FoundingFather, JPanel)",1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel.buildDetail(String, JPanel)",2,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.GoodsDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.addSubTrees(DefaultMutableTreeNode),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.buildDetail(String, JPanel)",71,2,22,27
"net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel.filterBuildables(List<T>, List<T>, GoodsType)",4,1,4,4
"net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.NationDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.addSubTrees(DefaultMutableTreeNode),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel.buildDetail(String, JPanel)",2,2,2,3
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.NationTypeDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.addSubTrees(DefaultMutableTreeNode),3,3,2,3
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildDetail(String, JPanel)",3,2,3,4
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildEuropeanNationTypeDetail(EuropeanNationType, JPanel)",13,1,8,8
"net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel.buildIndianNationTypeDetail(IndianNationType, JPanel)",1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.ResourcesDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.addSubTrees(DefaultMutableTreeNode),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel.buildDetail(String, JPanel)",7,2,3,5
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.TerrainDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.addProduction(JPanel, Stream<AbstractGoods>)",2,1,2,4
net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.addSubTrees(DefaultMutableTreeNode),1,1,2,2
"net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel.buildDetail(String, JPanel)",10,2,5,6
"net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.UnitDetailPanel(FreeColClient, ColopediaPanel)",0,1,1,1
net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.addSubTrees(DefaultMutableTreeNode),0,1,1,1
"net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel.buildDetail(String, JPanel)",43,2,22,25
net.sf.freecol.client.gui.panel.report.CompactLabourReport.CompactLabourReport(FreeColClient),0,1,1,1
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.CompactLabourReport(FreeColClient, UnitData)",1,1,1,2
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addHeader(),12,1,10,11
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocationData(LocationData, Colony, int)",38,1,22,28
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocationSummary(LocationData, int)",20,2,15,15
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addLocations(),4,1,4,4
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addNonLinkedLocation(LocationData, String, int)",1,2,1,2
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addRow(LocationData, String, String, JLabel, int, int)",3,1,4,4
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.addRow(LocationData, String, String, int, int, int)",1,1,2,2
net.sf.freecol.client.gui.panel.report.CompactLabourReport.addUnitTypes(),4,1,3,3
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createButton(String, ActionListener)",0,1,1,1
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createColonyButton(Colony),3,1,2,3
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createEmptyLabel(),0,1,1,1
net.sf.freecol.client.gui.panel.report.CompactLabourReport.createNonCountedLabel(int),0,1,1,1
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createNumberLabel(int, String)",1,1,2,2
"net.sf.freecol.client.gui.panel.report.CompactLabourReport.createUnitNameButton(String, UnitData)",1,1,2,2
net.sf.freecol.client.gui.panel.report.CompactLabourReport.getGoodsType(),1,1,2,2
net.sf.freecol.client.gui.panel.report.CompactLabourReport.initialize(),12,1,6,11
net.sf.freecol.client.gui.panel.report.CompactLabourReport.isOverview(),0,1,1,1
net.sf.freecol.client.gui.panel.report.CompactLabourReport.isSummary(),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter.ColonyLocationDataGetter(Colony),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter.getLocationData(UnitData),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LabourData(FreeColClient),10,3,7,8
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.LocationData(UnitData),0,1,1,1
"net.sf.freecol.client.gui.panel.report.LabourData.LocationData.LocationData(UnitData, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.add(LocationData),1,1,1,2
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.addOtherStudent(String),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getNetProduction(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getNotWorking(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherStudents(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherStudentsName(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getOtherWorkingAmateurs(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getRowCount(),9,1,2,10
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getStudents(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTeachers(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTotalColonists(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getTotalProduction(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getUnitData(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getWorkingAmateurs(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.getWorkingProfessionals(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.isTotal(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.LocationData.isTraining(),1,1,1,3
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.add(ProductionData),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.addProduction(int),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.getColonists(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData.getProduction(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.UnitData(UnitType),1,1,1,2
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getDetails(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getExpertProduction(),1,2,1,2
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getLocationData(Colony),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getTotal(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitName(),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitSummaryRowCount(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitType(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsAtSea(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsInEurope(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.getUnitsOnLand(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.hasDetails(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.isSummary(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.showNetProduction(),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.UnitData.showProduction(),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.gatherData(Player),18,1,11,11
net.sf.freecol.client.gui.panel.report.LabourData.getLabourTypes(Player),1,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.getSummary(),0,1,1,1
net.sf.freecol.client.gui.panel.report.LabourData.getUnitData(UnitType),1,1,2,2
"net.sf.freecol.client.gui.panel.report.LabourData.incrementColonyCount(Colony, Unit, UnitData)",7,2,6,7
"net.sf.freecol.client.gui.panel.report.LabourData.incrementOutsideWorker(UnitData, Unit, Getter)",6,1,5,6
"net.sf.freecol.client.gui.panel.report.LabourData.incrementOutsideWorker(UnitData, Unit, UnitData, Getter)",2,1,2,2
net.sf.freecol.client.gui.panel.report.LabourData.summarize(),3,1,3,3
"net.sf.freecol.client.gui.panel.report.LabourData.summarize(UnitData, Getter)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.ReportCargoPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportable(Unit),1,1,2,2
"net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportable(UnitType, Role)",2,1,5,5
net.sf.freecol.client.gui.panel.report.ReportCargoPanel.isReportableREF(AbstractUnit),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel.ReportClassicColonyPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel.update(),29,4,13,15
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.ColonySummary(Colony, List<GoodsType>)",19,3,10,12
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction.GoodsProduction(int, ProductionStatus, int)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction.accumulate(GoodsProduction),7,1,1,5
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.addSuggestion(Map<UnitType, Suggestion>, UnitType, Suggestion)",4,2,2,5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.produce(GoodsType),29,14,13,17
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ReportCompactColonyPanel(FreeColClient),3,1,3,3
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.actionPerformed(ActionEvent),6,4,4,4
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.addTogether(List<? extends JComponent>),3,2,4,4
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.conciseHeaders(Market),5,3,4,5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.loadResources(),1,2,1,2
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newButton(String, String, ImageIcon, Color, StringTemplate)",4,1,4,5
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newLabel(String, ImageIcon, Color)",1,1,1,2
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.newLabel(String, ImageIcon, Color, StringTemplate)",3,1,4,4
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.stpl(String),1,1,2,2
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.stpld(String),0,1,1,1
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.unitButtons(Map<UnitType, Suggestion>, List<UnitType>, Colony)",7,1,4,5
"net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.unitTypeLabels(Map<UnitType, Integer>, int, StringTemplate)",3,3,2,3
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.update(),6,1,5,5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.updateColony(ColonySummary),93,4,36,60
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.updateCombinedColonies(List<ColonySummary>),27,4,12,21
net.sf.freecol.client.gui.panel.report.ReportContinentalCongressPanel.ReportContinentalCongressPanel(FreeColClient),16,1,9,9
net.sf.freecol.client.gui.panel.report.ReportEducationPanel.ReportEducationPanel(FreeColClient),19,1,7,7
net.sf.freecol.client.gui.panel.report.ReportEducationPanel.getPanel(String),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportExplorationPanel.ReportExplorationPanel(FreeColClient),1,1,2,2
net.sf.freecol.client.gui.panel.report.ReportForeignAffairPanel.ReportForeignAffairPanel(FreeColClient),9,3,5,6
"net.sf.freecol.client.gui.panel.report.ReportHighScoresPanel.ReportHighScoresPanel(FreeColClient, String, List<HighScore>)",10,1,6,7
net.sf.freecol.client.gui.panel.report.ReportHistoryPanel.ReportHistoryPanel(FreeColClient),2,2,2,3
net.sf.freecol.client.gui.panel.report.ReportIndianPanel.ReportIndianPanel(FreeColClient),3,1,3,3
"net.sf.freecol.client.gui.panel.report.ReportIndianPanel.buildIndianAdvisorPanel(Player, Player)",43,1,17,18
"net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel.ReportLabourDetailPanel(FreeColClient, UnitType, Map<UnitType, Map<Location, Integer>>, TypeCountMap<UnitType>, List<Colony>)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel.initialize(),7,1,4,5
"net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel.LabourUnitPanel(FreeColClient, UnitType, int)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel.paintComponent(Graphics),1,1,2,2
"net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanelRenderer.getListCellRendererComponent(JList<? extends LabourUnitPanel>, LabourUnitPanel, int, boolean, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.ReportLabourPanel(FreeColClient),15,1,11,11
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.actionPerformed(ActionEvent),2,1,2,2
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.showDetails(),1,2,1,2
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.ReportMilitaryPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportable(Unit),2,1,3,3
"net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportable(UnitType, Role)",4,2,4,5
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel.isReportableREF(AbstractUnit),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.ReportNavalPanel(FreeColClient),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportable(Unit),0,1,1,1
"net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportable(UnitType, Role)",1,1,3,3
net.sf.freecol.client.gui.panel.report.ReportNavalPanel.isReportableREF(AbstractUnit),0,1,1,1
"net.sf.freecol.client.gui.panel.report.ReportPanel.ReportPanel(FreeColClient, String)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportPanel.actionPerformed(ActionEvent),5,1,3,3
net.sf.freecol.client.gui.panel.report.ReportPanel.createBorder(),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportPanel.createUnitTypeLabel(AbstractUnit),1,1,2,2
net.sf.freecol.client.gui.panel.report.ReportPanel.getLocationLabelFor(Unit),3,3,3,3
net.sf.freecol.client.gui.panel.report.ReportPanel.initialize(),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportPanel.removeNotify(),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportPanel.setMainComponent(Component),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportProductionPanel.ReportProductionPanel(FreeColClient),1,1,2,2
net.sf.freecol.client.gui.panel.report.ReportProductionPanel.update(),25,1,11,11
net.sf.freecol.client.gui.panel.report.ReportReligiousPanel.ReportReligiousPanel(FreeColClient),6,1,4,4
net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.ReportRequirementsPanel(FreeColClient),7,1,5,5
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addBadAssignmentWarning(StyledDocument, Colony, Unit, Unit)",1,1,2,2
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addExpertWarning(StyledDocument, Colony, GoodsType, UnitType)",25,1,14,14
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addProductionWarning(StyledDocument, Colony, GoodsType, GoodsType)",7,1,6,6
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.addTileWarning(StyledDocument, Colony, String, Tile)",3,2,3,4
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.checkColony(Colony, StyledDocument)",39,5,29,30
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.createColonyButton(Colony, String, boolean)",1,1,2,2
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.createColonyButton(Colony, boolean)",0,1,1,1
"net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel.insertColonyButtons(StyledDocument, List<Colony>)",1,1,2,2
net.sf.freecol.client.gui.panel.report.ReportTradePanel.ReportTradePanel(FreeColClient),29,1,15,15
net.sf.freecol.client.gui.panel.report.ReportTradePanel.createLeftLabel(String),0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportTradePanel.createNumberLabel(int),0,1,1,1
"net.sf.freecol.client.gui.panel.report.ReportTradePanel.createNumberLabel(int, boolean)",3,1,3,4
"net.sf.freecol.client.gui.panel.report.ReportTurnPanel.ReportTurnPanel(FreeColClient, List<ModelMessage>)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.displayMessages(),54,3,16,22
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.getHeadline(FreeColGameObject),15,1,13,13
"net.sf.freecol.client.gui.panel.report.ReportTurnPanel.insertMessage(StyledDocument, ModelMessage, Player)",4,1,4,4
net.sf.freecol.client.gui.panel.report.ReportTurnPanel.setMessages(List<ModelMessage>),1,1,2,2
"net.sf.freecol.client.gui.panel.report.ReportUnitPanel.ReportUnitPanel(FreeColClient, String, boolean)",0,1,1,1
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.display(),34,5,12,14
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.gatherData(),12,1,7,8
net.sf.freecol.client.gui.panel.report.ReportUnitPanel.getUnitButton(Unit),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI.paint(Graphics, JComponent)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColButtonUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColButtonUI.getButtonStyle(JComponent),2,2,2,2
net.sf.freecol.client.gui.plaf.FreeColButtonUI.installUI(JComponent),2,1,2,2
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.paint(Graphics, JComponent)",5,1,5,5
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.paintButtonPressed(Graphics, AbstractButton)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColButtonUI.uninstallUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColButtonUI.updateStyle(JComponent, ButtonStyle)",3,1,3,3
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getIconHeight(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getIconWidth(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.getWidgetSize(),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon.paintIcon(Component, Graphics, int, int)",8,1,8,8
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.createCheckBoxIcon(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(String),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.FreeColComboBoxRenderer(String, boolean)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.NormalComponent.NormalComponent(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent.SelectedComponent(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent.paintComponent(Graphics),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.getListCellRendererComponent(JList<? extends T>, T, int, boolean, boolean)",1,1,1,2
"net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.setLabelValues(JLabel, T)",26,1,14,16
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.createRenderer(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI.installUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.FreeColFileChooserUI(JFileChooser),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.addControlButtons(),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.FreeColFormattedTextFieldUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI.getPropertyPrefix(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLabelUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLabelUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColLabelUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColListUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColListUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColListUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColLookAndFeel(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getColor(String),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getMenuDisabledForeground(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary1(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary2(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getPrimary3(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary1(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary2(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme.getSecondary3(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getDefaults(),5,1,5,5
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getDescription(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.getName(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.install(FreeColLookAndFeel),1,1,1,2
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.installFont(Font),4,1,4,4
net.sf.freecol.client.gui.plaf.FreeColMenuBarUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColMenuBarUI.paint(Graphics, JComponent)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColMenuItemUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColMenuUI.createAncestorListener(),3,1,2,2
net.sf.freecol.client.gui.plaf.FreeColMenuUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColMenuUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColMenuUI.paint(Graphics, JComponent)",1,1,2,2
"net.sf.freecol.client.gui.plaf.FreeColMenuUI.paintBackground(Graphics, JMenuItem, Color)",2,2,2,3
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.FreeColOptionPaneUI(),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.addButtonComponents(Container, Object[], int)",27,7,9,14
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.createButtonArea(),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.getButton(int),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.getColumns(int),18,1,1,9
"net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.paint(Graphics, JComponent)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.prepareButtons(),24,5,9,14
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI.selectInitialValue(JOptionPane),6,1,4,4
net.sf.freecol.client.gui.plaf.FreeColPanelUI.FreeColPanelUI(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColPanelUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColPanelUI.paint(Graphics, JComponent)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI.paint(Graphics, JComponent)",1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getIconHeight(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getIconWidth(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.getWidgetSize(),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon.paintIcon(Component, Graphics, int, int)",12,1,9,9
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.createRadioButtonIcon(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI.installUI(JComponent),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTableUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTableUI.installUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColTableUI.paint(Graphics, JComponent)",0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.FreeColTextAreaUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.paintBackground(Graphics),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI.paintSafely(Graphics),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.FreeColTextFieldUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.paintBackground(Graphics),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI.paintSafely(Graphics),1,1,2,2
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.FreeColToolTipUI(),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.createUI(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getMaximumSize(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getMinimumSize(JComponent),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.getPreferredSize(JComponent),7,4,4,6
"net.sf.freecol.client.gui.plaf.FreeColToolTipUI.paint(Graphics, JComponent)",9,3,5,6
net.sf.freecol.client.gui.plaf.FreeColToolTipUI.setFontScaling(float),0,1,1,1
net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI.createUI(JComponent),0,1,1,1
"net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI.paint(Graphics, JComponent)",1,2,1,2
"net.sf.freecol.client.gui.plaf.LAFUtilities.setProperties(Graphics, JComponent)",5,1,4,4
"net.sf.freecol.client.gui.tooltip.BuildingToolTip.BuildingToolTip(FreeColClient, Building)",55,1,27,29
net.sf.freecol.client.gui.tooltip.BuildingToolTip.removeNotify(),0,1,1,1
"net.sf.freecol.client.gui.tooltip.RebelToolTip.RebelToolTip(FreeColClient, Colony)",13,1,10,12
net.sf.freecol.client.gui.tooltip.RebelToolTip.removeNotify(),0,1,1,1
"net.sf.freecol.client.gui.video.VideoComponent.VideoComponent(Video, boolean, Dimension)",1,1,1,2
net.sf.freecol.client.gui.video.VideoComponent.addMouseListener(MouseListener),0,1,1,1
net.sf.freecol.client.gui.video.VideoComponent.createBorder(),0,1,1,1
net.sf.freecol.client.gui.video.VideoComponent.determineAppletSize(Dimension),2,1,1,3
net.sf.freecol.client.gui.video.VideoComponent.play(),0,1,1,1
net.sf.freecol.client.gui.video.VideoComponent.removeMouseListener(MouseListener),0,1,1,1
net.sf.freecol.client.gui.video.VideoComponent.removeNotify(),1,1,2,2
net.sf.freecol.client.gui.video.VideoComponent.stop(),0,1,1,1
net.sf.freecol.client.networking.UserServerAPI.UserServerAPI(),0,1,1,1
"net.sf.freecol.client.networking.UserServerAPI.connect(String, String, int)",1,2,1,2
net.sf.freecol.client.networking.UserServerAPI.disconnect(),1,1,2,2
net.sf.freecol.client.networking.UserServerAPI.getConnection(),0,1,1,1
net.sf.freecol.client.networking.UserServerAPI.getHost(),0,1,1,1
net.sf.freecol.client.networking.UserServerAPI.getName(),0,1,1,1
net.sf.freecol.client.networking.UserServerAPI.getPort(),0,1,1,1
"net.sf.freecol.client.networking.UserServerAPI.newConnection(String, String, int)",8,3,3,5
net.sf.freecol.client.networking.UserServerAPI.reconnect(),1,1,2,2
net.sf.freecol.client.networking.UserServerAPI.setMessageHandler(MessageHandler),0,1,1,1
net.sf.freecol.client.networking.UserServerAPI.updateConnection(Connection),0,1,1,1
"net.sf.freecol.client.networking.UserServerAPI.updateParameters(String, String, int)",0,1,1,1
net.sf.freecol.common.AllTests.suite(),0,1,1,1
net.sf.freecol.common.FreeColException.FreeColException(String),0,1,1,1
"net.sf.freecol.common.FreeColException.FreeColException(String, Throwable)",0,1,1,1
net.sf.freecol.common.FreeColException.FreeColException(Throwable),0,1,1,1
net.sf.freecol.common.FreeColException.debugAllowed(),0,1,1,1
net.sf.freecol.common.FreeColException.preserveDebug(),0,1,1,1
net.sf.freecol.common.FreeColSeed.generateFreeColSeed(),0,1,1,1
net.sf.freecol.common.FreeColSeed.getFreeColSeed(),0,1,1,1
net.sf.freecol.common.FreeColSeed.hasFreeColSeed(),0,1,1,1
net.sf.freecol.common.FreeColSeed.setFreeColSeed(String),1,1,1,2
"net.sf.freecol.common.debug.DebugUtils.addBuildings(FreeColClient, String)",15,2,7,8
"net.sf.freecol.common.debug.DebugUtils.addFathers(FreeColClient, String)",1,1,2,2
net.sf.freecol.common.debug.DebugUtils.addGold(FreeColClient),3,2,2,4
"net.sf.freecol.common.debug.DebugUtils.addGoodsAdditionEntry(FreeColClient, Unit, JPopupMenu)",0,1,1,1
net.sf.freecol.common.debug.DebugUtils.addImmigration(FreeColClient),3,2,2,4
net.sf.freecol.common.debug.DebugUtils.addLiberty(FreeColClient),4,2,3,5
"net.sf.freecol.common.debug.DebugUtils.addNewUnitToTile(FreeColClient, Tile)",8,2,6,8
"net.sf.freecol.common.debug.DebugUtils.addSkipChangeListener(FreeColClient, JMenu, JMenuItem)",3,2,1,3
"net.sf.freecol.common.debug.DebugUtils.addUnitGoods(FreeColClient, Unit)",4,3,2,5
"net.sf.freecol.common.debug.DebugUtils.applyDisaster(FreeColClient, Colony)",3,3,3,4
"net.sf.freecol.common.debug.DebugUtils.changeOwnership(FreeColClient, Colony)",3,2,3,4
"net.sf.freecol.common.debug.DebugUtils.changeOwnership(FreeColClient, Unit)",3,2,3,4
"net.sf.freecol.common.debug.DebugUtils.changeRole(FreeColClient, Unit)",1,2,1,2
net.sf.freecol.common.debug.DebugUtils.checkDesyncAction(FreeColClient),9,1,6,7
"net.sf.freecol.common.debug.DebugUtils.checkDesyncTile(Game, ServerPlayer, Tile, LogBuilder)",20,1,9,10
"net.sf.freecol.common.debug.DebugUtils.displayColonyPlan(FreeColClient, Colony)",2,1,2,2
net.sf.freecol.common.debug.DebugUtils.displayEurope(FreeColClient),12,3,6,7
"net.sf.freecol.common.debug.DebugUtils.displayMission(FreeColClient, Unit)",3,1,3,3
net.sf.freecol.common.debug.DebugUtils.displayUnits(FreeColClient),9,1,8,8
"net.sf.freecol.common.debug.DebugUtils.dumpTile(FreeColClient, Tile)",0,1,1,1
net.sf.freecol.common.debug.DebugUtils.getColonyValue(Tile),2,3,2,3
"net.sf.freecol.common.debug.DebugUtils.logEurope(AIMain, LogBuilder, String, List<Unit>)",9,2,4,5
net.sf.freecol.common.debug.DebugUtils.reconnect(FreeColClient),0,1,1,1
"net.sf.freecol.common.debug.DebugUtils.resetMoves(FreeColClient, List<Unit>)",4,2,3,4
"net.sf.freecol.common.debug.DebugUtils.revealMap(FreeColClient, boolean)",2,1,2,2
"net.sf.freecol.common.debug.DebugUtils.setColonyGoods(FreeColClient, Colony)",5,3,3,6
"net.sf.freecol.common.debug.DebugUtils.setCommsLogging(FreeColClient, boolean)",1,1,2,2
"net.sf.freecol.common.debug.DebugUtils.setMonarchAction(FreeColClient, String)",1,2,1,2
"net.sf.freecol.common.debug.DebugUtils.setRumourType(FreeColClient, Tile)",1,2,1,2
"net.sf.freecol.common.debug.DebugUtils.showForeignColony(FreeColClient, Colony)",3,3,2,4
net.sf.freecol.common.debug.DebugUtils.skipTurns(FreeColClient),6,3,5,7
net.sf.freecol.common.debug.DebugUtils.statistics(FreeColClient),0,1,1,1
net.sf.freecol.common.debug.DebugUtils.stepRNG(FreeColClient),1,1,2,2
"net.sf.freecol.common.debug.DebugUtils.summarizeSettlement(FreeColClient, IndianSettlement)",23,1,13,16
net.sf.freecol.common.debug.FreeColDebugger.addStackTrace(LogBuilder),0,1,1,1
"net.sf.freecol.common.debug.FreeColDebugger.addStackTrace(LogBuilder, Thread)",1,1,2,2
net.sf.freecol.common.debug.FreeColDebugger.configureDebugRun(String),3,1,4,4
net.sf.freecol.common.debug.FreeColDebugger.debugDisplayColonyValuePlayer(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.debugDisplayCoordinates(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.debugLog(String),6,1,3,5
net.sf.freecol.common.debug.FreeColDebugger.debugRendering(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.debugShowDefenceMapForPlayer(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.debugShowMission(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.debugShowMissionInfo(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.disableDebugMode(DebugMode),1,1,2,2
net.sf.freecol.common.debug.FreeColDebugger.enableDebugMode(DebugMode),0,1,1,1
"net.sf.freecol.common.debug.FreeColDebugger.finishDebugRun(FreeColClient, boolean)",9,2,3,7
net.sf.freecol.common.debug.FreeColDebugger.getDebugModes(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.getDebugRunSave(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.getDebugRunTurns(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.getNormalGameFogOfWar(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.handleCrash(),1,1,2,2
net.sf.freecol.common.debug.FreeColDebugger.isInDebugMode(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.isInDebugMode(DebugMode),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugDisplayColonyValuePlayer(Player),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugDisplayCoordinates(boolean),0,1,1,1
"net.sf.freecol.common.debug.FreeColDebugger.setDebugMode(DebugMode, boolean)",2,1,2,2
net.sf.freecol.common.debug.FreeColDebugger.setDebugModes(String),5,4,3,5
net.sf.freecol.common.debug.FreeColDebugger.setDebugRendering(boolean),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugRunSave(String),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugRunTurns(int),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowDefenceMapForPlayer(Player),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowMission(boolean),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setDebugShowMissionInfo(boolean),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.setNormalGameFogOfWar(boolean),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.signalEndDebugRun(),1,1,2,2
net.sf.freecol.common.debug.FreeColDebugger.stackTraceToString(),0,1,1,1
net.sf.freecol.common.debug.FreeColDebugger.stackTraceToString(Thread),0,1,1,1
"net.sf.freecol.common.debug.FreeColDebugger.trace(Logger, String)",2,1,2,2
net.sf.freecol.common.i18n.AllTests.suite(),0,1,1,1
net.sf.freecol.common.i18n.CLDRTest.testPlurals(),1,1,2,2
net.sf.freecol.common.i18n.CLDRTest.testRuleParsing(),0,1,1,1
"net.sf.freecol.common.i18n.DefaultNumberRule.addRule(Category, Rule)",0,1,1,1
"net.sf.freecol.common.i18n.DefaultNumberRule.addRule(Category, String)",0,1,1,1
net.sf.freecol.common.i18n.DefaultNumberRule.countRules(),0,1,1,1
net.sf.freecol.common.i18n.DefaultNumberRule.getCategory(double),1,1,2,2
net.sf.freecol.common.i18n.DefaultNumberRule.getRule(Category),0,1,1,1
net.sf.freecol.common.i18n.DualNumberRule.getCategory(double),3,3,1,3
"net.sf.freecol.common.i18n.Merge.Merge(List<String>, List<String>)",0,1,1,1
"net.sf.freecol.common.i18n.MergeTableCellRenderer.getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)",1,1,1,2
net.sf.freecol.common.i18n.MergeTableCellRenderer.propertyOn(String),2,2,2,3
"net.sf.freecol.common.i18n.MergeTableModel.deleteFromRight(int, int)",1,1,2,2
net.sf.freecol.common.i18n.MergeTableModel.getColumnCount(),0,1,1,1
net.sf.freecol.common.i18n.MergeTableModel.getColumnName(int),0,1,1,1
net.sf.freecol.common.i18n.MergeTableModel.getRowCount(),0,1,1,1
"net.sf.freecol.common.i18n.MergeTableModel.getValueAt(int, int)",3,3,3,3
"net.sf.freecol.common.i18n.MergeTableModel.insertInRight(int, int)",1,1,2,2
net.sf.freecol.common.i18n.MergeTableModel.leftLineAtRow(int),1,1,2,2
net.sf.freecol.common.i18n.MergeTableModel.mergeChanged(),0,1,1,1
net.sf.freecol.common.i18n.MergeTableModel.rightLineAtRow(int),1,1,2,2
net.sf.freecol.common.i18n.MessageMerge.loadLinesFromFile(String),11,3,6,7
net.sf.freecol.common.i18n.MessageMerge.main(String[]),1,1,2,2
"net.sf.freecol.common.i18n.MessageMerge.saveLinesToFile(List<String>, String)",4,1,3,4
net.sf.freecol.common.i18n.Messages.containsKey(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.descriptionKey(ObjectWithId),0,1,1,1
net.sf.freecol.common.i18n.Messages.descriptionKey(String),0,1,1,1
"net.sf.freecol.common.i18n.Messages.findMatchingBracket(String, int)",16,4,2,7
net.sf.freecol.common.i18n.Messages.getBestDescription(ObjectWithId),0,1,1,1
net.sf.freecol.common.i18n.Messages.getBestDescription(String),1,1,2,2
net.sf.freecol.common.i18n.Messages.getBestNameAndDescription(Named),0,1,1,1
net.sf.freecol.common.i18n.Messages.getBestNameAndDescription(String),11,1,6,8
"net.sf.freecol.common.i18n.Messages.getChoice(String, String)",7,4,4,4
net.sf.freecol.common.i18n.Messages.getDescription(ObjectWithId),0,1,1,1
net.sf.freecol.common.i18n.Messages.getDescription(String),0,1,1,1
"net.sf.freecol.common.i18n.Messages.getKey(String, String)",2,2,1,2
net.sf.freecol.common.i18n.Messages.getLocale(String),13,1,6,8
net.sf.freecol.common.i18n.Messages.getName(Named),0,1,1,1
net.sf.freecol.common.i18n.Messages.getName(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.getRulerName(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.getSelector(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.getShortDescription(ObjectWithId),0,1,1,1
net.sf.freecol.common.i18n.Messages.getShortDescription(String),0,1,1,1
"net.sf.freecol.common.i18n.Messages.getUnitLabel(String, String, int, String, String, StringTemplate)",68,1,17,18
"net.sf.freecol.common.i18n.Messages.loadActiveModMessageBundle(List<FreeColModFile>, Locale)",7,1,5,5
net.sf.freecol.common.i18n.Messages.loadMessageBundle(Locale),25,5,10,13
net.sf.freecol.common.i18n.Messages.loadMessages(InputStream),8,3,4,5
net.sf.freecol.common.i18n.Messages.loadModMessageBundle(Locale),7,1,5,5
net.sf.freecol.common.i18n.Messages.matchesName(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.matchesNamed(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.message(String),2,3,1,3
net.sf.freecol.common.i18n.Messages.message(StringTemplate),24,2,9,13
net.sf.freecol.common.i18n.Messages.nameKey(ObjectWithId),0,1,1,1
net.sf.freecol.common.i18n.Messages.nameKey(String),0,1,1,1
"net.sf.freecol.common.i18n.Messages.replaceChoices(String, StringTemplate)",84,17,25,31
net.sf.freecol.common.i18n.Messages.rulerKey(String),0,1,1,1
net.sf.freecol.common.i18n.Messages.setGrammaticalNumber(Number),0,1,1,1
net.sf.freecol.common.i18n.Messages.shortDescriptionKey(String),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.tearDown(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testAbstractUnitDescription(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testChangeLocaleSettings(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testMessageString(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testMessageWithSpecialChars(),4,1,4,4
net.sf.freecol.common.i18n.MessagesTest.testNestedChoices(),1,1,2,2
net.sf.freecol.common.i18n.MessagesTest.testREFMessages(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testReplaceArbitraryTag(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testReplaceChoicesGrammar(),1,1,2,2
net.sf.freecol.common.i18n.MessagesTest.testReplaceChoicesPlural(),1,1,2,2
net.sf.freecol.common.i18n.MessagesTest.testReplaceGarbage(),1,1,2,2
net.sf.freecol.common.i18n.MessagesTest.testReplaceNumber(),6,1,5,5
net.sf.freecol.common.i18n.MessagesTest.testStringTemplates(),0,1,1,1
net.sf.freecol.common.i18n.MessagesTest.testUnitDescription(),0,1,1,1
net.sf.freecol.common.i18n.NameCache.addCityOfCibola(String),1,1,1,2
net.sf.freecol.common.i18n.NameCache.clearCitiesOfCibola(),1,1,2,2
"net.sf.freecol.common.i18n.NameCache.collectKeys(String, List<String>, String)",1,1,2,2
"net.sf.freecol.common.i18n.NameCache.collectNames(String, List<String>)",2,1,3,3
"net.sf.freecol.common.i18n.NameCache.getCapitalName(Player, Random)",0,1,1,1
net.sf.freecol.common.i18n.NameCache.getCitiesOfCibola(),1,1,2,2
net.sf.freecol.common.i18n.NameCache.getFallbackSettlementName(Player),1,1,1,2
net.sf.freecol.common.i18n.NameCache.getMercenaryLeaderIndex(Random),0,1,1,1
net.sf.freecol.common.i18n.NameCache.getMercenaryLeaderName(int),0,1,1,1
net.sf.freecol.common.i18n.NameCache.getNewLandName(Player),1,1,2,2
net.sf.freecol.common.i18n.NameCache.getNextCityOfCibola(),2,1,3,3
"net.sf.freecol.common.i18n.NameCache.getRegionName(Player, Region)",11,7,6,8
net.sf.freecol.common.i18n.NameCache.getRumourNothingKey(Random),0,1,1,1
net.sf.freecol.common.i18n.NameCache.getSeasonName(int),2,2,2,3
"net.sf.freecol.common.i18n.NameCache.getSettlementName(Player, Random)",4,3,2,4
net.sf.freecol.common.i18n.NameCache.getTradeRouteName(Player),2,2,1,3
"net.sf.freecol.common.i18n.NameCache.getUnitName(Player, UnitType, Random)",6,4,3,6
"net.sf.freecol.common.i18n.NameCache.makeRegionKey(Player, RegionType)",0,1,1,1
"net.sf.freecol.common.i18n.NameCache.putSettlementName(Player, String)",1,1,2,2
net.sf.freecol.common.i18n.NameCache.requireCitiesOfCibola(Random),3,1,3,3
net.sf.freecol.common.i18n.NameCache.requireMercenaryLeaders(),1,1,2,2
"net.sf.freecol.common.i18n.NameCache.requireRegionNames(Player, RegionType)",2,1,3,3
net.sf.freecol.common.i18n.NameCache.requireRiverNames(),1,1,2,2
net.sf.freecol.common.i18n.NameCache.requireRumourNothingKeys(),1,1,2,2
net.sf.freecol.common.i18n.NameCache.requireSeasonNames(),6,1,4,4
"net.sf.freecol.common.i18n.NameCache.requireSettlementNames(Player, Random)",15,1,7,7
"net.sf.freecol.common.i18n.NameCache.requireShipNames(Player, Random)",3,1,3,3
"net.sf.freecol.common.i18n.Number.getKey(String, String)",1,1,2,2
net.sf.freecol.common.i18n.Number.getKey(double),0,1,1,1
net.sf.freecol.common.i18n.NumberRules.NumberRules(InputStream),0,1,1,1
net.sf.freecol.common.i18n.NumberRules.getNumberForLanguage(String),1,1,1,2
net.sf.freecol.common.i18n.NumberRules.isInitialized(),0,1,1,1
net.sf.freecol.common.i18n.NumberRules.load(InputStream),0,1,1,1
net.sf.freecol.common.i18n.NumberRules.readChild(FreeColXMLReader),22,1,10,16
net.sf.freecol.common.i18n.NumberRules.readFromXML(FreeColXMLReader),15,1,5,7
net.sf.freecol.common.i18n.OtherNumberRule.getCategory(double),0,1,1,1
net.sf.freecol.common.i18n.PluralNumberRule.getCategory(double),2,2,1,2
net.sf.freecol.common.i18n.Relation.Relation(List<String>),0,1,1,1
"net.sf.freecol.common.i18n.Relation.Relation(int, int)",0,1,1,1
net.sf.freecol.common.i18n.Relation.equals(Object),3,3,1,7
net.sf.freecol.common.i18n.Relation.hashCode(),2,1,1,3
net.sf.freecol.common.i18n.Relation.matches(double),4,2,2,5
net.sf.freecol.common.i18n.Relation.parse(List<String>),10,2,6,7
net.sf.freecol.common.i18n.Relation.setInteger(boolean),0,1,1,1
net.sf.freecol.common.i18n.Relation.setMod(int),0,1,1,1
net.sf.freecol.common.i18n.Relation.setNegated(boolean),0,1,1,1
net.sf.freecol.common.i18n.Relation.toString(),9,1,6,6
net.sf.freecol.common.i18n.Rule.Rule(String),0,1,1,1
net.sf.freecol.common.i18n.Rule.add(List<Relation>),0,1,1,1
net.sf.freecol.common.i18n.Rule.matches(double),0,1,1,1
net.sf.freecol.common.i18n.Rule.parse(String),4,1,3,3
net.sf.freecol.common.i18n.Rule.parseCondition(List<String>),4,1,3,3
net.sf.freecol.common.i18n.Rule.toString(),3,1,3,3
net.sf.freecol.common.i18n.ZeroOneNumberRule.getCategory(double),3,2,1,3
net.sf.freecol.common.io.AllTests.suite(),0,1,1,1
net.sf.freecol.common.io.FreeColDataFile.FreeColDataFile(File),2,2,3,3
"net.sf.freecol.common.io.FreeColDataFile.extendWithAdditionalSizesAndVariations(ResourceFactory, ImageResource, String)",2,1,2,2
"net.sf.freecol.common.io.FreeColDataFile.findFilesWithVariationOrAlternativeSize(Path, boolean)",4,1,4,5
"net.sf.freecol.common.io.FreeColDataFile.findFilesWithVariationOrAlternativeSizeAsUri(Path, boolean)",0,1,1,1
net.sf.freecol.common.io.FreeColDataFile.findJarDirectory(File),2,1,3,3
net.sf.freecol.common.io.FreeColDataFile.findVariationsWithAlternateSizes(String),8,2,6,7
net.sf.freecol.common.io.FreeColDataFile.getFileFilter(String),1,2,1,2
net.sf.freecol.common.io.FreeColDataFile.getInputStream(String),0,1,1,1
net.sf.freecol.common.io.FreeColDataFile.getPath(),0,1,1,1
net.sf.freecol.common.io.FreeColDataFile.getResourceMapping(),2,2,2,3
net.sf.freecol.common.io.FreeColDataFile.getURI(String),6,3,5,5
"net.sf.freecol.common.io.FreeColDataFile.handleNormalResource(ResourceFactory, ResourceMapping, String, String)",4,2,3,5
"net.sf.freecol.common.io.FreeColDataFile.handleResources(Properties, ResourceMapping)",4,1,3,3
"net.sf.freecol.common.io.FreeColDataFile.handleVirtualResources(List<String>, LogBuilder, Properties, ResourceMapping)",9,1,6,6
net.sf.freecol.common.io.FreeColDataFile.readResourcesProperties(LogBuilder),5,2,4,4
"net.sf.freecol.common.io.FreeColDataFile.stripEnding(String, String)",1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.bad(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.badCache(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.badConfig(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.badData(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.badDir(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.badHome(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.checkDir(File),11,1,5,6
"net.sf.freecol.common.io.FreeColDirectories.collectFiles(File, Predicate<File>)",0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.deriveAutosaveDirectory(),2,2,2,3
"net.sf.freecol.common.io.FreeColDirectories.deriveDirectory(File, String)",2,1,2,3
net.sf.freecol.common.io.FreeColDirectories.getAutosaveDirectory(),1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.getAutosaveFile(String),1,1,2,2
"net.sf.freecol.common.io.FreeColDirectories.getAutosaveFiles(String, Predicate<File>)",2,1,3,3
net.sf.freecol.common.io.FreeColDirectories.getBaseClientOptionsFile(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getBaseDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getClientOptionsFile(),1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.getCompatibilityFile(String),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getDataDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getDebugRunSaveFile(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getHighScoreFile(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getI18nDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getI18nMessageFileList(Locale),3,1,3,3
net.sf.freecol.common.io.FreeColDirectories.getI18nPluralsFile(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getLanguageId(File),9,3,6,8
net.sf.freecol.common.io.FreeColDirectories.getLanguageIdList(),1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.getLastSaveGameFile(),0,1,1,1
"net.sf.freecol.common.io.FreeColDirectories.getLocaleFileNames(String, String, Locale)",6,1,4,7
net.sf.freecol.common.io.FreeColDirectories.getLogCommsWriter(),5,3,4,4
net.sf.freecol.common.io.FreeColDirectories.getLogFileContents(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getLogFilePath(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getLogWriter(),8,6,4,8
net.sf.freecol.common.io.FreeColDirectories.getMacOSXDirs(File[]),6,7,7,7
net.sf.freecol.common.io.FreeColDirectories.getMapFileList(),4,1,4,4
net.sf.freecol.common.io.FreeColDirectories.getMapsDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getMessageFileNameList(Locale),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getModFileList(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getModMessageFileNames(Locale),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getOptionsDirectory(),1,1,1,2
net.sf.freecol.common.io.FreeColDirectories.getOptionsFile(String),1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.getResourceFileNames(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getRulesClassicDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getRulesDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getRulesFileList(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getSaveDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getSavegameFile(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getSavegameFileList(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getSavegameFiles(File),1,1,2,2
net.sf.freecol.common.io.FreeColDirectories.getStandardModsDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getStartMapFile(),1,1,1,2
net.sf.freecol.common.io.FreeColDirectories.getUserCacheDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getUserConfigDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getUserDataDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getUserDefaultDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getUserMapsDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getUserModsDirectory(),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.getWindowsDirs(File[]),2,3,3,3
net.sf.freecol.common.io.FreeColDirectories.getXDGDirs(File[]),10,8,8,11
net.sf.freecol.common.io.FreeColDirectories.insistDirectory(File),6,1,4,4
net.sf.freecol.common.io.FreeColDirectories.isGoodDirectory(File),1,1,4,4
net.sf.freecol.common.io.FreeColDirectories.removeAutosaves(String),2,2,2,3
"net.sf.freecol.common.io.FreeColDirectories.removeOutdatedAutosaves(String, List<String>, long)",3,3,2,4
net.sf.freecol.common.io.FreeColDirectories.requireDirectory(File),10,4,5,6
net.sf.freecol.common.io.FreeColDirectories.sanitize(String),3,3,2,3
net.sf.freecol.common.io.FreeColDirectories.setAutosaveDirectory(File),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.setClientOptionsFile(String),2,2,3,4
net.sf.freecol.common.io.FreeColDirectories.setDataDirectory(String),4,4,1,5
net.sf.freecol.common.io.FreeColDirectories.setLogFilePath(String),0,1,1,1
net.sf.freecol.common.io.FreeColDirectories.setSavegameFile(String),6,3,6,8
net.sf.freecol.common.io.FreeColDirectories.setUserCacheDirectory(String),1,1,1,2
net.sf.freecol.common.io.FreeColDirectories.setUserConfigDirectory(String),1,1,1,2
net.sf.freecol.common.io.FreeColDirectories.setUserDataDirectory(String),1,1,1,2
net.sf.freecol.common.io.FreeColDirectories.setUserDirectories(),18,4,10,15
net.sf.freecol.common.io.FreeColModFile.FreeColModFile(File),0,1,1,1
net.sf.freecol.common.io.FreeColModFile.getFreeColModFile(String),0,1,1,1
net.sf.freecol.common.io.FreeColModFile.getId(),0,1,1,1
net.sf.freecol.common.io.FreeColModFile.getModDescriptorInputStream(),0,1,1,1
net.sf.freecol.common.io.FreeColModFile.getModsList(),3,1,3,3
net.sf.freecol.common.io.FreeColModFile.getParent(),0,1,1,1
net.sf.freecol.common.io.FreeColModFile.getSpecification(),1,1,1,2
net.sf.freecol.common.io.FreeColModFile.getSpecificationInputStream(),1,1,1,2
net.sf.freecol.common.io.FreeColModFile.hasSpecification(),1,1,1,2
net.sf.freecol.common.io.FreeColModFile.loadMods(),3,1,3,3
net.sf.freecol.common.io.FreeColModFile.readModDescriptor(),1,1,1,2
net.sf.freecol.common.io.FreeColRules.getFreeColRulesFile(String),0,1,1,1
net.sf.freecol.common.io.FreeColRules.getRulesList(),3,1,3,3
net.sf.freecol.common.io.FreeColRules.loadRules(),3,1,3,3
net.sf.freecol.common.io.FreeColSavegameFile.FreeColSavegameFile(File),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.getClientOptionsFreeColXMLReader(),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.getProperties(),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.getSavedGameFreeColXMLReader(),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.getSavegameInputStream(),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.getSavegameVersion(),4,1,3,4
net.sf.freecol.common.io.FreeColSavegameFile.getThumbnailInputStream(),0,1,1,1
net.sf.freecol.common.io.FreeColSavegameFile.peekAttributes(List<String>),0,1,1,1
net.sf.freecol.common.io.FreeColTcFile.FreeColTcFile(File),0,1,1,1
net.sf.freecol.common.io.FreeColTcFile.getFreeColTcFile(String),1,1,1,2
net.sf.freecol.common.io.FreeColTcFile.getResourceMapping(),1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(BufferedInputStream),1,1,1,2
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(File),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(InputStream),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.FreeColXMLReader(Reader),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.atTag(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.close(),4,1,4,4
net.sf.freecol.common.io.FreeColXMLReader.closeTag(String),1,2,2,2
"net.sf.freecol.common.io.FreeColXMLReader.closeTag(String, String...)",3,3,3,3
"net.sf.freecol.common.io.FreeColXMLReader.copy(Game, Class<T>)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.currentTag(),1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.expectTag(String),1,2,1,2
"net.sf.freecol.common.io.FreeColXMLReader.findAIObject(AIMain, String, Class<T>, T, boolean)",4,3,3,3
"net.sf.freecol.common.io.FreeColXMLReader.findFreeColGameObject(Game, String, Class<T>, T, boolean)",4,3,3,3
net.sf.freecol.common.io.FreeColXMLReader.getAllAttributes(),1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.getArrayAttributeMap(),6,4,3,4
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(AIMain, String, Class<T>, T)",2,1,3,3
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(Game, String, Class<T>, T)",2,2,2,3
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, Class<T>, T)",3,1,3,3
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, String)",1,1,1,2
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, boolean)",1,1,2,2
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, float)",3,1,3,3
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, int)",3,1,3,3
"net.sf.freecol.common.io.FreeColXMLReader.getAttribute(String, long)",3,1,3,3
net.sf.freecol.common.io.FreeColXMLReader.getAttributeMap(String...),1,1,2,2
"net.sf.freecol.common.io.FreeColXMLReader.getLocationAttribute(Game, String, boolean)",8,4,4,8
net.sf.freecol.common.io.FreeColXMLReader.getReadScope(),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLReader.getType(Specification, String, Class<T>, T)",2,1,3,3
net.sf.freecol.common.io.FreeColXMLReader.hasAttribute(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLReader.internedRead(Game, Class<T>)",1,1,2,2
"net.sf.freecol.common.io.FreeColXMLReader.lookup(Game, String)",4,1,4,4
"net.sf.freecol.common.io.FreeColXMLReader.lookup(Game, String, Class<T>)",1,1,1,2
"net.sf.freecol.common.io.FreeColXMLReader.makeAIObject(AIMain, String, Class<T>, T, boolean)",19,6,8,9
"net.sf.freecol.common.io.FreeColXMLReader.makeFreeColObject(Game, String, Class<T>, boolean)",15,6,8,9
net.sf.freecol.common.io.FreeColXMLReader.moreTags(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.newXMLInputFactory(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.nextTag(),6,1,2,5
"net.sf.freecol.common.io.FreeColXMLReader.readAttributeValues(Map<String, String>, String)",6,2,5,6
net.sf.freecol.common.io.FreeColXMLReader.readFreeColObject(Game),1,2,1,2
"net.sf.freecol.common.io.FreeColXMLReader.readFreeColObject(Game, Class<T>)",1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.readId(),5,2,4,5
"net.sf.freecol.common.io.FreeColXMLReader.readList(Specification, String, Class<T>)",4,2,4,4
net.sf.freecol.common.io.FreeColXMLReader.replaceScope(ReadScope),1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.setReadScope(ReadScope),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.setTracing(boolean),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.shouldClearContainers(),1,1,2,2
net.sf.freecol.common.io.FreeColXMLReader.shouldIntern(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLReader.swallowTag(String),2,1,2,3
net.sf.freecol.common.io.FreeColXMLReader.unexpectedTag(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLReader.uninternedRead(Game, Class<T>)",7,4,4,5
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(OutputStream, WriteScope, boolean)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer, WriteScope)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.FreeColXMLWriter(Writer, WriteScope, boolean)",3,1,3,4
"net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.WriteScope(WriteScopeType, Player)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.getClient(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.isValid(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toClient(Player),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toSave(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toServer(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.toString(),3,1,3,3
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.validFor(Player),1,1,1,2
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope.validForSave(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.close(),4,1,3,4
net.sf.freecol.common.io.FreeColXMLWriter.flush(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.flushBuffer(),12,1,6,6
net.sf.freecol.common.io.FreeColXMLWriter.getClientPlayer(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.getFactory(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.getNamespaceContext(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.getPrefix(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.getProperty(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.getWriteScope(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.replaceScope(WriteScope),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.setDefaultNamespace(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.setNamespaceContext(NamespaceContext),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.setPrefix(String, String)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.setWriteScope(WriteScope),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.validFor(Player),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.validForSave(),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, Enum<?>)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, FreeColObject)",3,1,3,3
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, Object)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, String, String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, boolean)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, float)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, int)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeAttribute(String, long)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeCData(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeCharacters(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeCharacters(char[], int, int)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeComment(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeDTD(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeDefaultNamespace(String),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeEmptyElement(String, String, String)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeEndDocument(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeEndElement(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeEntityRef(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeLocationAttribute(String, Location)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeNamespace(String, String)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeProcessingInstruction(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeProcessingInstruction(String, String)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(),0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartDocument(String, String)",0,1,1,1
net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String),0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeStartElement(String, String, String)",0,1,1,1
"net.sf.freecol.common.io.FreeColXMLWriter.writeToListElement(String, Collection<T>)",2,2,2,3
net.sf.freecol.common.io.ModTest.testAllMods(),1,1,2,2
net.sf.freecol.common.io.ModTest.testGetRuleSets(),1,1,2,2
"net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.ImageAnimationEventImpl(BufferedImage, int)",0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.createScaledVersion(float),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getDurationInMs(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getHeight(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getImage(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl.getWidth(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(InputStream),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(List<AnimationEvent>),0,1,1,1
"net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(List<AnimationEvent>, int, int)",0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(URL),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.SimpleZippedAnimation(ZipInputStream),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.createScaledVersion(float),2,1,2,2
net.sf.freecol.common.io.sza.SimpleZippedAnimation.getHeight(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.getWidth(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.iterator(),0,1,1,1
net.sf.freecol.common.io.sza.SimpleZippedAnimation.loadEvents(ZipInputStream),14,5,5,9
"net.sf.freecol.common.logging.DefaultHandler.DefaultHandler(boolean, Writer)",1,1,2,2
net.sf.freecol.common.logging.DefaultHandler.close(),3,1,3,3
net.sf.freecol.common.logging.DefaultHandler.flush(),3,1,3,3
net.sf.freecol.common.logging.DefaultHandler.publish(LogRecord),10,2,9,10
net.sf.freecol.common.logging.TextFormatter.TextFormatter(),0,1,1,1
net.sf.freecol.common.logging.TextFormatter.format(LogRecord),1,1,2,2
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.MetaInputHandler(Consumer<List<ServerInfo>>),0,1,1,1
"net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.handle(Connection, Message)",2,2,1,4
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler.read(Connection),0,1,1,1
net.sf.freecol.common.metaserver.MetaServerUtils.findTimer(ServerInfo),1,1,2,2
net.sf.freecol.common.metaserver.MetaServerUtils.getMetaServerConnection(List<ServerInfo>),5,1,4,4
net.sf.freecol.common.metaserver.MetaServerUtils.getServerList(),7,4,6,7
"net.sf.freecol.common.metaserver.MetaServerUtils.metaMessage(MetaMessageType, ServerInfo)",8,2,6,8
net.sf.freecol.common.metaserver.MetaServerUtils.registerServer(ServerInfo),0,1,1,1
net.sf.freecol.common.metaserver.MetaServerUtils.removeServer(ServerInfo),0,1,1,1
net.sf.freecol.common.metaserver.MetaServerUtils.startTimer(ServerInfo),3,1,2,2
net.sf.freecol.common.metaserver.MetaServerUtils.stopTimer(ServerInfo),1,2,1,2
net.sf.freecol.common.metaserver.MetaServerUtils.updateServer(ServerInfo),0,1,1,1
net.sf.freecol.common.metaserver.MetaServerUtils.updateTimer(ServerInfo),1,2,1,2
"net.sf.freecol.common.metaserver.ServerInfo.ServerInfo(String, String, int, int, int, boolean, String, ...)",0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.equals(Object),3,3,9,10
net.sf.freecol.common.metaserver.ServerInfo.getAddress(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getCurrentlyPlaying(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getGameState(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getIsGameStarted(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getLastUpdated(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getName(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getPort(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getSlotsAvailable(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.getVersion(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.hashCode(),1,1,1,2
net.sf.freecol.common.metaserver.ServerInfo.toString(),0,1,1,1
net.sf.freecol.common.metaserver.ServerInfo.update(ServerInfo),0,1,1,1
"net.sf.freecol.common.metaserver.ServerInfo.update(String, String, int, int, int, boolean, String, ...)",0,1,1,1
net.sf.freecol.common.model.Ability.Ability(Ability),0,1,1,1
"net.sf.freecol.common.model.Ability.Ability(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.Ability.Ability(Specification),0,1,1,1
net.sf.freecol.common.model.Ability.Ability(String),0,1,1,1
"net.sf.freecol.common.model.Ability.Ability(String, FreeColSpecObjectType, boolean)",1,1,2,2
"net.sf.freecol.common.model.Ability.Ability(String, boolean)",0,1,1,1
net.sf.freecol.common.model.Ability.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Ability.equals(Object),3,3,3,4
net.sf.freecol.common.model.Ability.getValue(),0,1,1,1
net.sf.freecol.common.model.Ability.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Ability.hashCode(),1,1,1,2
net.sf.freecol.common.model.Ability.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Ability.setValue(boolean),0,1,1,1
net.sf.freecol.common.model.Ability.toString(),1,1,2,2
net.sf.freecol.common.model.Ability.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.AbstractGoods(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.AbstractGoods(AbstractGoods),0,1,1,1
"net.sf.freecol.common.model.AbstractGoods.AbstractGoods(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.AbstractGoods.copyIn(T),2,2,2,3
net.sf.freecol.common.model.AbstractGoods.equals(Object),3,3,4,5
net.sf.freecol.common.model.AbstractGoods.evaluateFor(Player),1,1,2,2
"net.sf.freecol.common.model.AbstractGoods.getAbstractLabel(String, int)",0,1,1,1
net.sf.freecol.common.model.AbstractGoods.getAmount(),0,1,1,1
"net.sf.freecol.common.model.AbstractGoods.getCount(GoodsType, Collection<? extends AbstractGoods>)",1,1,2,2
net.sf.freecol.common.model.AbstractGoods.getLabel(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.getLabel(boolean),1,1,2,2
net.sf.freecol.common.model.AbstractGoods.getNameKey(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.getType(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.hashCode(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.isFoodType(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.isPositive(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.isStorable(),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.matches(GoodsType),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.setAmount(int),0,1,1,1
net.sf.freecol.common.model.AbstractGoods.setType(GoodsType),0,1,1,1
"net.sf.freecol.common.model.AbstractGoods.toFullString(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.AbstractGoods.toString(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.AbstractUnit(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.AbstractUnit(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.AbstractUnit(String, String, int)",0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.AbstractUnit(UnitType, String, int)",0,1,1,1
net.sf.freecol.common.model.AbstractUnit.addToNumber(int),0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.calculateStrength(Specification, List<AbstractUnit>)",0,1,1,1
net.sf.freecol.common.model.AbstractUnit.copyIn(T),2,2,2,3
net.sf.freecol.common.model.AbstractUnit.deepCopy(List<AbstractUnit>),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getDescription(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getLabel(),0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.getLabelInternal(String, String, int)",0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.getListLabel(String, List<AbstractUnit>)",1,1,2,2
net.sf.freecol.common.model.AbstractUnit.getNumber(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getOffence(Specification),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getRole(Specification),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getRoleId(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getSingleLabel(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getType(Specification),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.matchAll(AbstractUnit),1,1,3,3
"net.sf.freecol.common.model.AbstractUnit.matchUnits(List<AbstractUnit>, List<AbstractUnit>)",4,4,2,4
net.sf.freecol.common.model.AbstractUnit.matcher(AbstractUnit),1,1,2,2
net.sf.freecol.common.model.AbstractUnit.matcher(Unit),0,1,1,1
"net.sf.freecol.common.model.AbstractUnit.matcher(UnitType, String)",1,1,2,2
net.sf.freecol.common.model.AbstractUnit.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.setNumber(int),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.setRoleId(String),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.toString(),0,1,1,1
net.sf.freecol.common.model.AbstractUnit.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.AllTests.suite(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.setUp(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.tearDown(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.testGetCostLandLand(),1,1,2,2
net.sf.freecol.common.model.BaseCostDeciderTest.testGetRemainingMovesAndNewTurn(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveOfLandUnitToAnOceanTile(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveOfNavalUnitToALandTile(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.testInvalidMoveThroughTileWithSettlement(),0,1,1,1
net.sf.freecol.common.model.BaseCostDeciderTest.testNavalUnitMoveToTileWithSettlement(),3,1,3,3
"net.sf.freecol.common.model.BaseProduction.getBaseProduction(ProductionType, GoodsType, UnitType)",4,3,3,5
"net.sf.freecol.common.model.BuildQueue.BuildQueue(Colony, CompletionAction, int)",0,1,1,1
net.sf.freecol.common.model.BuildQueue.add(T),0,1,1,1
net.sf.freecol.common.model.BuildQueue.clear(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.getCompletionAction(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.getConsumedGoods(),1,1,2,2
net.sf.freecol.common.model.BuildQueue.getConsumptionModifiers(String),0,1,1,1
net.sf.freecol.common.model.BuildQueue.getCurrentlyBuilding(),1,1,2,2
net.sf.freecol.common.model.BuildQueue.getPriority(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.getProductionInfo(List<AbstractGoods>),13,4,7,7
net.sf.freecol.common.model.BuildQueue.getValues(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.isEmpty(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.remove(int),0,1,1,1
net.sf.freecol.common.model.BuildQueue.setCompletionAction(CompletionAction),0,1,1,1
net.sf.freecol.common.model.BuildQueue.setCurrentlyBuilding(T),5,1,4,4
net.sf.freecol.common.model.BuildQueue.setValues(List<T>),0,1,1,1
net.sf.freecol.common.model.BuildQueue.size(),0,1,1,1
net.sf.freecol.common.model.BuildQueue.toString(),1,1,2,2
"net.sf.freecol.common.model.BuildableType.BuildableType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.BuildableType.addLimit(Limit),1,1,1,2
"net.sf.freecol.common.model.BuildableType.addRequiredAbility(String, boolean)",1,1,1,2
net.sf.freecol.common.model.BuildableType.addRequiredGoods(AbstractGoods),1,1,1,2
net.sf.freecol.common.model.BuildableType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.BuildableType.getCurrentlyBuildingLabel(),0,1,1,1
net.sf.freecol.common.model.BuildableType.getLimits(),1,1,2,2
"net.sf.freecol.common.model.BuildableType.getMaximumIndex(Colony, JList<BuildableType>, int)",0,1,1,1
"net.sf.freecol.common.model.BuildableType.getMinimumIndex(Colony, JList<BuildableType>, int)",0,1,1,1
net.sf.freecol.common.model.BuildableType.getRequiredAbilities(),1,1,2,2
net.sf.freecol.common.model.BuildableType.getRequiredAmountOf(GoodsType),0,1,1,1
net.sf.freecol.common.model.BuildableType.getRequiredGoods(),1,1,2,2
net.sf.freecol.common.model.BuildableType.getRequiredGoodsList(),1,1,2,2
net.sf.freecol.common.model.BuildableType.getRequiredPopulation(),0,1,1,1
net.sf.freecol.common.model.BuildableType.isAvailableTo(FreeColObject...),19,7,8,9
net.sf.freecol.common.model.BuildableType.needsGoodsToBuild(),1,1,2,2
net.sf.freecol.common.model.BuildableType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.BuildableType.readChild(FreeColXMLReader),6,1,5,5
net.sf.freecol.common.model.BuildableType.readChildren(FreeColXMLReader),1,1,1,2
net.sf.freecol.common.model.BuildableType.removeRequiredAbility(String),1,1,2,2
net.sf.freecol.common.model.BuildableType.requiresAbility(String),3,1,3,3
net.sf.freecol.common.model.BuildableType.setLimits(List<Limit>),0,1,1,1
"net.sf.freecol.common.model.BuildableType.setRequiredAbilities(Map<String, Boolean>)",0,1,1,1
net.sf.freecol.common.model.BuildableType.setRequiredGoods(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.BuildableType.setRequiredPopulation(int),0,1,1,1
net.sf.freecol.common.model.BuildableType.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.BuildableType.writeChildren(FreeColXMLWriter),5,1,5,5
"net.sf.freecol.common.model.Building.Building(Game, Colony, BuildingType)",0,1,1,1
"net.sf.freecol.common.model.Building.Building(Game, String)",0,1,1,1
net.sf.freecol.common.model.Building.canAddType(UnitType),1,1,2,2
net.sf.freecol.common.model.Building.canAutoProduce(),0,1,1,1
net.sf.freecol.common.model.Building.canBeDamaged(),1,1,2,2
net.sf.freecol.common.model.Building.canBuildNext(),0,1,1,1
"net.sf.freecol.common.model.Building.canProduce(GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.Building.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Building.downgrade(),1,2,1,2
net.sf.freecol.common.model.Building.evaluateFor(Player),0,1,1,1
"net.sf.freecol.common.model.Building.getAbilities(String, FreeColSpecObjectType, Turn)",0,1,1,1
"net.sf.freecol.common.model.Building.getAdjustedProductionInfo(List<AbstractGoods>, List<AbstractGoods>)",0,1,1,1
net.sf.freecol.common.model.Building.getAvailableProductionTypes(boolean),1,1,2,2
"net.sf.freecol.common.model.Building.getBaseProduction(ProductionType, GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.Building.getCompetenceFactor(),0,1,1,1
net.sf.freecol.common.model.Building.getConsumedGoods(),0,1,1,1
net.sf.freecol.common.model.Building.getConsumptionModifiers(String),0,1,1,1
net.sf.freecol.common.model.Building.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.Building.getLabel(),1,1,2,2
net.sf.freecol.common.model.Building.getLevel(),0,1,1,1
net.sf.freecol.common.model.Building.getLocationLabel(),0,1,1,1
"net.sf.freecol.common.model.Building.getModifiers(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.Building.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Building.getNoAddReason(Locatable),3,1,3,3
net.sf.freecol.common.model.Building.getNoWorkReason(),0,1,1,1
net.sf.freecol.common.model.Building.getPriority(),0,1,1,1
"net.sf.freecol.common.model.Building.getProductionModifiers(GoodsType, UnitType)",2,1,3,3
net.sf.freecol.common.model.Building.getRebelFactor(),0,1,1,1
net.sf.freecol.common.model.Building.getType(),0,1,1,1
net.sf.freecol.common.model.Building.getUnitCapacity(),0,1,1,1
net.sf.freecol.common.model.Building.getWorkTile(),0,1,1,1
net.sf.freecol.common.model.Building.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.model.Building.goodSuggestionCheck(UnitType, Unit, GoodsType)",6,4,6,7
net.sf.freecol.common.model.Building.isAvailable(),0,1,1,1
net.sf.freecol.common.model.Building.isCurrent(),0,1,1,1
net.sf.freecol.common.model.Building.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Building.setType(BuildingType),6,3,4,5
net.sf.freecol.common.model.Building.toShortString(),0,1,1,1
net.sf.freecol.common.model.Building.toString(),2,1,3,3
net.sf.freecol.common.model.Building.up(),0,1,1,1
net.sf.freecol.common.model.Building.upgrade(),1,2,1,2
net.sf.freecol.common.model.Building.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.BuildingTest.clearBuilding(Building),1,1,2,2
"net.sf.freecol.common.model.BuildingTest.productionTest(BuildingType[], int[][][])",19,1,10,10
net.sf.freecol.common.model.BuildingTest.testCanAddToBuilding(),10,3,6,7
net.sf.freecol.common.model.BuildingTest.testCanAddToSchool(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testCanBuildNext(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testChurch(),1,1,2,2
net.sf.freecol.common.model.BuildingTest.testCottonClothProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testCrossProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testFactoryProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testFortRequiresMinimumPopulation(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testFortressRequiresMinimumPopulation(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testInitialColony(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testLumberProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testNewspaperBonus(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testPasture(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testPrintingPressBonus(),1,1,2,2
net.sf.freecol.common.model.BuildingTest.testSerialize(),3,1,3,3
net.sf.freecol.common.model.BuildingTest.testStockade(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testStockadeRequiresMinimumPopulation(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testToolsMusketProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingTest.testTownhallProduction(),1,1,2,2
net.sf.freecol.common.model.BuildingTest.testUnitProduction(),42,1,11,11
"net.sf.freecol.common.model.BuildingType.BuildingType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.BuildingType.addProductionType(ProductionType),1,1,2,2
net.sf.freecol.common.model.BuildingType.canAdd(UnitType),0,1,1,1
"net.sf.freecol.common.model.BuildingType.canBeBuiltInColony(Colony, List<BuildableType>)",8,4,4,6
"net.sf.freecol.common.model.BuildingType.canProduce(GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.BuildingType.compareTo(FreeColObject),2,1,3,3
net.sf.freecol.common.model.BuildingType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.BuildingType.getAvailableProductionTypes(boolean),0,1,1,1
"net.sf.freecol.common.model.BuildingType.getAvailableProductionTypes(boolean, String)",1,1,2,2
net.sf.freecol.common.model.BuildingType.getCompetenceFactor(),0,1,1,1
"net.sf.freecol.common.model.BuildingType.getCompetenceModifiers(String, UnitType, Turn)",4,1,3,3
net.sf.freecol.common.model.BuildingType.getExpertConnectionProduction(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getFirstLevel(),1,1,2,2
net.sf.freecol.common.model.BuildingType.getLevel(),0,1,1,1
"net.sf.freecol.common.model.BuildingType.getMaximumIndex(Colony, JList<BuildableType>, int)",19,9,6,16
net.sf.freecol.common.model.BuildingType.getMaximumSkill(),0,1,1,1
"net.sf.freecol.common.model.BuildingType.getMinimumIndex(Colony, JList<BuildableType>, int)",6,5,3,6
net.sf.freecol.common.model.BuildingType.getMinimumSkill(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getNoAddReason(UnitType),10,1,4,5
"net.sf.freecol.common.model.BuildingType.getPotentialProduction(GoodsType, UnitType)",2,1,3,3
net.sf.freecol.common.model.BuildingType.getPriority(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getProducedGoodsType(),2,2,2,3
net.sf.freecol.common.model.BuildingType.getProductionTypes(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getRebelFactor(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getType(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getUpgradesFrom(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getUpgradesTo(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getUpkeep(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getWorkPlaces(),0,1,1,1
net.sf.freecol.common.model.BuildingType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.BuildingType.isAutomaticBuild(),1,1,2,2
net.sf.freecol.common.model.BuildingType.isDefenceType(),0,1,1,1
net.sf.freecol.common.model.BuildingType.readAttributes(FreeColXMLReader),13,1,7,8
net.sf.freecol.common.model.BuildingType.readChild(FreeColXMLReader),7,1,4,5
net.sf.freecol.common.model.BuildingType.setProductionTypes(List<ProductionType>),0,1,1,1
net.sf.freecol.common.model.BuildingType.writeAttributes(FreeColXMLWriter),5,1,6,6
net.sf.freecol.common.model.BuildingType.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.ClassicTileProductionTest.ProductionTestCombination.ProductionTestCombination(TileType, GoodsType, ResourceType, UnitType, List<TileImprovementTypeWithMagnitude>, int)",0,1,1,1
"net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.TileImprovementTypeWithMagnitude(TileImprovementType, int)",0,1,1,1
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.getMagnitude(),0,1,1,1
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude.getTileImprovementType(),0,1,1,1
"net.sf.freecol.common.model.ClassicTileProductionTest.compareResultFiles(File, File)",5,1,4,4
net.sf.freecol.common.model.ClassicTileProductionTest.determineTileImprovementPermutations(TileType),13,1,6,6
"net.sf.freecol.common.model.ClassicTileProductionTest.executeProductionTestCombination(ProductionTestCombination, Game, List<TileImprovementType>)",8,1,8,8
"net.sf.freecol.common.model.ClassicTileProductionTest.getProductionAmount(GoodsType, ProductionInfo)",1,2,1,2
net.sf.freecol.common.model.ClassicTileProductionTest.getUnitTypesThatShouldBeTestedFor(GoodsType),1,1,2,2
net.sf.freecol.common.model.ClassicTileProductionTest.nullAnd(List<T>),0,1,1,1
net.sf.freecol.common.model.ClassicTileProductionTest.produceActualResultFile(File),21,1,7,7
net.sf.freecol.common.model.ClassicTileProductionTest.readHeaderFromResultFile(File),0,1,1,1
net.sf.freecol.common.model.ClassicTileProductionTest.readResultFile(File),4,3,3,4
net.sf.freecol.common.model.ClassicTileProductionTest.testTileProduction(),0,1,1,1
"net.sf.freecol.common.model.ClassicTileProductionTest.writeHeaderTo(PrintWriter, List<TileImprovementType>)",0,1,1,1
"net.sf.freecol.common.model.ClassicTileProductionTest.writeOutputTo(PrintWriter, List<Object>, String)",0,1,1,1
"net.sf.freecol.common.model.Colony.Colony(Game, Player, String, Tile)",0,1,1,1
"net.sf.freecol.common.model.Colony.Colony(Game, String)",0,1,1,1
"net.sf.freecol.common.model.Colony.TileImprovementSuggestion.TileImprovementSuggestion(Tile, TileImprovementType, int)",0,1,1,1
net.sf.freecol.common.model.Colony.TileImprovementSuggestion.getAmount(),0,1,1,1
net.sf.freecol.common.model.Colony.TileImprovementSuggestion.isExploration(),0,1,1,1
"net.sf.freecol.common.model.Colony.accumulateChoice(GoodsType, Collection<GoodsType>, List<Collection<GoodsType>>)",1,2,1,2
"net.sf.freecol.common.model.Colony.accumulateChoices(Collection<GoodsType>, Collection<GoodsType>, List<Collection<GoodsType>>)",1,1,2,2
net.sf.freecol.common.model.Colony.add(Locatable),1,2,2,2
net.sf.freecol.common.model.Colony.addBuilding(Building),4,3,3,5
net.sf.freecol.common.model.Colony.addColonyTile(ColonyTile),1,2,1,2
"net.sf.freecol.common.model.Colony.addGoods(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.Colony.addLiberty(int),2,1,3,3
net.sf.freecol.common.model.Colony.addPortAbility(),0,1,1,1
net.sf.freecol.common.model.Colony.calculateProductionBonus(int),5,3,1,5
"net.sf.freecol.common.model.Colony.calculateRebelCount(int, int)",0,1,1,1
"net.sf.freecol.common.model.Colony.calculateSettlementValue(int, Unit)",1,1,2,2
"net.sf.freecol.common.model.Colony.calculateSoLPercentage(int, int)",3,2,1,4
"net.sf.freecol.common.model.Colony.calculateToryCount(int, int)",0,1,1,1
net.sf.freecol.common.model.Colony.canBeInput(),0,1,1,1
net.sf.freecol.common.model.Colony.canBePillaged(Unit),3,1,8,8
net.sf.freecol.common.model.Colony.canBePlundered(),0,1,1,1
net.sf.freecol.common.model.Colony.canBreed(GoodsType),1,1,2,2
net.sf.freecol.common.model.Colony.canBuild(),0,1,1,1
net.sf.freecol.common.model.Colony.canBuild(BuildableType),0,1,1,1
net.sf.freecol.common.model.Colony.canPayToFinishBuilding(),0,1,1,1
net.sf.freecol.common.model.Colony.canPayToFinishBuilding(BuildableType),1,1,2,2
net.sf.freecol.common.model.Colony.canProduce(GoodsType),4,1,4,4
net.sf.freecol.common.model.Colony.canProvideGoods(List<AbstractGoods>),7,3,3,5
net.sf.freecol.common.model.Colony.canReducePopulation(),0,1,1,1
net.sf.freecol.common.model.Colony.canTrain(Unit),0,1,1,1
net.sf.freecol.common.model.Colony.canTrain(UnitType),2,1,3,3
"net.sf.freecol.common.model.Colony.checkBuildQueueIntegrity(boolean, LogBuilder)",22,1,11,11
net.sf.freecol.common.model.Colony.checkForGovMgtChangeMessage(),22,1,2,14
"net.sf.freecol.common.model.Colony.checkIntegrity(boolean, LogBuilder)",0,1,1,1
net.sf.freecol.common.model.Colony.clearBuildingMap(),0,1,1,1
net.sf.freecol.common.model.Colony.clearColonyTiles(),0,1,1,1
net.sf.freecol.common.model.Colony.contains(Locatable),1,2,2,2
net.sf.freecol.common.model.Colony.copyColony(),7,1,4,4
net.sf.freecol.common.model.Colony.copyIn(T),3,2,3,4
net.sf.freecol.common.model.Colony.evaluateFor(Player),21,9,8,12
net.sf.freecol.common.model.Colony.findStudent(Unit),4,2,2,4
net.sf.freecol.common.model.Colony.findTeacher(Unit),2,1,3,3
"net.sf.freecol.common.model.Colony.getAbilities(String, FreeColSpecObjectType, Turn)",2,1,3,3
net.sf.freecol.common.model.Colony.getAdjustedNetProductionOf(GoodsType),2,1,2,2
net.sf.freecol.common.model.Colony.getAlarmLevelLabel(Player),0,1,1,1
net.sf.freecol.common.model.Colony.getAllWorkLocations(),0,1,1,1
net.sf.freecol.common.model.Colony.getAllWorkLocationsList(),0,1,1,1
net.sf.freecol.common.model.Colony.getApparentUnitCount(),1,1,2,2
net.sf.freecol.common.model.Colony.getAvailableGoodsCount(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.getAvailableWorkLocations(),0,1,1,1
net.sf.freecol.common.model.Colony.getAvailableWorkLocationsList(),0,1,1,1
net.sf.freecol.common.model.Colony.getBestDefenderType(),1,1,3,3
net.sf.freecol.common.model.Colony.getBetterExpert(Unit),10,2,5,9
net.sf.freecol.common.model.Colony.getBuildQueue(),0,1,1,1
net.sf.freecol.common.model.Colony.getBuildableUnits(),1,1,2,2
net.sf.freecol.common.model.Colony.getBuilding(BuildingType),0,1,1,1
net.sf.freecol.common.model.Colony.getBuildings(),0,1,1,1
net.sf.freecol.common.model.Colony.getBurnableBuildings(),0,1,1,1
net.sf.freecol.common.model.Colony.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.Colony.getColony(),0,1,1,1
net.sf.freecol.common.model.Colony.getColonyTile(Tile),0,1,1,1
net.sf.freecol.common.model.Colony.getColonyTiles(),0,1,1,1
net.sf.freecol.common.model.Colony.getConsumers(),0,1,1,1
net.sf.freecol.common.model.Colony.getConsumptionOf(GoodsType),1,1,2,2
net.sf.freecol.common.model.Colony.getCorresponding(T),9,1,5,5
net.sf.freecol.common.model.Colony.getCurrentWorkLocations(),0,1,1,1
net.sf.freecol.common.model.Colony.getCurrentWorkLocationsList(),0,1,1,1
net.sf.freecol.common.model.Colony.getCurrentlyBuilding(),0,1,1,1
net.sf.freecol.common.model.Colony.getDefenceRatio(),0,1,1,1
net.sf.freecol.common.model.Colony.getDefendingUnit(Unit),1,2,1,2
net.sf.freecol.common.model.Colony.getDisasterChoices(),0,1,1,1
net.sf.freecol.common.model.Colony.getDisplayUnitCount(),0,1,1,1
net.sf.freecol.common.model.Colony.getDisposables(),0,1,1,1
net.sf.freecol.common.model.Colony.getEstablished(),0,1,1,1
"net.sf.freecol.common.model.Colony.getExportAmount(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.Colony.getExportData(),0,1,1,1
net.sf.freecol.common.model.Colony.getExportData(GoodsType),1,1,2,2
net.sf.freecol.common.model.Colony.getFoodProduction(),0,1,1,1
net.sf.freecol.common.model.Colony.getFullRequiredGoods(BuildableType),7,5,4,5
net.sf.freecol.common.model.Colony.getGoodsCapacity(),0,1,1,1
net.sf.freecol.common.model.Colony.getImmigration(),0,1,1,1
"net.sf.freecol.common.model.Colony.getImportAmount(GoodsType, int)",1,2,1,2
"net.sf.freecol.common.model.Colony.getInsufficientProductionMessage(ProductionInfo, AbstractGoods)",4,3,2,5
net.sf.freecol.common.model.Colony.getLiberty(),0,1,1,1
net.sf.freecol.common.model.Colony.getLocationLabelFor(Player),1,1,1,2
net.sf.freecol.common.model.Colony.getLocationName(TradeLocation),0,1,1,1
net.sf.freecol.common.model.Colony.getLootableGoodsList(),0,1,1,1
net.sf.freecol.common.model.Colony.getNetProductionOf(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.getNewColonistTurns(),3,1,1,3
"net.sf.freecol.common.model.Colony.getNoBuildReason(BuildableType, List<BuildableType>)",11,7,7,9
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, Collection<GoodsType>)",1,1,1,2
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, Collection<GoodsType>, LogBuilder)",4,2,3,5
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, boolean)",1,1,1,2
"net.sf.freecol.common.model.Colony.getOccupationFor(Unit, boolean, LogBuilder)",3,3,2,3
net.sf.freecol.common.model.Colony.getOccupationTrace(),0,1,1,1
net.sf.freecol.common.model.Colony.getOldSonsOfLiberty(),0,1,1,1
net.sf.freecol.common.model.Colony.getOldToryCount(),0,1,1,1
net.sf.freecol.common.model.Colony.getPlunderRange(Unit),3,3,2,3
net.sf.freecol.common.model.Colony.getPopulationQueue(),0,1,1,1
net.sf.freecol.common.model.Colony.getPreferredSizeChange(),1,1,2,2
net.sf.freecol.common.model.Colony.getPriceForBuilding(),0,1,1,1
net.sf.freecol.common.model.Colony.getPriceForBuilding(BuildableType),0,1,1,1
net.sf.freecol.common.model.Colony.getProductionBonus(),0,1,1,1
net.sf.freecol.common.model.Colony.getProductionInfo(Object),0,1,1,1
net.sf.freecol.common.model.Colony.getProductionMap(),0,1,1,1
"net.sf.freecol.common.model.Colony.getProductionModifiers(GoodsType, UnitType, WorkLocation)",1,2,2,2
net.sf.freecol.common.model.Colony.getProductionWarnings(GoodsType),18,1,10,10
net.sf.freecol.common.model.Colony.getReducePopulationMessage(),3,3,2,4
net.sf.freecol.common.model.Colony.getRequiredGoods(BuildableType),0,1,1,1
net.sf.freecol.common.model.Colony.getSonsOfLiberty(),0,1,1,1
net.sf.freecol.common.model.Colony.getStarvationTurns(),1,1,1,2
net.sf.freecol.common.model.Colony.getStockade(),0,1,1,1
net.sf.freecol.common.model.Colony.getStockadeKey(),1,1,2,2
net.sf.freecol.common.model.Colony.getTeachers(),0,1,1,1
net.sf.freecol.common.model.Colony.getTileImprovementSuggestions(),2,1,3,3
net.sf.freecol.common.model.Colony.getToryCount(),0,1,1,1
net.sf.freecol.common.model.Colony.getTotalDefencePower(),0,1,1,1
net.sf.freecol.common.model.Colony.getTotalProductionOf(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.getTurnsToComplete(BuildableType),0,1,1,1
"net.sf.freecol.common.model.Colony.getTurnsToComplete(BuildableType, AbstractGoods)",18,4,7,10
net.sf.freecol.common.model.Colony.getUnbuildableMessage(BuildableType),0,1,1,1
net.sf.freecol.common.model.Colony.getUnitCount(),0,1,1,1
net.sf.freecol.common.model.Colony.getUnitList(),0,1,1,1
net.sf.freecol.common.model.Colony.getUnits(),0,1,1,1
net.sf.freecol.common.model.Colony.getUnitsToAdd(),3,3,2,3
net.sf.freecol.common.model.Colony.getUnitsToRemove(),3,3,2,3
net.sf.freecol.common.model.Colony.getUpkeep(),0,1,1,1
net.sf.freecol.common.model.Colony.getWarehouse(),0,1,1,1
net.sf.freecol.common.model.Colony.getWorkLocationFor(Unit),1,1,1,2
"net.sf.freecol.common.model.Colony.getWorkLocationFor(Unit, GoodsType)",2,2,2,3
net.sf.freecol.common.model.Colony.getWorkLocationForProducing(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.getWorkLocationWithAbility(String),0,1,1,1
"net.sf.freecol.common.model.Colony.getWorkLocationWithAbility(String, Class<T>)",2,2,2,3
net.sf.freecol.common.model.Colony.getWorkLocationWithModifier(String),0,1,1,1
"net.sf.freecol.common.model.Colony.getWorkLocationWithModifier(String, Class<T>)",3,2,2,3
net.sf.freecol.common.model.Colony.getWorkLocationsForConsuming(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.getWorkLocationsForProducing(GoodsType),0,1,1,1
"net.sf.freecol.common.model.Colony.getWorkTypeChoices(Unit, boolean)",6,1,4,4
net.sf.freecol.common.model.Colony.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Colony.goodsUseful(GoodsType),5,3,4,5
net.sf.freecol.common.model.Colony.governmentChange(int),29,1,1,13
net.sf.freecol.common.model.Colony.hasContacted(Player),2,1,3,3
net.sf.freecol.common.model.Colony.hasStockade(),0,1,1,1
net.sf.freecol.common.model.Colony.invalidateCache(),0,1,1,1
net.sf.freecol.common.model.Colony.isAutomaticBuild(BuildingType),1,1,2,2
net.sf.freecol.common.model.Colony.isBadlyDefended(),2,3,1,3
net.sf.freecol.common.model.Colony.isConsuming(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.isProducing(GoodsType),0,1,1,1
net.sf.freecol.common.model.Colony.isProductive(WorkLocation),1,1,4,4
net.sf.freecol.common.model.Colony.isTileInUse(Tile),1,1,2,2
net.sf.freecol.common.model.Colony.isUndead(),1,1,2,2
net.sf.freecol.common.model.Colony.isUnderSiege(),10,1,4,6
net.sf.freecol.common.model.Colony.isVeryWellDefended(),2,3,1,3
net.sf.freecol.common.model.Colony.joinColony(Unit),5,1,4,4
net.sf.freecol.common.model.Colony.modifyImmigration(int),0,1,1,1
net.sf.freecol.common.model.Colony.modifyLiberty(int),2,1,2,3
"net.sf.freecol.common.model.Colony.modifySpecialGoods(GoodsType, int)",2,1,3,3
net.sf.freecol.common.model.Colony.priceGoodsForBuilding(List<AbstractGoods>),2,1,2,2
net.sf.freecol.common.model.Colony.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Colony.readChild(FreeColXMLReader),10,1,8,8
net.sf.freecol.common.model.Colony.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Colony.rebelHelper(int),11,4,8,9
net.sf.freecol.common.model.Colony.remove(Locatable),6,4,4,4
net.sf.freecol.common.model.Colony.removeBuilding(Building),1,2,1,2
"net.sf.freecol.common.model.Colony.removeGoods(GoodsType, int)",1,1,2,2
"net.sf.freecol.common.model.Colony.returnPresent(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.Colony.setBuildQueue(List<BuildableType>),0,1,1,1
net.sf.freecol.common.model.Colony.setBuildingMap(List<Building>),1,1,2,2
net.sf.freecol.common.model.Colony.setColonyTiles(List<ColonyTile>),0,1,1,1
net.sf.freecol.common.model.Colony.setCurrentlyBuilding(BuildableType),0,1,1,1
net.sf.freecol.common.model.Colony.setDisplayUnitCount(int),0,1,1,1
net.sf.freecol.common.model.Colony.setEstablished(Turn),0,1,1,1
net.sf.freecol.common.model.Colony.setExportData(Collection<ExportData>),1,1,2,2
net.sf.freecol.common.model.Colony.setExportData(ExportData),0,1,1,1
net.sf.freecol.common.model.Colony.setOccupationTrace(boolean),0,1,1,1
net.sf.freecol.common.model.Colony.setPopulationQueue(List<UnitType>),0,1,1,1
net.sf.freecol.common.model.Colony.setProductionBonus(int),0,1,1,1
net.sf.freecol.common.model.Colony.toShortString(),0,1,1,1
net.sf.freecol.common.model.Colony.toString(),0,1,1,1
net.sf.freecol.common.model.Colony.up(),0,1,1,1
"net.sf.freecol.common.model.Colony.updateEducation(Unit, boolean)",24,3,11,12
net.sf.freecol.common.model.Colony.updatePopulation(),1,1,2,2
net.sf.freecol.common.model.Colony.updateProductionBonus(),1,2,2,2
net.sf.freecol.common.model.Colony.updateProductionTypes(),1,1,2,2
net.sf.freecol.common.model.Colony.updateSoL(),0,1,1,1
net.sf.freecol.common.model.Colony.writeAttributes(FreeColXMLWriter),5,1,4,4
net.sf.freecol.common.model.Colony.writeChildren(FreeColXMLWriter),12,1,7,7
net.sf.freecol.common.model.ColonyProductionTest.testBellNetProduction(),2,1,3,3
net.sf.freecol.common.model.ColonyProductionTest.testConsumers(),5,1,6,6
net.sf.freecol.common.model.ColonyProductionTest.testGetPotentialProduction(),0,1,1,1
net.sf.freecol.common.model.ColonyProductionTest.testNoHorsesOverProduction(),0,1,1,1
net.sf.freecol.common.model.ColonyProductionTest.testProduction(),4,1,3,3
net.sf.freecol.common.model.ColonyProductionTest.testProductionMap(),0,1,1,1
net.sf.freecol.common.model.ColonyProductionTest.testProductionPioneer(),0,1,1,1
net.sf.freecol.common.model.ColonyProductionTest.testProductionSoldier(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.countParties(Colony),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testAddUnitToColony(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testBuildQueueAcceptsUnitDoubles(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testBuildQueueDoesNotAcceptBuildingDoubles(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testCopyColony(),6,1,5,5
net.sf.freecol.common.model.ColonyTest.testCurrentlyBuilding(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testFoundColony(),12,9,6,9
net.sf.freecol.common.model.ColonyTest.testOccupationWithFood(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testTeaParty(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testUnderSiege(),0,1,1,1
net.sf.freecol.common.model.ColonyTest.testUpkeep(),0,1,1,1
"net.sf.freecol.common.model.ColonyTile.ColonyTile(Game, Colony, Tile)",0,1,1,1
"net.sf.freecol.common.model.ColonyTile.ColonyTile(Game, String)",0,1,1,1
net.sf.freecol.common.model.ColonyTile.canAutoProduce(),0,1,1,1
"net.sf.freecol.common.model.ColonyTile.canProduce(GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.ColonyTile.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ColonyTile.evaluateFor(Player),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getAvailableProductionTypes(boolean),2,1,4,4
"net.sf.freecol.common.model.ColonyTile.getBaseProduction(ProductionType, GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.ColonyTile.getBasicProductionInfo(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getClaimTemplate(),1,1,2,2
net.sf.freecol.common.model.ColonyTile.getCompetenceFactor(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getLabel(),1,1,2,2
net.sf.freecol.common.model.ColonyTile.getLevel(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getLocationLabel(),1,1,2,2
net.sf.freecol.common.model.ColonyTile.getNoAddReason(Locatable),1,1,2,2
net.sf.freecol.common.model.ColonyTile.getNoWorkReason(),64,1,8,15
net.sf.freecol.common.model.ColonyTile.getOccupyingUnit(),0,1,1,1
"net.sf.freecol.common.model.ColonyTile.getProductionModifiers(GoodsType, UnitType)",0,1,1,1
net.sf.freecol.common.model.ColonyTile.getRebelFactor(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getUnitCapacity(),1,1,1,2
net.sf.freecol.common.model.ColonyTile.getWorkTile(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.model.ColonyTile.goodSuggestionCheck(UnitType, Unit, GoodsType)",1,1,2,2
net.sf.freecol.common.model.ColonyTile.improvedBy(TileImprovementType),25,11,12,17
net.sf.freecol.common.model.ColonyTile.isAvailable(),1,1,2,2
net.sf.freecol.common.model.ColonyTile.isColonyCenterTile(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.isCurrent(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.isOccupied(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.ColonyTile.setWorkTile(Tile),0,1,1,1
net.sf.freecol.common.model.ColonyTile.toShortString(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.toString(),1,1,2,2
net.sf.freecol.common.model.ColonyTile.up(),0,1,1,1
net.sf.freecol.common.model.ColonyTile.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.ColonyTradeItem.ColonyTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.ColonyTradeItem.ColonyTradeItem(Game, Player, Player, Colony)",3,3,3,4
net.sf.freecol.common.model.ColonyTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ColonyTradeItem.equals(Object),2,2,3,4
net.sf.freecol.common.model.ColonyTradeItem.evaluateFor(Player),4,3,2,5
net.sf.freecol.common.model.ColonyTradeItem.getColony(Game),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.getColonyId(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.getColonyName(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.isValid(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.ColonyTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.ColonyWas.ColonyWas(Colony),0,1,1,1
net.sf.freecol.common.model.ColonyWas.fireChanges(),4,1,5,5
net.sf.freecol.common.model.CombatModel.CombatModel(),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatOdds.CombatOdds(double),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.CombatResult(List<CombatEffectType>),0,1,1,1
"net.sf.freecol.common.model.CombatModel.CombatResult.CombatResult(List<CombatEffectType>, int, int)",0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.getAttackerHitpointsAfter(),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.getDefenderHitpointsAfter(),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.getEffects(),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.isAttackerHitpointsAffected(),0,1,1,1
net.sf.freecol.common.model.CombatModel.CombatResult.isDefenderHitpointsAffected(),0,1,1,1
"net.sf.freecol.common.model.CombatModel.combatIsAmphibious(FreeColGameObject, FreeColGameObject)",1,1,6,6
"net.sf.freecol.common.model.CombatModel.combatIsAttack(FreeColGameObject, FreeColGameObject)",1,1,1,2
"net.sf.freecol.common.model.CombatModel.combatIsAttackMeasurement(FreeColGameObject, FreeColGameObject)",1,1,1,2
"net.sf.freecol.common.model.CombatModel.combatIsBombard(FreeColGameObject, FreeColGameObject)",1,1,3,3
"net.sf.freecol.common.model.CombatModel.combatIsDefenceMeasurement(FreeColGameObject, FreeColGameObject)",1,1,1,2
"net.sf.freecol.common.model.CombatModel.combatIsSettlementAttack(FreeColGameObject, FreeColGameObject)",1,1,1,2
"net.sf.freecol.common.model.CombatModel.combatIsWarOfIndependence(FreeColGameObject, FreeColGameObject)",5,2,5,6
net.sf.freecol.common.model.CombatModel.getMilitaryStrengthComparator(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testAttackIgnoresMovementPoints(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testAttackShipWithLandUnit(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testCaptureConvert(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testColonistAttackedByVeteran(),11,1,2,7
net.sf.freecol.common.model.CombatTest.testDefendColonyWithRevere(),1,1,2,2
net.sf.freecol.common.model.CombatTest.testDefendColonyWithUnarmedColonist(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testDefendSettlement(),1,1,2,2
net.sf.freecol.common.model.CombatTest.testGalleonAttackedByPrivateer(),26,1,7,16
net.sf.freecol.common.model.CombatTest.testRegulars(),0,1,1,1
net.sf.freecol.common.model.CombatTest.testSpanishAgainstNatives(),6,5,3,5
net.sf.freecol.common.model.Constants.IntegrityType.IntegrityType(int),0,1,1,1
net.sf.freecol.common.model.Constants.IntegrityType.combine(IntegrityType),0,1,1,1
net.sf.freecol.common.model.Constants.IntegrityType.fail(),0,1,1,1
net.sf.freecol.common.model.Constants.IntegrityType.fix(),0,1,1,1
net.sf.freecol.common.model.Constants.IntegrityType.safe(),0,1,1,1
"net.sf.freecol.common.model.DiplomaticTrade.DiplomaticTrade(Game, String)",0,1,1,1
"net.sf.freecol.common.model.DiplomaticTrade.DiplomaticTrade(Game, TradeContext, Player, Player, List<TradeItem>, int)",1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.TradeContext.getKey(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.add(TradeItem),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.clear(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.copyIn(T),2,2,2,3
net.sf.freecol.common.model.DiplomaticTrade.getColoniesGivenBy(Player),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.getContext(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getGoldGivenBy(Player),2,1,3,3
net.sf.freecol.common.model.DiplomaticTrade.getGoodsGivenBy(Player),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.getItems(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getItemsGivenBy(Player),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getOtherPlayer(Player),1,1,1,2
net.sf.freecol.common.model.DiplomaticTrade.getReceiveMessage(Player),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getRecipient(),0,1,1,1
"net.sf.freecol.common.model.DiplomaticTrade.getSendMessage(Player, Settlement)",0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getSender(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getStance(),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.getStatus(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getUnitsGivenBy(Player),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.getVersion(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.getVictim(),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.incrementVersion(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.isEmpty(),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.isInternable(),0,1,1,1
"net.sf.freecol.common.model.DiplomaticTrade.makePeaceTreaty(TradeContext, Player, Player)",0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.readChild(FreeColXMLReader),7,1,7,7
net.sf.freecol.common.model.DiplomaticTrade.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.remove(TradeItem),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.remove(int),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.removeType(Class<? extends TradeItem>),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.setRecipient(Player),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.setSender(Player),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.setStatus(TradeStatus),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.toString(),1,1,2,2
net.sf.freecol.common.model.DiplomaticTrade.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.DiplomaticTrade.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.Direction.Direction(int, int, int, int)",0,1,1,1
net.sf.freecol.common.model.Direction.angleToDirection(double),0,1,1,1
"net.sf.freecol.common.model.Direction.getClosestDirections(String, Logger, Random)",5,1,2,4
net.sf.freecol.common.model.Direction.getEWMirroredDirection(),1,7,1,7
net.sf.freecol.common.model.Direction.getKey(),0,1,1,1
net.sf.freecol.common.model.Direction.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Direction.getNextDirection(),0,1,1,1
net.sf.freecol.common.model.Direction.getPreviousDirection(),0,1,1,1
"net.sf.freecol.common.model.Direction.getRandomDirection(String, Logger, Random)",0,1,1,1
"net.sf.freecol.common.model.Direction.getRandomDirections(String, Logger, Random)",0,1,1,1
net.sf.freecol.common.model.Direction.getReverseDirection(),0,1,1,1
net.sf.freecol.common.model.Direction.rotate(int),0,1,1,1
"net.sf.freecol.common.model.Direction.step(int, int)",1,1,1,2
"net.sf.freecol.common.model.Disaster.Disaster(String, Specification)",0,1,1,1
net.sf.freecol.common.model.Disaster.addEffect(Effect),1,1,1,2
net.sf.freecol.common.model.Disaster.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Disaster.getEffects(),1,1,2,2
net.sf.freecol.common.model.Disaster.getNumberOfEffects(),0,1,1,1
net.sf.freecol.common.model.Disaster.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Disaster.isNatural(),0,1,1,1
net.sf.freecol.common.model.Disaster.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Disaster.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Disaster.readChildren(FreeColXMLReader),7,1,4,6
net.sf.freecol.common.model.Disaster.setEffects(List<RandomChoice<Effect>>),2,1,2,2
net.sf.freecol.common.model.Disaster.toString(),1,1,2,2
net.sf.freecol.common.model.Disaster.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Disaster.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.DisasterTest.testDisastersPresent(),4,1,5,5
net.sf.freecol.common.model.Effect.Effect(),0,1,1,1
net.sf.freecol.common.model.Effect.Effect(Effect),0,1,1,1
"net.sf.freecol.common.model.Effect.Effect(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.Effect.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Effect.getProbability(),0,1,1,1
net.sf.freecol.common.model.Effect.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Effect.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Effect.toString(),1,1,2,2
net.sf.freecol.common.model.Effect.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.Europe.Europe(Game, Player)",0,1,1,1
"net.sf.freecol.common.model.Europe.Europe(Game, String)",0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.convertToMigrantSlot(Integer),2,1,2,3
net.sf.freecol.common.model.Europe.MigrationType.getDefaultSlot(),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.getMigrantCount(),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.getUnspecificSlot(),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.migrantIndexToSlot(int),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.migrantSlotToIndex(int),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.specificMigrantSlot(int),1,1,1,2
net.sf.freecol.common.model.Europe.MigrationType.unspecificMigrantSlot(int),0,1,1,1
net.sf.freecol.common.model.Europe.MigrationType.validMigrantIndex(int),1,1,1,2
net.sf.freecol.common.model.Europe.MigrationType.validMigrantSlot(int),1,1,1,2
net.sf.freecol.common.model.Europe.add(Locatable),4,1,2,4
"net.sf.freecol.common.model.Europe.addRecruitable(AbstractUnit, boolean)",2,2,3,3
"net.sf.freecol.common.model.Europe.addRecruitable(UnitType, boolean)",1,1,2,2
net.sf.freecol.common.model.Europe.canAdd(Locatable),1,2,1,2
net.sf.freecol.common.model.Europe.canBeInput(),0,1,1,1
net.sf.freecol.common.model.Europe.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Europe.disposeResources(),3,1,3,3
"net.sf.freecol.common.model.Europe.equipForRole(Unit, Role, int)",0,1,1,1
"net.sf.freecol.common.model.Europe.getAbilities(String, FreeColSpecObjectType, Turn)",2,1,3,3
net.sf.freecol.common.model.Europe.getAvailableGoodsCount(GoodsType),0,1,1,1
net.sf.freecol.common.model.Europe.getBaseRecruitPrice(),0,1,1,1
net.sf.freecol.common.model.Europe.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.Europe.getCurrentRecruitPrice(),1,2,1,2
net.sf.freecol.common.model.Europe.getExpandedRecruitables(boolean),7,4,3,5
"net.sf.freecol.common.model.Europe.getExportAmount(GoodsType, int)",1,1,1,2
net.sf.freecol.common.model.Europe.getFeatureContainer(),0,1,1,1
net.sf.freecol.common.model.Europe.getImmigration(int),1,1,1,2
"net.sf.freecol.common.model.Europe.getImportAmount(GoodsType, int)",1,1,1,2
net.sf.freecol.common.model.Europe.getLinkTarget(Player),1,1,1,2
net.sf.freecol.common.model.Europe.getLocationImageKey(),0,1,1,1
net.sf.freecol.common.model.Europe.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.Europe.getLocationName(TradeLocation),0,1,1,1
net.sf.freecol.common.model.Europe.getNameAsJlabel(),0,1,1,1
net.sf.freecol.common.model.Europe.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Europe.getOwner(),0,1,1,1
net.sf.freecol.common.model.Europe.getRank(),0,1,1,1
net.sf.freecol.common.model.Europe.getRecruitLowerCap(),0,1,1,1
net.sf.freecol.common.model.Europe.getRecruitables(),0,1,1,1
net.sf.freecol.common.model.Europe.getUnitPrice(UnitType),1,1,2,2
net.sf.freecol.common.model.Europe.getUnitPrices(),0,1,1,1
net.sf.freecol.common.model.Europe.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Europe.priceGoods(List<AbstractGoods>),6,3,3,4
net.sf.freecol.common.model.Europe.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Europe.readChild(FreeColXMLReader),9,1,7,7
net.sf.freecol.common.model.Europe.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Europe.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Europe.setRecruitables(List<AbstractUnit>),0,1,1,1
"net.sf.freecol.common.model.Europe.setUnitPrices(Map<UnitType, Integer>)",0,1,1,1
net.sf.freecol.common.model.Europe.toShortString(),0,1,1,1
net.sf.freecol.common.model.Europe.toString(),0,1,1,1
net.sf.freecol.common.model.Europe.up(),0,1,1,1
net.sf.freecol.common.model.Europe.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.Europe.writeChildren(FreeColXMLWriter),9,1,6,6
net.sf.freecol.common.model.EuropeTest.testMissionary(),0,1,1,1
net.sf.freecol.common.model.EuropeWas.EuropeWas(Europe),0,1,1,1
net.sf.freecol.common.model.EuropeWas.fireChanges(),1,2,2,2
net.sf.freecol.common.model.EuropeWas.getNewUnit(),1,1,2,2
"net.sf.freecol.common.model.EuropeanNationType.EuropeanNationType(String, Specification)",0,1,1,1
"net.sf.freecol.common.model.EuropeanNationType.addStartingUnit(String, AbstractUnit, boolean)",1,1,2,2
net.sf.freecol.common.model.EuropeanNationType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.EuropeanNationType.getMapKey(boolean),1,1,1,2
net.sf.freecol.common.model.EuropeanNationType.getStartingUnitMap(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.getStartingUnits(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.getStartingUnits(String),2,1,3,3
net.sf.freecol.common.model.EuropeanNationType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.isEuropean(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.isIndian(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.isREF(),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.EuropeanNationType.readChildren(FreeColXMLReader),2,1,3,3
"net.sf.freecol.common.model.EuropeanNationType.setStartingUnitMap(Map<String, Map<String, AbstractUnit>>)",0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.EuropeanNationType.writeChildren(FreeColXMLWriter),12,1,7,7
"net.sf.freecol.common.model.EuropeanNationType.writeUnit(FreeColXMLWriter, String, AbstractUnit, boolean)",1,1,2,2
"net.sf.freecol.common.model.Event.Event(FreeColXMLReader, Specification)",0,1,1,1
"net.sf.freecol.common.model.Event.Event(String, Specification)",0,1,1,1
net.sf.freecol.common.model.Event.addLimit(Limit),1,1,1,2
net.sf.freecol.common.model.Event.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Event.getLimit(String),1,1,2,2
net.sf.freecol.common.model.Event.getLimitValues(),1,1,2,2
net.sf.freecol.common.model.Event.getLimits(),0,1,1,1
net.sf.freecol.common.model.Event.getScoreValue(),0,1,1,1
net.sf.freecol.common.model.Event.getValue(),0,1,1,1
net.sf.freecol.common.model.Event.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Event.readAttributes(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Event.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Event.readChildren(FreeColXMLReader),1,1,1,2
"net.sf.freecol.common.model.Event.setLimits(Map<String, Limit>)",2,1,2,2
net.sf.freecol.common.model.Event.setScoreValue(int),0,1,1,1
net.sf.freecol.common.model.Event.setValue(String),0,1,1,1
net.sf.freecol.common.model.Event.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.Event.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.ExportData.ExportData(),0,1,1,1
net.sf.freecol.common.model.ExportData.ExportData(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.ExportData.ExportData(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.ExportData.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ExportData.getEffectiveImportLevel(int),1,1,1,2
net.sf.freecol.common.model.ExportData.getExportLevel(),0,1,1,1
net.sf.freecol.common.model.ExportData.getExported(),0,1,1,1
net.sf.freecol.common.model.ExportData.getHighLevel(),0,1,1,1
net.sf.freecol.common.model.ExportData.getImportLevel(),0,1,1,1
net.sf.freecol.common.model.ExportData.getLowLevel(),0,1,1,1
net.sf.freecol.common.model.ExportData.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.ExportData.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.ExportData.setExportLevel(int),0,1,1,1
net.sf.freecol.common.model.ExportData.setExported(boolean),0,1,1,1
net.sf.freecol.common.model.ExportData.setHighLevel(int),0,1,1,1
net.sf.freecol.common.model.ExportData.setImportLevel(int),0,1,1,1
net.sf.freecol.common.model.ExportData.setLowLevel(int),0,1,1,1
net.sf.freecol.common.model.ExportData.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Feature.Feature(Specification),0,1,1,1
net.sf.freecol.common.model.Feature.addScope(Scope),0,1,1,1
net.sf.freecol.common.model.Feature.appliesTo(FreeColObject),0,1,1,1
"net.sf.freecol.common.model.Feature.appliesTo(FreeColSpecObjectType, Turn)",1,1,2,2
net.sf.freecol.common.model.Feature.appliesTo(Turn),4,1,5,5
net.sf.freecol.common.model.Feature.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Feature.copyScopes(Collection<Scope>),0,1,1,1
net.sf.freecol.common.model.Feature.equals(Object),20,12,7,15
net.sf.freecol.common.model.Feature.getDuration(),0,1,1,1
net.sf.freecol.common.model.Feature.getFirstTurn(),0,1,1,1
net.sf.freecol.common.model.Feature.getLastTurn(),0,1,1,1
net.sf.freecol.common.model.Feature.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Feature.getScopeList(),0,1,1,1
net.sf.freecol.common.model.Feature.getScopes(),0,1,1,1
net.sf.freecol.common.model.Feature.getSource(),0,1,1,1
net.sf.freecol.common.model.Feature.hasScope(),0,1,1,1
net.sf.freecol.common.model.Feature.hasTimeLimit(),1,1,1,2
net.sf.freecol.common.model.Feature.hashCode(),3,1,3,4
net.sf.freecol.common.model.Feature.isIndependent(),2,2,1,5
net.sf.freecol.common.model.Feature.isOutOfDate(Turn),1,1,3,3
net.sf.freecol.common.model.Feature.isTemporary(),0,1,1,1
net.sf.freecol.common.model.Feature.readAttributes(FreeColXMLReader),4,1,5,5
net.sf.freecol.common.model.Feature.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Feature.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Feature.setDuration(int),0,1,1,1
net.sf.freecol.common.model.Feature.setFirstTurn(Turn),0,1,1,1
net.sf.freecol.common.model.Feature.setLastTurn(Turn),0,1,1,1
net.sf.freecol.common.model.Feature.setSource(FreeColObject),0,1,1,1
net.sf.freecol.common.model.Feature.setTemporary(boolean),0,1,1,1
net.sf.freecol.common.model.Feature.writeAttributes(FreeColXMLWriter),5,1,6,6
net.sf.freecol.common.model.Feature.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.FeatureContainer.abilitiesPresent(),0,1,1,1
net.sf.freecol.common.model.FeatureContainer.addAbility(Ability),2,2,2,3
net.sf.freecol.common.model.FeatureContainer.addFeatures(FreeColObject),9,2,5,6
net.sf.freecol.common.model.FeatureContainer.addModifier(Modifier),2,2,2,3
net.sf.freecol.common.model.FeatureContainer.allAbilities(Stream<Ability>),3,3,2,3
"net.sf.freecol.common.model.FeatureContainer.applyModifiers(float, Turn, Collection<Modifier>)",2,1,3,3
"net.sf.freecol.common.model.FeatureContainer.applyModifiers(float, Turn, Stream<Modifier>)",1,1,2,2
"net.sf.freecol.common.model.FeatureContainer.applyModifiersInternal(float, Turn, Collection<Modifier>)",3,3,2,3
net.sf.freecol.common.model.FeatureContainer.clear(),2,1,3,3
net.sf.freecol.common.model.FeatureContainer.containsAbilityKey(String),0,1,1,1
net.sf.freecol.common.model.FeatureContainer.copy(FeatureContainer),5,1,4,4
"net.sf.freecol.common.model.FeatureContainer.getAbilities(String, FreeColSpecObjectType, Turn)",10,1,5,5
net.sf.freecol.common.model.FeatureContainer.getAbilityValues(),3,1,3,3
net.sf.freecol.common.model.FeatureContainer.getModifierValues(),3,1,3,3
"net.sf.freecol.common.model.FeatureContainer.getModifiers(String, FreeColSpecObjectType, Turn)",8,2,6,6
"net.sf.freecol.common.model.FeatureContainer.hasAbility(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.FeatureContainer.modifiersPresent(),0,1,1,1
net.sf.freecol.common.model.FeatureContainer.removeAbilities(String),1,2,1,2
net.sf.freecol.common.model.FeatureContainer.removeAbility(Ability),4,2,3,5
net.sf.freecol.common.model.FeatureContainer.removeFeatures(FreeColObject),29,8,11,14
net.sf.freecol.common.model.FeatureContainer.removeModifier(Modifier),4,2,3,5
net.sf.freecol.common.model.FeatureContainer.removeModifiers(String),1,2,1,2
"net.sf.freecol.common.model.FeatureContainer.replaceSource(FreeColSpecObjectType, FreeColSpecObjectType)",4,1,5,5
net.sf.freecol.common.model.FeatureContainer.requireAbilities(),1,1,1,2
net.sf.freecol.common.model.FeatureContainer.requireModifiers(),1,1,1,2
net.sf.freecol.common.model.FeatureContainer.toString(),4,1,5,5
net.sf.freecol.common.model.Force.Force(Specification),0,1,1,1
"net.sf.freecol.common.model.Force.Force(Specification, List<AbstractUnit>, String)",5,1,4,4
net.sf.freecol.common.model.Force.add(AbstractUnit),10,1,5,5
net.sf.freecol.common.model.Force.calculateStrength(boolean),1,1,1,2
net.sf.freecol.common.model.Force.clearLandUnits(),0,1,1,1
net.sf.freecol.common.model.Force.clearNavalUnits(),0,1,1,1
net.sf.freecol.common.model.Force.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Force.getCapacity(),0,1,1,1
net.sf.freecol.common.model.Force.getLandUnitsList(),0,1,1,1
net.sf.freecol.common.model.Force.getNavalUnitsList(),0,1,1,1
net.sf.freecol.common.model.Force.getSpaceRequired(),0,1,1,1
net.sf.freecol.common.model.Force.getUnitList(),0,1,1,1
net.sf.freecol.common.model.Force.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Force.isEmpty(),1,1,2,2
net.sf.freecol.common.model.Force.matchAll(Force),1,1,2,2
net.sf.freecol.common.model.Force.prepareToBoard(UnitType),8,4,4,5
net.sf.freecol.common.model.Force.readFromXML(FreeColXMLReader),11,1,6,6
net.sf.freecol.common.model.Force.setLandUnitList(List<AbstractUnit>),0,1,1,1
net.sf.freecol.common.model.Force.setNavalUnitList(List<AbstractUnit>),0,1,1,1
net.sf.freecol.common.model.Force.toString(),2,1,3,3
"net.sf.freecol.common.model.Force.toXML(FreeColXMLWriter, String)",2,1,3,3
"net.sf.freecol.common.model.FoundingFather.FoundingFather(String, Specification)",0,1,1,1
net.sf.freecol.common.model.FoundingFather.FoundingFatherType.getKey(),0,1,1,1
net.sf.freecol.common.model.FoundingFather.FoundingFatherType.getTypeKey(),0,1,1,1
net.sf.freecol.common.model.FoundingFather.addEvent(Event),1,1,1,2
net.sf.freecol.common.model.FoundingFather.addUnit(AbstractUnit),1,1,1,2
net.sf.freecol.common.model.FoundingFather.copyIn(T),3,2,3,4
net.sf.freecol.common.model.FoundingFather.getEvents(),1,1,2,2
net.sf.freecol.common.model.FoundingFather.getType(),0,1,1,1
net.sf.freecol.common.model.FoundingFather.getTypeKey(),0,1,1,1
net.sf.freecol.common.model.FoundingFather.getUnitList(),1,1,2,2
net.sf.freecol.common.model.FoundingFather.getWeight(int),2,1,1,3
net.sf.freecol.common.model.FoundingFather.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.FoundingFather.isAvailableTo(Player),1,1,2,2
net.sf.freecol.common.model.FoundingFather.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.FoundingFather.readChild(FreeColXMLReader),4,1,4,4
net.sf.freecol.common.model.FoundingFather.readChildren(FreeColXMLReader),1,1,1,2
net.sf.freecol.common.model.FoundingFather.setEvents(List<Event>),0,1,1,1
net.sf.freecol.common.model.FoundingFather.setType(FoundingFatherType),0,1,1,1
net.sf.freecol.common.model.FoundingFather.setUnits(List<AbstractUnit>),0,1,1,1
net.sf.freecol.common.model.FoundingFather.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.FoundingFather.writeChildren(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.FoundingFatherTest.testAddAllFathers(),1,1,2,2
net.sf.freecol.common.model.FoundingFatherTest.testAvailableTo(),5,1,4,5
net.sf.freecol.common.model.FoundingFatherTest.testBellsRequired(),1,1,2,2
net.sf.freecol.common.model.FoundingFatherTest.testFeatures(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(Game),0,1,1,1
"net.sf.freecol.common.model.FreeColGameObject.FreeColGameObject(Game, String)",0,1,1,1
"net.sf.freecol.common.model.FreeColGameObject.checkIntegrity(boolean, LogBuilder)",0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.copyIn(T),4,3,3,5
net.sf.freecol.common.model.FreeColGameObject.dispose(),2,2,2,3
net.sf.freecol.common.model.FreeColGameObject.disposeResources(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.equals(Object),3,3,3,4
net.sf.freecol.common.model.FreeColGameObject.fundamentalDispose(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.getDisposables(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.getGame(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.getLinkTarget(Player),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.getSpecification(),1,1,2,2
net.sf.freecol.common.model.FreeColGameObject.hashCode(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.intern(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.internId(String),9,1,6,6
net.sf.freecol.common.model.FreeColGameObject.isDisposed(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.isInitialized(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.isInternable(),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.FreeColGameObject.readFromXML(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.FreeColGameObject.setGame(Game),1,2,1,2
net.sf.freecol.common.model.FreeColGameObject.setSpecification(Specification),0,1,1,1
net.sf.freecol.common.model.FreeColObject.addAbility(Ability),1,1,2,2
net.sf.freecol.common.model.FreeColObject.addFeatures(FreeColObject),1,1,2,2
net.sf.freecol.common.model.FreeColObject.addModifier(Modifier),1,2,1,2
net.sf.freecol.common.model.FreeColObject.addPropertyChangeListener(PropertyChangeListener),1,1,1,2
"net.sf.freecol.common.model.FreeColObject.addPropertyChangeListener(String, PropertyChangeListener)",1,1,1,2
"net.sf.freecol.common.model.FreeColObject.apply(float, Turn, String)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.apply(float, Turn, String, FreeColSpecObjectType)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.applyModifiers(float, Turn, Collection<Modifier>)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.applyModifiers(float, Turn, Stream<Modifier>)",0,1,1,1
net.sf.freecol.common.model.FreeColObject.arrayKey(int),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.compareIds(FreeColObject, FreeColObject)",11,5,3,9
net.sf.freecol.common.model.FreeColObject.compareTo(FreeColObject),0,1,1,1
net.sf.freecol.common.model.FreeColObject.containsAbilityKey(String),0,1,1,1
net.sf.freecol.common.model.FreeColObject.containsModifierKey(String),0,1,1,1
net.sf.freecol.common.model.FreeColObject.copy(Game),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.copy(Game, Class<T>)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.copy(Game, Class<T>, Player)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.copy(Game, Player)",0,1,1,1
net.sf.freecol.common.model.FreeColObject.copyIn(T),2,2,2,3
"net.sf.freecol.common.model.FreeColObject.copyInCast(T, Class<R>)",3,3,2,4
net.sf.freecol.common.model.FreeColObject.dumpObject(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.equals(Object),1,2,2,2
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, Object, Object)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, boolean, boolean)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.fireIndexedPropertyChange(String, int, int, int)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.firePropertyChange(PropertyChangeEvent),1,1,2,2
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, Object, Object)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, boolean, boolean)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.firePropertyChange(String, int, int)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.getAbilities(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getAbilities(String),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.getAbilities(String, FreeColSpecObjectType)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.getAbilities(String, FreeColSpecObjectType, Turn)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getDefenceModifiers(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getFeatureContainer(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getFreeColObjectClass(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getFreeColObjectClassByName(String),1,2,1,2
net.sf.freecol.common.model.FreeColObject.getGame(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getId(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getIdNumber(),9,3,4,5
net.sf.freecol.common.model.FreeColObject.getIdType(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getIdTypeByName(String),3,2,3,3
net.sf.freecol.common.model.FreeColObject.getModifiers(),1,1,2,2
net.sf.freecol.common.model.FreeColObject.getModifiers(String),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.getModifiers(String, FreeColSpecObjectType)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.getModifiers(String, FreeColSpecObjectType, Turn)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.getObjectClassIndex(Object),1,1,2,2
net.sf.freecol.common.model.FreeColObject.getPropertyChangeListeners(),1,1,2,2
net.sf.freecol.common.model.FreeColObject.getPropertyChangeListeners(String),1,1,2,2
net.sf.freecol.common.model.FreeColObject.getPropertyChangeSupport(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getSortedAbilities(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getSortedModifiers(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getSpecification(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.getSuffix(),1,1,2,2
net.sf.freecol.common.model.FreeColObject.getSuffix(String),1,1,2,2
net.sf.freecol.common.model.FreeColObject.hasAbility(String),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.hasAbility(String, FreeColSpecObjectType)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.hasAbility(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.FreeColObject.hasListeners(String),1,1,2,2
net.sf.freecol.common.model.FreeColObject.hasModifier(String),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.hasModifier(String, FreeColSpecObjectType)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.hasModifier(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.FreeColObject.hashCode(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.idEquals(FreeColObject),1,1,3,3
"net.sf.freecol.common.model.FreeColObject.invokeMethod(String, Class<T>, T)",4,2,3,4
"net.sf.freecol.common.model.FreeColObject.logFreeColObjects(Collection<T>, LogBuilder)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.FreeColObject.readChild(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.FreeColObject.readChildren(FreeColXMLReader),3,2,3,4
net.sf.freecol.common.model.FreeColObject.readFromXML(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.FreeColObject.readFromXMLPartial(FreeColXMLReader),6,3,4,5
net.sf.freecol.common.model.FreeColObject.removeAbilities(String),1,1,2,2
net.sf.freecol.common.model.FreeColObject.removeAbility(Ability),1,1,2,2
net.sf.freecol.common.model.FreeColObject.removeFeatures(FreeColObject),1,1,2,2
net.sf.freecol.common.model.FreeColObject.removeModifier(Modifier),1,2,1,2
net.sf.freecol.common.model.FreeColObject.removeModifiers(String),1,1,2,2
net.sf.freecol.common.model.FreeColObject.removePropertyChangeListener(PropertyChangeListener),1,1,2,2
"net.sf.freecol.common.model.FreeColObject.removePropertyChangeListener(String, PropertyChangeListener)",1,1,2,2
net.sf.freecol.common.model.FreeColObject.save(File),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.save(File, WriteScope)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.save(File, WriteScope, boolean)",1,1,2,2
"net.sf.freecol.common.model.FreeColObject.save(OutputStream, WriteScope, boolean)",3,1,4,4
net.sf.freecol.common.model.FreeColObject.serialize(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.serialize(Player),0,1,1,1
net.sf.freecol.common.model.FreeColObject.serialize(WriteScope),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.serialize(WriteScope, List<String>)",3,1,3,3
net.sf.freecol.common.model.FreeColObject.setGame(Game),0,1,1,1
net.sf.freecol.common.model.FreeColObject.setId(String),0,1,1,1
net.sf.freecol.common.model.FreeColObject.setSpecification(Specification),0,1,1,1
net.sf.freecol.common.model.FreeColObject.toString(),0,1,1,1
net.sf.freecol.common.model.FreeColObject.toXML(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.FreeColObject.toXML(FreeColXMLWriter, String)",0,1,1,1
"net.sf.freecol.common.model.FreeColObject.toXMLPartial(FreeColXMLWriter, List<String>)",2,1,3,3
"net.sf.freecol.common.model.FreeColObject.toXMLPartial(FreeColXMLWriter, String[])",3,1,3,3
net.sf.freecol.common.model.FreeColObject.writeAttributes(FreeColXMLWriter),2,1,2,2
net.sf.freecol.common.model.FreeColObject.writeChildren(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObject.FreeColSpecObject(Specification),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObject.copyIn(T),2,2,2,3
net.sf.freecol.common.model.FreeColSpecObject.getSpecification(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObject.setSpecification(Specification),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(Specification),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(String),0,1,1,1
"net.sf.freecol.common.model.FreeColSpecObjectType.FreeColSpecObjectType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.addScope(Scope),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.appliesTo(FreeColObject),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.FreeColSpecObjectType.copyScopes(Collection<Scope>),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.getDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.getFeatureContainer(),1,1,1,2
net.sf.freecol.common.model.FreeColSpecObjectType.getIndex(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.getNameKey(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.getScopeList(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.getScopes(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.isAbstractType(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.readChild(FreeColXMLReader),16,1,8,8
net.sf.freecol.common.model.FreeColSpecObjectType.readChildren(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.FreeColSpecObjectType.removeScope(Scope),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.setIndex(int),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.toString(),0,1,1,1
net.sf.freecol.common.model.FreeColSpecObjectType.writeChildren(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.Game.Game(),0,1,1,1
"net.sf.freecol.common.model.Game.Game(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.model.Game.Game(Specification),0,1,1,1
"net.sf.freecol.common.model.Game.addFreeColGameObject(String, FreeColGameObject)",4,4,3,5
net.sf.freecol.common.model.Game.addPlayer(Player),1,1,2,2
net.sf.freecol.common.model.Game.addPlayers(List<Player>),13,1,6,6
net.sf.freecol.common.model.Game.allPlayersReadyToLaunch(),0,1,1,1
net.sf.freecol.common.model.Game.canAddNewPlayer(),0,1,1,1
net.sf.freecol.common.model.Game.changeMap(Map),3,1,3,3
"net.sf.freecol.common.model.Game.checkIntegrity(boolean, LogBuilder)",13,4,9,9
"net.sf.freecol.common.model.Game.checkOwners(Ownable, Player)",5,2,5,6
net.sf.freecol.common.model.Game.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Game.equals(Object),0,1,1,1
net.sf.freecol.common.model.Game.findFreeColLocation(String),1,1,1,2
net.sf.freecol.common.model.Game.getAge(),0,1,1,1
net.sf.freecol.common.model.Game.getAllColonies(Player),0,1,1,1
net.sf.freecol.common.model.Game.getAllColoniesList(Player),0,1,1,1
net.sf.freecol.common.model.Game.getClientPlayer(),1,1,2,2
net.sf.freecol.common.model.Game.getClientUserName(),0,1,1,1
net.sf.freecol.common.model.Game.getCombatModel(),2,2,1,2
net.sf.freecol.common.model.Game.getCurrentPlayer(),0,1,1,1
net.sf.freecol.common.model.Game.getDifficultyOptionGroup(),0,1,1,1
net.sf.freecol.common.model.Game.getFirstPlayer(),0,1,1,1
net.sf.freecol.common.model.Game.getFreeColGameObject(String),4,4,3,5
"net.sf.freecol.common.model.Game.getFreeColGameObject(String, Class<T>)",1,1,1,2
net.sf.freecol.common.model.Game.getFreeColGameObjectIterator(),11,6,2,6
net.sf.freecol.common.model.Game.getFreeColGameObjectList(),1,1,2,2
net.sf.freecol.common.model.Game.getGameOptions(),0,1,1,1
net.sf.freecol.common.model.Game.getInitialActiveUnit(),1,1,2,2
net.sf.freecol.common.model.Game.getInitialActiveUnitId(),0,1,1,1
net.sf.freecol.common.model.Game.getLiveEuropeanPlayerList(Player...),1,1,4,4
net.sf.freecol.common.model.Game.getLiveEuropeanPlayers(Player...),0,1,1,1
net.sf.freecol.common.model.Game.getLiveNativePlayerList(Player...),1,1,4,4
net.sf.freecol.common.model.Game.getLiveNativePlayers(Player...),0,1,1,1
net.sf.freecol.common.model.Game.getLivePlayerList(Player...),1,1,3,3
net.sf.freecol.common.model.Game.getLivePlayers(Player...),0,1,1,1
net.sf.freecol.common.model.Game.getLocationClass(String),0,1,1,1
net.sf.freecol.common.model.Game.getMap(),0,1,1,1
net.sf.freecol.common.model.Game.getMapGeneratorOptions(),0,1,1,1
net.sf.freecol.common.model.Game.getMessageDisplay(ModelMessage),4,1,3,4
net.sf.freecol.common.model.Game.getMessageSource(ModelMessage),0,1,1,1
net.sf.freecol.common.model.Game.getNationOptions(),0,1,1,1
net.sf.freecol.common.model.Game.getNextId(),0,1,1,1
net.sf.freecol.common.model.Game.getNextPlayer(),0,1,1,1
net.sf.freecol.common.model.Game.getPlayer(Predicate<? super Player>),0,1,1,1
net.sf.freecol.common.model.Game.getPlayerAfter(Player),7,4,3,6
net.sf.freecol.common.model.Game.getPlayerByName(String),0,1,1,1
net.sf.freecol.common.model.Game.getPlayerByNation(Nation),0,1,1,1
net.sf.freecol.common.model.Game.getPlayerByNationId(String),0,1,1,1
net.sf.freecol.common.model.Game.getPlayerList(Predicate<? super Player>),0,1,1,1
net.sf.freecol.common.model.Game.getPlayers(Predicate<? super Player>),0,1,1,1
net.sf.freecol.common.model.Game.getSettlementByName(String),0,1,1,1
net.sf.freecol.common.model.Game.getSpanishSuccession(),0,1,1,1
net.sf.freecol.common.model.Game.getSpecification(),0,1,1,1
net.sf.freecol.common.model.Game.getStatistics(),6,1,3,4
net.sf.freecol.common.model.Game.getTurn(),0,1,1,1
net.sf.freecol.common.model.Game.getUUID(),0,1,1,1
net.sf.freecol.common.model.Game.getUnknownEnemy(),0,1,1,1
net.sf.freecol.common.model.Game.getVacantNation(),1,1,2,2
net.sf.freecol.common.model.Game.getVacantNations(),0,1,1,1
net.sf.freecol.common.model.Game.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Game.hashCode(),0,1,1,1
net.sf.freecol.common.model.Game.isInClient(),0,1,1,1
net.sf.freecol.common.model.Game.isInRevengeMode(),0,1,1,1
net.sf.freecol.common.model.Game.isInServer(),0,1,1,1
"net.sf.freecol.common.model.Game.newInstance(Game, Class<T>, boolean)",11,2,6,8
"net.sf.freecol.common.model.Game.notifyOwnerChanged(FreeColGameObject, Player, Player)",1,1,2,2
net.sf.freecol.common.model.Game.notifyRemoveFreeColGameObject(String),1,1,2,2
"net.sf.freecol.common.model.Game.notifySetFreeColGameObject(String, FreeColGameObject)",1,1,2,2
net.sf.freecol.common.model.Game.preGameUpdate(Game),0,1,1,1
net.sf.freecol.common.model.Game.readAttributes(FreeColXMLReader),4,1,2,3
net.sf.freecol.common.model.Game.readChild(FreeColXMLReader),17,8,7,11
net.sf.freecol.common.model.Game.readChildren(FreeColXMLReader),1,1,2,2
"net.sf.freecol.common.model.Game.removeFreeColGameObject(String, String)",5,2,4,5
net.sf.freecol.common.model.Game.removePlayer(Player),3,2,2,4
net.sf.freecol.common.model.Game.setCurrentPlayer(Player),0,1,1,1
"net.sf.freecol.common.model.Game.setFreeColGameObject(String, FreeColGameObject)",3,3,2,4
net.sf.freecol.common.model.Game.setFreeColGameObjectListener(FreeColGameObjectListener),0,1,1,1
net.sf.freecol.common.model.Game.setGameOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.model.Game.setInitialActiveUnitId(String),0,1,1,1
net.sf.freecol.common.model.Game.setMap(Map),0,1,1,1
net.sf.freecol.common.model.Game.setMapGeneratorOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.model.Game.setNationOptions(NationOptions),0,1,1,1
net.sf.freecol.common.model.Game.setPlayers(List<Player>),1,1,2,2
net.sf.freecol.common.model.Game.setSpanishSuccession(boolean),0,1,1,1
net.sf.freecol.common.model.Game.setSpecification(Specification),0,1,1,1
net.sf.freecol.common.model.Game.setTurn(Turn),0,1,1,1
net.sf.freecol.common.model.Game.setUnknownEnemy(Player),0,1,1,1
net.sf.freecol.common.model.Game.sortPlayers(Comparator<Player>),0,1,1,1
"net.sf.freecol.common.model.Game.unserialize(String, Class<T>)",1,1,1,2
"net.sf.freecol.common.model.Game.update(Collection<T>, boolean)",4,2,3,4
"net.sf.freecol.common.model.Game.update(T, Class<T>, boolean)",8,5,5,7
"net.sf.freecol.common.model.Game.update(T, boolean)",1,1,2,2
net.sf.freecol.common.model.Game.updateLocationRef(Location),1,1,2,2
net.sf.freecol.common.model.Game.updateRef(Collection<T>),4,2,3,4
net.sf.freecol.common.model.Game.updateRef(T),1,1,2,2
"net.sf.freecol.common.model.Game.updateRef(T, Class<T>)",1,2,1,2
net.sf.freecol.common.model.Game.writeAttributes(FreeColXMLWriter),6,1,5,5
net.sf.freecol.common.model.Game.writeChildren(FreeColXMLWriter),5,1,6,6
net.sf.freecol.common.model.GameTest.testAddPlayer(),5,1,4,4
net.sf.freecol.common.model.GameTest.testGame(),0,1,1,1
net.sf.freecol.common.model.GameTest.testTurn(),0,1,1,1
"net.sf.freecol.common.model.GoldTradeItem.GoldTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.GoldTradeItem.GoldTradeItem(Game, Player, Player, int)",0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.GoldTradeItem.equals(Object),2,2,3,3
net.sf.freecol.common.model.GoldTradeItem.evaluateFor(Player),3,1,3,3
net.sf.freecol.common.model.GoldTradeItem.getGold(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.isValid(),1,1,2,2
net.sf.freecol.common.model.GoldTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.setGold(int),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.GoldTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Goods.Goods(Game),1,2,1,2
"net.sf.freecol.common.model.Goods.Goods(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.Goods.Goods(Game, Location, GoodsType, int)",3,3,2,4
"net.sf.freecol.common.model.Goods.Goods(Game, String)",0,1,1,1
net.sf.freecol.common.model.Goods.adjustAmount(),4,2,3,4
net.sf.freecol.common.model.Goods.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Goods.equals(Object),2,2,3,3
net.sf.freecol.common.model.Goods.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.Goods.getGame(),0,1,1,1
net.sf.freecol.common.model.Goods.getLocation(),0,1,1,1
net.sf.freecol.common.model.Goods.getOwner(),1,1,2,2
net.sf.freecol.common.model.Goods.getSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.Goods.getSpecification(),0,1,1,1
net.sf.freecol.common.model.Goods.getTile(),1,1,2,2
net.sf.freecol.common.model.Goods.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Goods.hashCode(),0,1,1,1
net.sf.freecol.common.model.Goods.isInEurope(),2,1,3,3
net.sf.freecol.common.model.Goods.readAttributes(FreeColXMLReader),2,2,2,2
net.sf.freecol.common.model.Goods.setGame(Game),0,1,1,1
net.sf.freecol.common.model.Goods.setLocation(Location),0,1,1,1
net.sf.freecol.common.model.Goods.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Goods.setSpecification(Specification),0,1,1,1
net.sf.freecol.common.model.Goods.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.GoodsContainer.GoodsContainer(Game, Location)",0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.GoodsContainer(Game, String)",0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.addGoods(GoodsType, int)",3,2,3,3
net.sf.freecol.common.model.GoodsContainer.addGoods(T),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.clearContainers(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.contains(T),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.copyIn(T),2,2,2,3
net.sf.freecol.common.model.GoodsContainer.disposeResources(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.fireChanges(),3,1,3,3
net.sf.freecol.common.model.GoodsContainer.getCompactGoodsList(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.getGoodsCount(GoodsType),1,1,1,2
net.sf.freecol.common.model.GoodsContainer.getGoodsList(),5,1,2,3
net.sf.freecol.common.model.GoodsContainer.getOldGoodsCount(GoodsType),1,1,1,2
net.sf.freecol.common.model.GoodsContainer.getOldStoredGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.getOwner(),1,1,2,2
net.sf.freecol.common.model.GoodsContainer.getParent(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.getSpaceTaken(),2,1,1,2
net.sf.freecol.common.model.GoodsContainer.getStoredGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.hasChanged(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.hasReachedCapacity(int),1,1,3,3
"net.sf.freecol.common.model.GoodsContainer.moveGoods(GoodsContainer, GoodsType, int, GoodsContainer)",2,1,3,3
net.sf.freecol.common.model.GoodsContainer.readChild(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.GoodsContainer.readChildren(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.readStorage(FreeColXMLReader, Map<GoodsType, Integer>)",4,3,3,3
net.sf.freecol.common.model.GoodsContainer.removeAbove(int),2,2,4,4
net.sf.freecol.common.model.GoodsContainer.removeAll(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.removeGoods(GoodsType),0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.removeGoods(GoodsType, int)",3,2,2,3
net.sf.freecol.common.model.GoodsContainer.removeGoods(T),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.restoreState(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.saveState(),0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.setAmount(GoodsType, int)",2,1,2,2
net.sf.freecol.common.model.GoodsContainer.setLocation(Location),1,2,1,2
"net.sf.freecol.common.model.GoodsContainer.setOldStoredGoods(Map<GoodsType, Integer>)",0,1,1,1
net.sf.freecol.common.model.GoodsContainer.setOwner(Player),0,1,1,1
"net.sf.freecol.common.model.GoodsContainer.setStoredGoods(Map<GoodsType, Integer>)",0,1,1,1
net.sf.freecol.common.model.GoodsContainer.toString(),0,1,1,1
net.sf.freecol.common.model.GoodsContainer.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.GoodsContainer.writeStorage(FreeColXMLWriter, String, Map<GoodsType, Integer>)",2,2,2,3
net.sf.freecol.common.model.GoodsContainerTest.testContainer(),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.GoodsLocation(Game),0,1,1,1
"net.sf.freecol.common.model.GoodsLocation.GoodsLocation(Game, String)",0,1,1,1
net.sf.freecol.common.model.GoodsLocation.add(Locatable),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.addGoods(AbstractGoods),0,1,1,1
"net.sf.freecol.common.model.GoodsLocation.addGoods(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.GoodsLocation.addGoods(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.contains(Locatable),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.containsGoods(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.copyIn(T),2,2,2,3
net.sf.freecol.common.model.GoodsLocation.getCompactGoodsList(),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.getDisposables(),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.getGoodsContainer(),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.getGoodsCount(GoodsType),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.getGoodsList(),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.getNoAddReason(Locatable),6,3,3,4
"net.sf.freecol.common.model.GoodsLocation.moveGoods(GoodsLocation, GoodsType, int, GoodsLocation)",2,1,3,3
net.sf.freecol.common.model.GoodsLocation.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.GoodsLocation.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.remove(Locatable),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.removeAll(),1,1,2,2
net.sf.freecol.common.model.GoodsLocation.removeGoods(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.removeGoods(GoodsType),0,1,1,1
"net.sf.freecol.common.model.GoodsLocation.removeGoods(GoodsType, int)",1,2,1,2
net.sf.freecol.common.model.GoodsLocation.setGoodsContainer(GoodsContainer),0,1,1,1
net.sf.freecol.common.model.GoodsLocation.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.GoodsTest.dutch(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testAdjustAmount(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testBuildingMaterials(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testGetInputType(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testGetName(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testGetOutputType(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testGetTakeSpace(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testGoodsGameLocationIntInt(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testIsFarmedGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testMilitaryGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testProductionChain(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testSetGetAmount(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testSetOwner(),1,1,1,2
net.sf.freecol.common.model.GoodsTest.testToString(),0,1,1,1
net.sf.freecol.common.model.GoodsTest.testTradeGoods(),0,1,1,1
"net.sf.freecol.common.model.GoodsTradeItem.GoodsTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.GoodsTradeItem.GoodsTradeItem(Game, Player, Player, Goods)",0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.copyIn(T),5,4,4,5
net.sf.freecol.common.model.GoodsTradeItem.equals(Object),2,2,3,3
net.sf.freecol.common.model.GoodsTradeItem.evaluateFor(Player),9,1,5,5
net.sf.freecol.common.model.GoodsTradeItem.getGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.isValid(),1,1,5,5
net.sf.freecol.common.model.GoodsTradeItem.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.GoodsTradeItem.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.setGoods(Goods),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.GoodsTradeItem.writeChildren(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.GoodsType.GoodsType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.GoodsType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.GoodsType.getBreedingNumber(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getEquivalentTypes(),1,1,2,2
net.sf.freecol.common.model.GoodsType.getInitialAmount(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getInitialBuyPrice(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getInitialSellPrice(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getInputType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getLabel(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getLowProductionThreshold(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getMilitary(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getOutputType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getPrice(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getPriceDifference(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getProductionChain(),1,1,2,2
net.sf.freecol.common.model.GoodsType.getProductionWeight(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getRank(),29,1,8,9
net.sf.freecol.common.model.GoodsType.getStoredAs(),1,1,1,2
net.sf.freecol.common.model.GoodsType.getWorkingAsKey(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.GoodsType.getZeroProductionFactor(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isBreedable(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isBuildingMaterial(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isFarmed(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isFoodType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isImmigrationType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isLibertyType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isNewWorldGoodsType(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isNewWorldLuxuryType(),1,1,2,2
net.sf.freecol.common.model.GoodsType.isRawBuildingMaterial(),4,4,2,4
net.sf.freecol.common.model.GoodsType.isRawMaterial(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isRawMaterialForUnstorableBuildingMaterial(),5,4,3,5
net.sf.freecol.common.model.GoodsType.isRefined(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isStorable(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isStoredAs(),0,1,1,1
net.sf.freecol.common.model.GoodsType.isTradeGoods(),0,1,1,1
net.sf.freecol.common.model.GoodsType.limitIgnored(),0,1,1,1
net.sf.freecol.common.model.GoodsType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.GoodsType.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.GoodsType.setDerivedAttributes(Specification),4,1,1,4
net.sf.freecol.common.model.GoodsType.setMilitary(),0,1,1,1
net.sf.freecol.common.model.GoodsType.setPrice(int),0,1,1,1
net.sf.freecol.common.model.GoodsType.writeAttributes(FreeColXMLWriter),7,1,7,8
net.sf.freecol.common.model.GoodsType.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.HighScore.HighScore(),0,1,1,1
net.sf.freecol.common.model.HighScore.HighScore(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.HighScore.HighScore(Player),1,1,2,2
net.sf.freecol.common.model.HighScore.ScoreLevel.ScoreLevel(int),0,1,1,1
net.sf.freecol.common.model.HighScore.ScoreLevel.getMinimumScore(),0,1,1,1
"net.sf.freecol.common.model.HighScore.checkHighScore(HighScore, List<HighScore>)",12,8,5,9
net.sf.freecol.common.model.HighScore.copyIn(T),2,2,2,3
net.sf.freecol.common.model.HighScore.getColonyCount(),0,1,1,1
net.sf.freecol.common.model.HighScore.getDate(),0,1,1,1
net.sf.freecol.common.model.HighScore.getDateString(),0,1,1,1
net.sf.freecol.common.model.HighScore.getDifficulty(),0,1,1,1
net.sf.freecol.common.model.HighScore.getGameUUID(),0,1,1,1
net.sf.freecol.common.model.HighScore.getIndependenceTurn(),0,1,1,1
net.sf.freecol.common.model.HighScore.getLevel(),0,1,1,1
net.sf.freecol.common.model.HighScore.getNationId(),0,1,1,1
net.sf.freecol.common.model.HighScore.getNationName(),0,1,1,1
net.sf.freecol.common.model.HighScore.getNationTypeId(),0,1,1,1
net.sf.freecol.common.model.HighScore.getNewLandName(),0,1,1,1
net.sf.freecol.common.model.HighScore.getOldNationNameKey(),0,1,1,1
net.sf.freecol.common.model.HighScore.getPlayerName(),0,1,1,1
net.sf.freecol.common.model.HighScore.getRetirementTurn(),0,1,1,1
net.sf.freecol.common.model.HighScore.getScore(),0,1,1,1
net.sf.freecol.common.model.HighScore.getUnitCount(),0,1,1,1
net.sf.freecol.common.model.HighScore.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.HighScore.loadHighScores(),11,2,8,8
net.sf.freecol.common.model.HighScore.newHighScore(Player),3,2,2,3
net.sf.freecol.common.model.HighScore.readAttributes(FreeColXMLReader),10,1,4,9
net.sf.freecol.common.model.HighScore.saveHighScores(List<HighScore>),4,2,4,5
net.sf.freecol.common.model.HighScore.tidyScores(List<HighScore>),1,1,2,2
net.sf.freecol.common.model.HighScore.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.HighScoreTest.testAddHighScore(),0,1,1,1
net.sf.freecol.common.model.HighSeas.HighSeas(Game),0,1,1,1
"net.sf.freecol.common.model.HighSeas.HighSeas(Game, String)",0,1,1,1
net.sf.freecol.common.model.HighSeas.addDestination(Location),4,1,3,3
net.sf.freecol.common.model.HighSeas.copyIn(T),3,2,3,4
net.sf.freecol.common.model.HighSeas.destinationsToString(),0,1,1,1
net.sf.freecol.common.model.HighSeas.getDestinations(),0,1,1,1
net.sf.freecol.common.model.HighSeas.getLinkTarget(Player),0,1,1,1
net.sf.freecol.common.model.HighSeas.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.HighSeas.getNoAddReason(Locatable),2,1,2,3
net.sf.freecol.common.model.HighSeas.getRank(),0,1,1,1
net.sf.freecol.common.model.HighSeas.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.HighSeas.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.HighSeas.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.HighSeas.removeDestination(Location),0,1,1,1
net.sf.freecol.common.model.HighSeas.setDestinations(List<Location>),0,1,1,1
net.sf.freecol.common.model.HighSeas.toShortString(),0,1,1,1
net.sf.freecol.common.model.HighSeas.toString(),0,1,1,1
net.sf.freecol.common.model.HighSeas.up(),0,1,1,1
net.sf.freecol.common.model.HighSeas.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.HighSeasTest.test(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.HistoryEvent(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.HistoryEvent(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.HistoryEvent.HistoryEvent(Turn, HistoryEventType, Player)",1,1,2,2
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getKey(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.HistoryEventType.getNameKey(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.copyIn(T),2,2,2,3
net.sf.freecol.common.model.HistoryEvent.equals(Object),3,3,6,7
net.sf.freecol.common.model.HistoryEvent.getEventType(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.getEventTypeFromStance(Stance),1,5,1,5
net.sf.freecol.common.model.HistoryEvent.getPlayerId(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.getScore(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.getTurn(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.hashCode(),1,1,2,2
net.sf.freecol.common.model.HistoryEvent.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.setPlayerId(String),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.setScore(int),0,1,1,1
net.sf.freecol.common.model.HistoryEvent.toString(),1,1,2,2
net.sf.freecol.common.model.HistoryEvent.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.HitpointsCombatModel.HitpointsCombatModel(),0,1,1,1
"net.sf.freecol.common.model.HitpointsCombatModel.generateAttackResult(Random, FreeColGameObject, FreeColGameObject)",21,9,9,10
"net.sf.freecol.common.model.InciteTradeItem.InciteTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.InciteTradeItem.InciteTradeItem(Game, Player, Player, Player)",0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.InciteTradeItem.equals(Object),2,2,2,3
net.sf.freecol.common.model.InciteTradeItem.evaluateFor(Player),1,3,1,3
net.sf.freecol.common.model.InciteTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.getVictim(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.isValid(),1,1,3,3
net.sf.freecol.common.model.InciteTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.InciteTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.IndianNationType.IndianNationType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.IndianNationType.addRegion(String),1,1,1,2
"net.sf.freecol.common.model.IndianNationType.addSkill(UnitType, int)",1,1,1,2
net.sf.freecol.common.model.IndianNationType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.IndianNationType.generateSkillsForTile(Tile),1,1,2,2
net.sf.freecol.common.model.IndianNationType.getRegions(),1,1,2,2
net.sf.freecol.common.model.IndianNationType.getSettlementTypeKey(boolean),1,1,1,2
net.sf.freecol.common.model.IndianNationType.getSkills(),1,1,2,2
net.sf.freecol.common.model.IndianNationType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.IndianNationType.isEuropean(),0,1,1,1
net.sf.freecol.common.model.IndianNationType.isIndian(),0,1,1,1
net.sf.freecol.common.model.IndianNationType.isREF(),0,1,1,1
net.sf.freecol.common.model.IndianNationType.readChild(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.IndianNationType.readChildren(FreeColXMLReader),14,1,6,9
net.sf.freecol.common.model.IndianNationType.setRegions(List<String>),2,1,2,2
net.sf.freecol.common.model.IndianNationType.setSkills(List<RandomChoice<UnitType>>),0,1,1,1
net.sf.freecol.common.model.IndianNationType.writeChildren(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.common.model.IndianSettlement.IndianSettlement(Game, Player, String, Tile)",0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.IndianSettlement(Game, String)",0,1,1,1
net.sf.freecol.common.model.IndianSettlement.add(Locatable),4,1,3,4
net.sf.freecol.common.model.IndianSettlement.addOwnedUnit(Unit),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.addRandomGoods(Random),5,1,4,4
net.sf.freecol.common.model.IndianSettlement.allowContact(Unit),1,1,3,3
"net.sf.freecol.common.model.IndianSettlement.calculateSettlementValue(int, Unit)",1,1,2,2
"net.sf.freecol.common.model.IndianSettlement.checkIntegrity(boolean, LogBuilder)",11,1,5,5
net.sf.freecol.common.model.IndianSettlement.clearAlarm(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.clearContactLevels(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.clearOwnedUnits(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.copyIn(T),3,2,3,4
net.sf.freecol.common.model.IndianSettlement.disposeResources(),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.emptyWantedGoods(),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.getAlarm(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getAlarm(Player),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getAlarmLevelKey(Player),3,1,3,3
net.sf.freecol.common.model.IndianSettlement.getAlarmLevelLabel(Player),3,1,3,3
net.sf.freecol.common.model.IndianSettlement.getAvailableGoodsCount(GoodsType),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getContactLevel(Player),1,1,1,2
net.sf.freecol.common.model.IndianSettlement.getConvertProgress(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getDefenceRatio(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getDefendingUnit(Unit),3,1,2,3
"net.sf.freecol.common.model.IndianSettlement.getExportAmount(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getGoodsCapacity(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getGoodsForSale(),0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.getImportAmount(GoodsType, int)",1,2,1,2
net.sf.freecol.common.model.IndianSettlement.getIndianSettlement(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getLastTribute(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getLearnableSkill(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getLearnableSkillLabel(boolean),3,1,3,3
net.sf.freecol.common.model.IndianSettlement.getLocationLabelFor(Player),2,1,3,3
net.sf.freecol.common.model.IndianSettlement.getLocationName(TradeLocation),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getMaximumProduction(GoodsType),1,1,2,2
"net.sf.freecol.common.model.IndianSettlement.getMilitaryGoodsPriceToBuy(GoodsType, int)",2,2,2,3
net.sf.freecol.common.model.IndianSettlement.getMissionary(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getMissionaryLineOfSight(),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.getMissionaryVisibleTiles(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getMostHated(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getMostHatedLabel(boolean),3,1,3,3
"net.sf.freecol.common.model.IndianSettlement.getNormalGoodsPriceToBuy(GoodsType, int)",15,1,4,10
net.sf.freecol.common.model.IndianSettlement.getOwnedUnitList(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getPlunderRange(Unit),0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.getPriceToBuy(GoodsType, int)",9,2,5,7
net.sf.freecol.common.model.IndianSettlement.getPriceToBuy(T),0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.getPriceToSell(GoodsType, int)",7,2,4,6
net.sf.freecol.common.model.IndianSettlement.getPriceToSell(T),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getRandomGift(Random),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getRequiredDefenders(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getSellGoods(Unit),11,4,3,7
net.sf.freecol.common.model.IndianSettlement.getSonsOfLiberty(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getTotalProductionOf(GoodsType),7,3,6,7
net.sf.freecol.common.model.IndianSettlement.getUpkeep(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getWantedGoods(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.getWantedGoods(int),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.getWantedGoodsAmount(GoodsType),5,5,6,7
net.sf.freecol.common.model.IndianSettlement.getWantedGoodsCount(),0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.getWantedGoodsLabel(int, Player)",10,1,6,6
net.sf.freecol.common.model.IndianSettlement.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.goodsToMake(),1,1,6,6
net.sf.freecol.common.model.IndianSettlement.hasAnyScouted(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.hasContacted(Player),2,1,3,3
net.sf.freecol.common.model.IndianSettlement.hasMissionary(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.hasMissionary(Player),1,1,3,3
net.sf.freecol.common.model.IndianSettlement.hasScouted(Player),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.hasVisited(Player),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.initializeAlarm(Player),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.invalidateCache(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.isBadlyDefended(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.IndianSettlement.readChild(FreeColXMLReader),5,1,5,5
net.sf.freecol.common.model.IndianSettlement.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.removeOwnedUnit(Unit),0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.setAlarm(Map<Player, Tension>)",0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.setAlarm(Player, Tension)",0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.setContactLevel(Player, ContactLevel)",0,1,1,1
"net.sf.freecol.common.model.IndianSettlement.setContactLevels(Map<Player, ContactLevel>)",0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setContacted(Player),1,2,2,2
net.sf.freecol.common.model.IndianSettlement.setConvertProgress(int),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setGoodsForSale(List<Goods>),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setLastTribute(int),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setLearnableSkill(UnitType),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setMissionary(Unit),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setMostHated(Player),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setOwnedUnitList(List<Unit>),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.setScouted(Player),3,2,3,3
net.sf.freecol.common.model.IndianSettlement.setVisited(Player),3,2,3,3
net.sf.freecol.common.model.IndianSettlement.setWantedGoods(List<GoodsType>),3,1,3,3
"net.sf.freecol.common.model.IndianSettlement.setWantedGoods(int, GoodsType)",1,1,2,2
net.sf.freecol.common.model.IndianSettlement.toShortString(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.toString(),2,1,2,3
net.sf.freecol.common.model.IndianSettlement.tradeGoodsWithSettlement(IndianSettlement),3,3,2,3
net.sf.freecol.common.model.IndianSettlement.up(),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.updateWantedGoods(),7,4,4,6
net.sf.freecol.common.model.IndianSettlement.validWantedGoodsIndex(int),1,1,1,2
net.sf.freecol.common.model.IndianSettlement.willSell(GoodsType),0,1,1,1
net.sf.freecol.common.model.IndianSettlement.worthScouting(Player),1,3,2,3
net.sf.freecol.common.model.IndianSettlement.writeAttributes(FreeColXMLWriter),13,1,8,10
net.sf.freecol.common.model.IndianSettlement.writeChildren(FreeColXMLWriter),13,1,8,8
net.sf.freecol.common.model.IndianSettlementTest.testAutomaticEquipBraves(),0,1,1,1
net.sf.freecol.common.model.IndianSettlementTest.testSettlementDoesNotOwnWaterTiles(),0,1,1,1
net.sf.freecol.common.model.IndianSettlementTest.testTradeGoodsWithSetlement(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testBolivar(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testBrebeuf(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testBrewster(),10,1,6,6
net.sf.freecol.common.model.IndividualFatherTest.testCortes(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testDeLasCasas(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testDeWitt(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testJefferson(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testMinuit(),1,1,2,2
net.sf.freecol.common.model.IndividualFatherTest.testPaine(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testRevere(),0,1,1,1
net.sf.freecol.common.model.IndividualFatherTest.testStuyvesant(),0,1,1,1
"net.sf.freecol.common.model.LandMap.LandMap(Map, RandomIntCache)",9,1,4,5
"net.sf.freecol.common.model.LandMap.LandMap(OptionGroup, RandomIntCache)",0,1,1,1
"net.sf.freecol.common.model.LandMap.LandMap(int, int, RandomIntCache)",0,1,1,1
"net.sf.freecol.common.model.LandMap.addLandMass(int, int, int, int, int)",20,1,11,13
net.sf.freecol.common.model.LandMap.addPolarRegions(),5,1,4,4
net.sf.freecol.common.model.LandMap.cleanMap(),6,1,3,4
"net.sf.freecol.common.model.LandMap.createClassicLandMap(int, int)",6,4,3,4
"net.sf.freecol.common.model.LandMap.generate(int, int, int)",7,1,4,8
net.sf.freecol.common.model.LandMap.getHeight(),0,1,1,1
net.sf.freecol.common.model.LandMap.getWidth(),0,1,1,1
"net.sf.freecol.common.model.LandMap.growLand(int, int, int)",2,2,2,3
"net.sf.freecol.common.model.LandMap.hasAdjacentLand(int, int)",0,1,1,1
net.sf.freecol.common.model.LandMap.hasLand(),6,4,1,4
"net.sf.freecol.common.model.LandMap.isLand(int, int)",1,1,1,2
"net.sf.freecol.common.model.LandMap.isValid(int, int)",1,1,4,4
"net.sf.freecol.common.model.LandMap.newPositions(Position, int)",1,1,4,4
"net.sf.freecol.common.model.LandMap.setLand(int, int)",1,2,1,2
"net.sf.freecol.common.model.LandMap.setLand(int, int, int)",4,2,3,4
net.sf.freecol.common.model.LastSale.LastSale(),0,1,1,1
net.sf.freecol.common.model.LastSale.LastSale(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.LastSale.LastSale(Location, GoodsType, Turn, int)",0,1,1,1
"net.sf.freecol.common.model.LastSale.LastSale(String, Turn, int)",0,1,1,1
net.sf.freecol.common.model.LastSale.copyIn(T),2,2,2,3
net.sf.freecol.common.model.LastSale.getPrice(),0,1,1,1
net.sf.freecol.common.model.LastSale.getWhen(),0,1,1,1
net.sf.freecol.common.model.LastSale.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.model.LastSale.makeKey(Location, GoodsType)",0,1,1,1
net.sf.freecol.common.model.LastSale.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.LastSale.toString(),0,1,1,1
net.sf.freecol.common.model.LastSale.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.Limit.Limit(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.Limit.Limit(Specification),0,1,1,1
"net.sf.freecol.common.model.Limit.Limit(String, Operand, Operator, Operand)",0,1,1,1
net.sf.freecol.common.model.Limit.appliesTo(FreeColObject),0,1,1,1
net.sf.freecol.common.model.Limit.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Limit.evaluate(Game),2,1,1,3
"net.sf.freecol.common.model.Limit.evaluate(Integer, Integer)",3,7,1,8
net.sf.freecol.common.model.Limit.evaluate(Player),2,1,1,5
net.sf.freecol.common.model.Limit.evaluate(Settlement),2,1,1,7
net.sf.freecol.common.model.Limit.getLeftHandSide(),0,1,1,1
net.sf.freecol.common.model.Limit.getOperator(),0,1,1,1
net.sf.freecol.common.model.Limit.getRightHandSide(),0,1,1,1
net.sf.freecol.common.model.Limit.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Limit.hasOperandType(OperandType),1,1,2,2
net.sf.freecol.common.model.Limit.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Limit.readChild(FreeColXMLReader),5,1,5,5
net.sf.freecol.common.model.Limit.setLeftHandSide(Operand),0,1,1,1
net.sf.freecol.common.model.Limit.setOperator(Operator),0,1,1,1
net.sf.freecol.common.model.Limit.setRightHandSide(Operand),0,1,1,1
net.sf.freecol.common.model.Limit.toString(),0,1,1,1
net.sf.freecol.common.model.Limit.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Limit.writeChildren(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.LimitTest.testIndependenceLimits(),0,1,1,1
net.sf.freecol.common.model.LimitTest.testOperand(),0,1,1,1
net.sf.freecol.common.model.LimitTest.testSuccessionLimits(),0,1,1,1
net.sf.freecol.common.model.LimitTest.testWagonTrainLimit(),0,1,1,1
net.sf.freecol.common.model.Location.getLocationImageKey(),0,1,1,1
net.sf.freecol.common.model.Location.rankOf(Location),1,1,2,2
net.sf.freecol.common.model.Location.upLoc(Location),1,1,2,2
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, String)",0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, Tile)",0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.LostCityRumour(Game, Tile, RumourType, String)",0,1,1,1
net.sf.freecol.common.model.LostCityRumour.RumourType.getAlternateDescriptionKey(String),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.RumourType.getDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.RumourType.getKey(),0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.applyBonus(GoodsType, UnitType, int)",0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.canProduce(GoodsType, UnitType)",0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.checkIntegrity(boolean, LogBuilder)",1,1,2,2
"net.sf.freecol.common.model.LostCityRumour.chooseType(Unit, Random)",22,1,15,16
net.sf.freecol.common.model.LostCityRumour.copyIn(T),2,2,2,3
net.sf.freecol.common.model.LostCityRumour.getLayer(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.getName(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.getNameKey(),0,1,1,1
"net.sf.freecol.common.model.LostCityRumour.getNothingMessage(Player, boolean, Random)",4,1,4,4
"net.sf.freecol.common.model.LostCityRumour.getProductionModifiers(GoodsType, UnitType)",0,1,1,1
net.sf.freecol.common.model.LostCityRumour.getType(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.getZIndex(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.isComplete(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.isNatural(),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.isTileTypeAllowed(TileType),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.setType(RumourType),0,1,1,1
net.sf.freecol.common.model.LostCityRumour.writeAttributes(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.common.model.Map.CircleIterator.CircleIterator(Tile, boolean, int)",8,2,5,7
net.sf.freecol.common.model.Map.CircleIterator.getCurrentRadius(),0,1,1,1
net.sf.freecol.common.model.Map.CircleIterator.hasNext(),1,1,1,2
net.sf.freecol.common.model.Map.CircleIterator.next(),1,2,1,2
net.sf.freecol.common.model.Map.CircleIterator.nextTile(),12,5,5,9
net.sf.freecol.common.model.Map.CircleIterator.remove(),0,1,1,1
"net.sf.freecol.common.model.Map.Map(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.Map.Map(Game, String)",0,1,1,1
"net.sf.freecol.common.model.Map.Map(Game, int, int)",0,1,1,1
"net.sf.freecol.common.model.Map.MoveCandidate.MoveCandidate(Unit, PathNode, Location, int, int, boolean, CostDecider)",7,1,5,5
"net.sf.freecol.common.model.Map.MoveCandidate.add(HashMap<String, PathNode>, PriorityQueue<PathNode>, HashMap<String, Integer>, SearchHeuristic)",1,1,2,2
net.sf.freecol.common.model.Map.MoveCandidate.canImprove(PathNode),1,1,2,2
net.sf.freecol.common.model.Map.MoveCandidate.embarkUnit(Unit),0,1,1,1
net.sf.freecol.common.model.Map.MoveCandidate.getCost(),0,1,1,1
"net.sf.freecol.common.model.Map.MoveCandidate.improve(HashMap<String, PathNode>, PriorityQueue<PathNode>, HashMap<String, Integer>, SearchHeuristic)",1,1,2,2
net.sf.freecol.common.model.Map.MoveCandidate.toString(),0,1,1,1
"net.sf.freecol.common.model.Map.Position.Position(Position, Direction)",1,1,2,2
net.sf.freecol.common.model.Map.Position.Position(Tile),0,1,1,1
"net.sf.freecol.common.model.Map.Position.Position(int, int)",0,1,1,1
net.sf.freecol.common.model.Map.Position.equals(Object),3,3,1,4
net.sf.freecol.common.model.Map.Position.getDirection(Position),0,1,1,1
net.sf.freecol.common.model.Map.Position.getDistance(Position),0,1,1,1
net.sf.freecol.common.model.Map.Position.getX(),0,1,1,1
"net.sf.freecol.common.model.Map.Position.getXYDistance(int, int, int, int)",4,1,1,7
net.sf.freecol.common.model.Map.Position.getY(),0,1,1,1
net.sf.freecol.common.model.Map.Position.hashCode(),0,1,1,1
"net.sf.freecol.common.model.Map.Position.isValid(int, int)",0,1,1,1
net.sf.freecol.common.model.Map.Position.toString(),0,1,1,1
net.sf.freecol.common.model.Map.add(Locatable),1,2,1,2
net.sf.freecol.common.model.Map.addRegion(Region),0,1,1,1
net.sf.freecol.common.model.Map.calculateLatitudePerRow(),0,1,1,1
net.sf.freecol.common.model.Map.canAdd(Locatable),0,1,1,1
"net.sf.freecol.common.model.Map.checkIntegrity(boolean, LogBuilder)",3,1,3,3
net.sf.freecol.common.model.Map.clearRegions(),0,1,1,1
"net.sf.freecol.common.model.Map.collectStartingTiles(List<Tile>, List<Tile>)",25,8,8,10
net.sf.freecol.common.model.Map.contains(Locatable),1,1,3,3
net.sf.freecol.common.model.Map.copyIn(T),4,3,3,5
"net.sf.freecol.common.model.Map.findMapPath(Unit, Tile, Tile, Unit, CostDecider, LogBuilder)",19,1,21,23
"net.sf.freecol.common.model.Map.findPath(Unit, Location, Location, Unit, CostDecider, LogBuilder)",44,6,25,32
"net.sf.freecol.common.model.Map.findRealEnd(Unit, Location)",8,7,7,7
"net.sf.freecol.common.model.Map.finishPath(PathNode, Unit, LogBuilder)",11,1,7,7
net.sf.freecol.common.model.Map.fixupRegions(),7,1,7,7
"net.sf.freecol.common.model.Map.floodFill(int, int, int, boolean[][])",32,5,8,9
"net.sf.freecol.common.model.Map.floodFillBool(boolean[][], int, int)",0,1,1,1
"net.sf.freecol.common.model.Map.floodFillBool(boolean[][], int, int, int)",11,4,4,7
net.sf.freecol.common.model.Map.forEachTile(Consumer<Tile>),1,1,2,2
"net.sf.freecol.common.model.Map.forEachTile(Predicate<Tile>, Consumer<Tile>)",3,1,3,3
"net.sf.freecol.common.model.Map.forSubMap(int, int, int, int, Consumer<Tile>)",1,1,2,2
"net.sf.freecol.common.model.Map.getAdjacentTile(Tile, Direction)",0,1,1,1
"net.sf.freecol.common.model.Map.getAdjacentTile(int, int, Direction)",0,1,1,1
"net.sf.freecol.common.model.Map.getBestEntryPath(Unit, Tile, Unit, CostDecider)",1,1,2,2
"net.sf.freecol.common.model.Map.getBestEntryTile(Unit, Tile, Unit, CostDecider)",1,1,2,2
"net.sf.freecol.common.model.Map.getCircleIterator(Tile, boolean, int)",0,1,1,1
"net.sf.freecol.common.model.Map.getCircleTiles(Tile, boolean, int)",0,1,1,1
"net.sf.freecol.common.model.Map.getClosestTile(Tile, Collection<Tile>)",0,1,1,1
net.sf.freecol.common.model.Map.getColony(),0,1,1,1
"net.sf.freecol.common.model.Map.getDirection(Tile, Tile)",2,1,2,3
"net.sf.freecol.common.model.Map.getDistance(Tile, Tile)",0,1,1,1
net.sf.freecol.common.model.Map.getFixedRegions(),3,1,3,3
net.sf.freecol.common.model.Map.getGoodsContainer(),0,1,1,1
net.sf.freecol.common.model.Map.getHeight(),0,1,1,1
net.sf.freecol.common.model.Map.getIndianSettlement(),0,1,1,1
"net.sf.freecol.common.model.Map.getLandWithinDistance(int, int, int)",3,3,2,3
net.sf.freecol.common.model.Map.getLatitude(int),0,1,1,1
net.sf.freecol.common.model.Map.getLatitudePerRow(),0,1,1,1
net.sf.freecol.common.model.Map.getLayer(),0,1,1,1
net.sf.freecol.common.model.Map.getLocationImageKey(),0,1,1,1
net.sf.freecol.common.model.Map.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.Map.getLocationLabelFor(Player),1,1,2,2
net.sf.freecol.common.model.Map.getManhattenHeuristic(Tile),0,1,1,1
net.sf.freecol.common.model.Map.getMaximumLatitude(),0,1,1,1
net.sf.freecol.common.model.Map.getMinimumLatitude(),0,1,1,1
net.sf.freecol.common.model.Map.getRandomLandTile(Random),5,3,2,5
net.sf.freecol.common.model.Map.getRank(),0,1,1,1
net.sf.freecol.common.model.Map.getRegionByKey(String),1,1,2,2
net.sf.freecol.common.model.Map.getRegionByName(String),1,1,2,2
net.sf.freecol.common.model.Map.getRegions(),0,1,1,1
"net.sf.freecol.common.model.Map.getRoughDirection(Tile, Tile)",3,2,1,4
net.sf.freecol.common.model.Map.getRow(int),0,1,1,1
net.sf.freecol.common.model.Map.getSearchTrace(),0,1,1,1
net.sf.freecol.common.model.Map.getSettlement(),0,1,1,1
net.sf.freecol.common.model.Map.getShuffledTiles(Random),0,1,1,1
net.sf.freecol.common.model.Map.getTile(),0,1,1,1
net.sf.freecol.common.model.Map.getTile(Position),0,1,1,1
"net.sf.freecol.common.model.Map.getTile(int, int)",1,2,1,2
net.sf.freecol.common.model.Map.getTileList(Predicate<Tile>),3,1,3,3
net.sf.freecol.common.model.Map.getTileSet(Predicate<Tile>),3,1,3,3
net.sf.freecol.common.model.Map.getUnitCount(),0,1,1,1
net.sf.freecol.common.model.Map.getUnitList(),0,1,1,1
net.sf.freecol.common.model.Map.getUnits(),0,1,1,1
net.sf.freecol.common.model.Map.getWidth(),0,1,1,1
net.sf.freecol.common.model.Map.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.model.Map.importTile(Tile, int, int, Layer)",2,1,3,3
"net.sf.freecol.common.model.Map.inBox(int, int, int, int)",1,1,1,4
net.sf.freecol.common.model.Map.initializeTraceSearch(),0,1,1,1
net.sf.freecol.common.model.Map.isPolar(Tile),1,1,2,2
"net.sf.freecol.common.model.Map.isSameContiguity(Location, Location)",8,1,5,6
"net.sf.freecol.common.model.Map.isSameLocation(Location, Location)",7,1,4,5
net.sf.freecol.common.model.Map.isValid(Position),0,1,1,1
"net.sf.freecol.common.model.Map.isValid(int, int)",0,1,1,1
"net.sf.freecol.common.model.Map.populateTiles(BiFunction<Integer, Integer, Tile>)",6,4,3,4
net.sf.freecol.common.model.Map.readAttributes(FreeColXMLReader),1,2,1,2
net.sf.freecol.common.model.Map.readChild(FreeColXMLReader),5,1,4,4
net.sf.freecol.common.model.Map.readChildren(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Map.remove(Locatable),3,3,3,3
net.sf.freecol.common.model.Map.resetContiguity(),12,1,6,7
"net.sf.freecol.common.model.Map.resetHighSeas(int, int)",43,5,15,28
net.sf.freecol.common.model.Map.resetHighSeasCount(),32,1,16,16
net.sf.freecol.common.model.Map.resetLayers(),25,1,3,12
"net.sf.freecol.common.model.Map.scale(int, int)",0,1,1,1
"net.sf.freecol.common.model.Map.search(Unit, Location, GoalDecider, CostDecider, int, Unit, LogBuilder)",9,1,5,7
"net.sf.freecol.common.model.Map.searchCircle(Tile, GoalDecider, int)",7,4,4,8
"net.sf.freecol.common.model.Map.searchMap(Unit, Tile, GoalDecider, CostDecider, int, Unit, SearchHeuristic, ...)",240,18,54,77
net.sf.freecol.common.model.Map.setLayer(Layer),0,1,1,1
net.sf.freecol.common.model.Map.setMaximumLatitude(int),0,1,1,1
net.sf.freecol.common.model.Map.setMinimumLatitude(int),0,1,1,1
net.sf.freecol.common.model.Map.setSearchTrace(boolean),0,1,1,1
"net.sf.freecol.common.model.Map.setTile(Tile, int, int)",1,2,1,2
"net.sf.freecol.common.model.Map.setTiles(int, int)",2,2,1,3
"net.sf.freecol.common.model.Map.subMap(int, int, int, int)",9,2,4,11
net.sf.freecol.common.model.Map.toShortString(),0,1,1,1
net.sf.freecol.common.model.Map.up(),0,1,1,1
net.sf.freecol.common.model.Map.updateTile(Tile),3,4,2,4
"net.sf.freecol.common.model.Map.updateTiles(int, int)",4,3,2,5
net.sf.freecol.common.model.Map.usedCarrier(PathNode),3,3,2,3
net.sf.freecol.common.model.Map.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Map.writeChildren(FreeColXMLWriter),4,1,4,4
net.sf.freecol.common.model.MapTest.getShortLongPathMap(Game),0,1,1,1
net.sf.freecol.common.model.MapTest.getSingleLandPathMap(Game),0,1,1,1
net.sf.freecol.common.model.MapTest.iteratorToList(Iterator<T>),1,1,2,2
net.sf.freecol.common.model.MapTest.testCircleIterator(),0,1,1,1
net.sf.freecol.common.model.MapTest.testCopy(),0,1,1,1
net.sf.freecol.common.model.MapTest.testFindPath(),1,1,1,2
net.sf.freecol.common.model.MapTest.testGetReverseDirection(),0,1,1,1
net.sf.freecol.common.model.MapTest.testGetSurroundingTiles(),4,1,5,5
net.sf.freecol.common.model.MapTest.testGetTiles(),1,1,2,2
net.sf.freecol.common.model.MapTest.testLatitude(),0,1,1,1
net.sf.freecol.common.model.MapTest.testMapGameInt(),0,1,1,1
net.sf.freecol.common.model.MapTest.testMoveThroughTileWithEnemyUnit(),0,1,1,1
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToCampInTheWay(),0,1,1,1
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToColonyInTheWay(),0,1,1,1
net.sf.freecol.common.model.MapTest.testNoPathAvailableDueToUnitInTheWay(),0,1,1,1
net.sf.freecol.common.model.MapTest.testRandomDirection(),0,1,1,1
net.sf.freecol.common.model.MapTest.testSearchForColony(),7,3,6,7
net.sf.freecol.common.model.MapTest.testShortestPathObstructed(),0,1,1,1
"net.sf.freecol.common.model.Market.Market(Game, Player)",1,1,2,2
"net.sf.freecol.common.model.Market.Market(Game, String)",0,1,1,1
"net.sf.freecol.common.model.Market.addGoodsToMarket(GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.Market.addTransactionListener(TransactionListener),0,1,1,1
net.sf.freecol.common.model.Market.clearMarketData(),0,1,1,1
net.sf.freecol.common.model.Market.copyIn(T),3,2,3,4
net.sf.freecol.common.model.Market.flushPriceChange(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getAmountInMarket(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getArrears(GoodsType),1,1,2,2
"net.sf.freecol.common.model.Market.getBidPrice(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.Market.getCostToBuy(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getIncomeAfterTaxes(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getIncomeBeforeTaxes(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getInitialPrice(GoodsType),0,1,1,1
net.sf.freecol.common.model.Market.getLinkTarget(Player),1,1,2,2
net.sf.freecol.common.model.Market.getMarketData(),0,1,1,1
net.sf.freecol.common.model.Market.getMarketData(GoodsType),0,1,1,1
net.sf.freecol.common.model.Market.getMarketDataValues(),0,1,1,1
net.sf.freecol.common.model.Market.getOwner(),0,1,1,1
net.sf.freecol.common.model.Market.getPaidForSale(GoodsType),1,1,2,2
"net.sf.freecol.common.model.Market.getSalePrice(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.Market.getSalePrice(T),0,1,1,1
net.sf.freecol.common.model.Market.getSalePriceComparator(),0,1,1,1
net.sf.freecol.common.model.Market.getSales(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.getTransactionListener(),0,1,1,1
net.sf.freecol.common.model.Market.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Market.hasBeenTraded(GoodsType),1,1,2,2
net.sf.freecol.common.model.Market.hasPriceChanged(GoodsType),1,1,3,3
net.sf.freecol.common.model.Market.makePriceChangeMessage(GoodsType),3,1,2,3
"net.sf.freecol.common.model.Market.modifyIncomeAfterTaxes(GoodsType, int)",0,1,1,1
"net.sf.freecol.common.model.Market.modifyIncomeBeforeTaxes(GoodsType, int)",0,1,1,1
"net.sf.freecol.common.model.Market.modifySales(GoodsType, int)",1,1,2,2
"net.sf.freecol.common.model.Market.putMarketData(GoodsType, MarketData)",0,1,1,1
net.sf.freecol.common.model.Market.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Market.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Market.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Market.removeTransactionListener(TransactionListener),0,1,1,1
net.sf.freecol.common.model.Market.requireMarketData(GoodsType),1,1,2,2
"net.sf.freecol.common.model.Market.setArrears(GoodsType, int)",0,1,1,1
"net.sf.freecol.common.model.Market.setInitialPrice(GoodsType, int)",0,1,1,1
"net.sf.freecol.common.model.Market.setMarketData(Map<GoodsType, MarketData>)",0,1,1,1
net.sf.freecol.common.model.Market.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Market.toString(),2,1,3,3
net.sf.freecol.common.model.Market.update(GoodsType),0,1,1,1
net.sf.freecol.common.model.Market.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Market.writeChildren(FreeColXMLWriter),3,1,3,3
"net.sf.freecol.common.model.MarketData.MarketData(Game, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.MarketData.MarketData(Game, String)",0,1,1,1
net.sf.freecol.common.model.MarketData.copyIn(T),2,2,2,3
net.sf.freecol.common.model.MarketData.getAmountInMarket(),0,1,1,1
net.sf.freecol.common.model.MarketData.getArrears(),0,1,1,1
net.sf.freecol.common.model.MarketData.getCostToBuy(),0,1,1,1
net.sf.freecol.common.model.MarketData.getGoodsType(),0,1,1,1
net.sf.freecol.common.model.MarketData.getIncomeAfterTaxes(),0,1,1,1
net.sf.freecol.common.model.MarketData.getIncomeBeforeTaxes(),0,1,1,1
net.sf.freecol.common.model.MarketData.getInitialPrice(),0,1,1,1
net.sf.freecol.common.model.MarketData.getOldPrice(),0,1,1,1
net.sf.freecol.common.model.MarketData.getPaidForSale(),0,1,1,1
net.sf.freecol.common.model.MarketData.getSales(),0,1,1,1
net.sf.freecol.common.model.MarketData.getTraded(),0,1,1,1
net.sf.freecol.common.model.MarketData.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.MarketData.price(),14,2,9,14
net.sf.freecol.common.model.MarketData.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.MarketData.setAmountInMarket(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setArrears(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setCostToBuy(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setIncomeAfterTaxes(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setIncomeBeforeTaxes(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setInitialPrice(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setOldPrice(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setPaidForSale(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setSales(int),0,1,1,1
net.sf.freecol.common.model.MarketData.setTraded(boolean),0,1,1,1
net.sf.freecol.common.model.MarketData.toString(),1,1,2,2
net.sf.freecol.common.model.MarketData.update(),0,1,1,1
net.sf.freecol.common.model.MarketData.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.MarketTest.testEuropeMarketPricing(),3,1,3,3
net.sf.freecol.common.model.MarketTest.testInitialMarket(),1,1,2,2
net.sf.freecol.common.model.MarketTest.testSerialization(),0,1,1,1
net.sf.freecol.common.model.MarketTest.testTransactionListeners(),0,1,1,1
net.sf.freecol.common.model.MarketWas.MarketWas(Player),1,1,2,2
net.sf.freecol.common.model.MarketWas.add(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.MarketWas.addAll(List<AbstractGoods>),0,1,1,1
"net.sf.freecol.common.model.MarketWas.fireChange(GoodsType, int)",10,1,6,6
net.sf.freecol.common.model.MarketWas.fireChanges(),2,2,2,3
net.sf.freecol.common.model.ModelMessage.MessageType.MessageType(String),0,1,1,1
net.sf.freecol.common.model.ModelMessage.MessageType.getKey(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.MessageType.getNameKey(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.MessageType.getOptionName(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.ModelMessage(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.ModelMessage(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, FreeColGameObject, FreeColObject)",0,1,1,1
"net.sf.freecol.common.model.ModelMessage.ModelMessage(MessageType, String, String, FreeColGameObject, FreeColObject)",1,1,2,2
net.sf.freecol.common.model.ModelMessage.addDefaultId(String),0,1,1,1
net.sf.freecol.common.model.ModelMessage.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ModelMessage.divert(FreeColGameObject),1,1,2,2
net.sf.freecol.common.model.ModelMessage.equals(Object),3,3,6,7
"net.sf.freecol.common.model.ModelMessage.getDefaultDisplay(MessageType, FreeColGameObject)",3,1,1,5
net.sf.freecol.common.model.ModelMessage.getDisplayId(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.getDisplayed(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.getIgnoredMessageKey(),6,1,2,4
net.sf.freecol.common.model.ModelMessage.getMessageType(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.getOptionName(),1,1,2,2
"net.sf.freecol.common.model.ModelMessage.getSourceComparator(Game, Map<String, Comparator<?>>)",8,2,4,6
net.sf.freecol.common.model.ModelMessage.getSourceId(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.ModelMessage.hashCode(),3,1,3,4
net.sf.freecol.common.model.ModelMessage.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.ModelMessage.setDisplayId(String),0,1,1,1
net.sf.freecol.common.model.ModelMessage.setDisplayed(boolean),0,1,1,1
net.sf.freecol.common.model.ModelMessage.setMessageType(MessageType),0,1,1,1
net.sf.freecol.common.model.ModelMessage.setSourceId(String),0,1,1,1
net.sf.freecol.common.model.ModelMessage.splitLinks(Player),20,4,6,8
net.sf.freecol.common.model.ModelMessage.toString(),2,1,1,3
net.sf.freecol.common.model.ModelMessage.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.ModelMessageTest.testDefaultId(),0,1,1,1
net.sf.freecol.common.model.ModelMessageTest.testHashCode(),0,1,1,1
net.sf.freecol.common.model.ModelMessageTest.testModelMapSet2(),0,1,1,1
"net.sf.freecol.common.model.Modifier.Modifier(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.Modifier.Modifier(Specification),0,1,1,1
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType)",0,1,1,1
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType, FreeColObject)",0,1,1,1
"net.sf.freecol.common.model.Modifier.Modifier(String, float, ModifierType, FreeColObject, int)",1,1,2,2
"net.sf.freecol.common.model.Modifier.apply(float, float)",0,1,1,1
"net.sf.freecol.common.model.Modifier.apply(float, float, ModifierType)",1,4,1,4
net.sf.freecol.common.model.Modifier.applyTo(float),0,1,1,1
"net.sf.freecol.common.model.Modifier.applyTo(float, Turn)",1,1,2,2
net.sf.freecol.common.model.Modifier.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Modifier.equals(Object),3,3,7,8
net.sf.freecol.common.model.Modifier.getIncrement(),0,1,1,1
net.sf.freecol.common.model.Modifier.getIncrementType(),0,1,1,1
net.sf.freecol.common.model.Modifier.getModifierIndex(),0,1,1,1
net.sf.freecol.common.model.Modifier.getType(),0,1,1,1
net.sf.freecol.common.model.Modifier.getValue(),0,1,1,1
net.sf.freecol.common.model.Modifier.getValue(Turn),5,3,3,3
net.sf.freecol.common.model.Modifier.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Modifier.hasIncrement(),0,1,1,1
net.sf.freecol.common.model.Modifier.hashCode(),0,1,1,1
net.sf.freecol.common.model.Modifier.isFloatKnown(float),0,1,1,1
net.sf.freecol.common.model.Modifier.isKnown(),0,1,1,1
net.sf.freecol.common.model.Modifier.makeModifier(Modifier),0,1,1,1
"net.sf.freecol.common.model.Modifier.makeTimedModifier(String, Modifier, Turn)",1,1,2,2
net.sf.freecol.common.model.Modifier.readAttributes(FreeColXMLReader),3,1,3,3
"net.sf.freecol.common.model.Modifier.setIncrement(ModifierType, float, Turn, Turn)",1,2,1,2
net.sf.freecol.common.model.Modifier.setIncrement(float),0,1,1,1
net.sf.freecol.common.model.Modifier.setIncrementType(ModifierType),0,1,1,1
net.sf.freecol.common.model.Modifier.setModifierIndex(int),0,1,1,1
net.sf.freecol.common.model.Modifier.setType(ModifierType),0,1,1,1
net.sf.freecol.common.model.Modifier.setValue(float),0,1,1,1
net.sf.freecol.common.model.Modifier.toString(),5,1,5,5
net.sf.freecol.common.model.Modifier.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.ModifierTest.testAdditiveModifier(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testCombineAdditiveModifiers(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testCombineMultiplicativeModifiers(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testCombinePercentageModifiers(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testCombinedModifier(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testHashEquals(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testIncrements(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testModifierUnknown(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testMultiplicativeModifier(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testPercentageModifier(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testScope(),0,1,1,1
net.sf.freecol.common.model.ModifierTest.testTimeLimits(),0,1,1,1
"net.sf.freecol.common.model.Monarch.Monarch(Game, Player)",1,2,1,2
"net.sf.freecol.common.model.Monarch.Monarch(Game, String)",0,1,1,1
net.sf.freecol.common.model.Monarch.MonarchAction.getHeaderKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.MonarchAction.getKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.MonarchAction.getNoKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.MonarchAction.getTextKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.MonarchAction.getYesKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.actionIsValid(MonarchAction),5,13,15,19
"net.sf.freecol.common.model.Monarch.addIfValid(List<RandomChoice<MonarchAction>>, MonarchAction, int)",1,1,2,2
net.sf.freecol.common.model.Monarch.addToREF(Random),11,4,3,6
net.sf.freecol.common.model.Monarch.collectPotentialEnemies(),1,1,2,2
net.sf.freecol.common.model.Monarch.collectPotentialFriends(),0,1,1,1
net.sf.freecol.common.model.Monarch.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Monarch.getActionChoices(),4,2,5,6
net.sf.freecol.common.model.Monarch.getDispleasure(),0,1,1,1
net.sf.freecol.common.model.Monarch.getExpeditionaryForce(),1,1,2,2
net.sf.freecol.common.model.Monarch.getInterventionForce(),1,1,2,2
net.sf.freecol.common.model.Monarch.getMercenaryForce(),0,1,1,1
net.sf.freecol.common.model.Monarch.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Monarch.getNavalREFUnitType(),0,1,1,1
net.sf.freecol.common.model.Monarch.getPlayer(),0,1,1,1
"net.sf.freecol.common.model.Monarch.getSupport(Random, boolean)",2,2,2,7
net.sf.freecol.common.model.Monarch.getSupportSea(),0,1,1,1
"net.sf.freecol.common.model.Monarch.getWarSupport(Player, Random)",26,4,10,11
net.sf.freecol.common.model.Monarch.getWarSupportForce(),0,1,1,1
net.sf.freecol.common.model.Monarch.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Monarch.initializeCaches(),29,2,8,25
"net.sf.freecol.common.model.Monarch.loadMercenaries(Random, List<AbstractUnit>)",13,3,6,9
"net.sf.freecol.common.model.Monarch.loadMercenaryForce(Random, List<AbstractUnit>)",12,3,6,8
net.sf.freecol.common.model.Monarch.lowerTax(Random),0,1,1,1
net.sf.freecol.common.model.Monarch.raiseTax(Random),0,1,1,1
net.sf.freecol.common.model.Monarch.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Monarch.readChild(FreeColXMLReader),4,1,4,4
net.sf.freecol.common.model.Monarch.readChildren(FreeColXMLReader),2,1,1,3
net.sf.freecol.common.model.Monarch.setDispleasure(boolean),0,1,1,1
net.sf.freecol.common.model.Monarch.setSupportSea(boolean),0,1,1,1
net.sf.freecol.common.model.Monarch.shouldAddNavalUnit(),0,1,1,1
net.sf.freecol.common.model.Monarch.taxMaximum(),0,1,1,1
net.sf.freecol.common.model.Monarch.updateInterventionForce(),4,1,3,4
net.sf.freecol.common.model.Monarch.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.Monarch.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.MonarchTest.choicesContain(List<RandomChoice<MonarchAction>>, MonarchAction)",3,3,2,3
net.sf.freecol.common.model.MonarchTest.testSerialize(),1,1,2,2
net.sf.freecol.common.model.MonarchTest.testTaxActionChoices(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testMoveAlongRiver(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testMoveAlongRoad(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testMoveFromPlainsToHills(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testMoveFromPlainsToPlains(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testScoutColony(),0,1,1,1
net.sf.freecol.common.model.MovementTest.testScoutIndianSettlement(),0,1,1,1
"net.sf.freecol.common.model.Nation.Nation(String, Specification)",0,1,1,1
net.sf.freecol.common.model.Nation.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Nation.getColor(),0,1,1,1
net.sf.freecol.common.model.Nation.getPreferredLatitude(),0,1,1,1
net.sf.freecol.common.model.Nation.getREFNation(),0,1,1,1
"net.sf.freecol.common.model.Nation.getRandomNonPlayerNationNameKey(Game, Random)",3,3,3,3
net.sf.freecol.common.model.Nation.getRebelNation(),0,1,1,1
net.sf.freecol.common.model.Nation.getRulerName(),0,1,1,1
net.sf.freecol.common.model.Nation.getRulerNameKey(),0,1,1,1
net.sf.freecol.common.model.Nation.getStartsOnEastCoast(),0,1,1,1
net.sf.freecol.common.model.Nation.getType(),0,1,1,1
net.sf.freecol.common.model.Nation.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Nation.isSelectable(),0,1,1,1
net.sf.freecol.common.model.Nation.isUnknownEnemy(),0,1,1,1
net.sf.freecol.common.model.Nation.readAttributes(FreeColXMLReader),5,1,4,4
net.sf.freecol.common.model.Nation.setColor(Color),0,1,1,1
net.sf.freecol.common.model.Nation.setType(NationType),0,1,1,1
net.sf.freecol.common.model.Nation.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.NationOptions.Advantages.getKey(),0,1,1,1
net.sf.freecol.common.model.NationOptions.Advantages.getNameKey(),0,1,1,1
net.sf.freecol.common.model.NationOptions.Advantages.getShortDescriptionKey(),0,1,1,1
"net.sf.freecol.common.model.NationOptions.NationOptions(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.NationOptions.NationOptions(Specification),14,1,7,7
net.sf.freecol.common.model.NationOptions.NationState.getKey(),0,1,1,1
net.sf.freecol.common.model.NationOptions.NationState.getNameKey(),0,1,1,1
net.sf.freecol.common.model.NationOptions.NationState.getShortDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.NationOptions.copyIn(T),2,2,2,3
net.sf.freecol.common.model.NationOptions.getNationState(Nation),0,1,1,1
net.sf.freecol.common.model.NationOptions.getNationalAdvantages(),0,1,1,1
net.sf.freecol.common.model.NationOptions.getNations(),0,1,1,1
net.sf.freecol.common.model.NationOptions.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.NationOptions.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NationOptions.readChild(FreeColXMLReader),17,5,7,9
net.sf.freecol.common.model.NationOptions.readChildren(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.NationOptions.setNationState(Nation, NationState)",0,1,1,1
"net.sf.freecol.common.model.NationOptions.setNations(Map<Nation, NationState>)",0,1,1,1
net.sf.freecol.common.model.NationOptions.toString(),0,1,1,1
net.sf.freecol.common.model.NationOptions.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.NationOptions.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.NationSummary.NationSummary(),0,1,1,1
"net.sf.freecol.common.model.NationSummary.NationSummary(Player, Player)",7,1,4,5
net.sf.freecol.common.model.NationSummary.copyIn(T),2,2,2,3
net.sf.freecol.common.model.NationSummary.getFoundingFathers(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getGold(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getMilitaryStrength(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getNavalStrength(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getNumberOfSettlements(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getNumberOfUnits(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getSoL(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getStance(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getTax(),0,1,1,1
net.sf.freecol.common.model.NationSummary.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.NationSummary.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NationSummary.writeAttributes(FreeColXMLWriter),3,1,4,4
net.sf.freecol.common.model.NationType.AggressionLevel.getKey(),0,1,1,1
"net.sf.freecol.common.model.NationType.NationType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.NationType.SettlementNumber.getKey(),0,1,1,1
net.sf.freecol.common.model.NationType.addSettlementType(SettlementType),1,1,1,2
net.sf.freecol.common.model.NationType.addSettlementTypes(List<SettlementType>),1,1,1,2
net.sf.freecol.common.model.NationType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.NationType.getAggression(),0,1,1,1
net.sf.freecol.common.model.NationType.getCapitalType(),0,1,1,1
net.sf.freecol.common.model.NationType.getNumberOfSettlements(),0,1,1,1
net.sf.freecol.common.model.NationType.getSettlementType(String),0,1,1,1
net.sf.freecol.common.model.NationType.getSettlementType(boolean),0,1,1,1
net.sf.freecol.common.model.NationType.getSettlementTypes(),1,1,2,2
net.sf.freecol.common.model.NationType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NationType.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.NationType.readChildren(FreeColXMLReader),6,1,4,5
net.sf.freecol.common.model.NationType.setSettlementTypes(List<SettlementType>),2,1,2,2
net.sf.freecol.common.model.NationType.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.NationType.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.NationTypeTest.testAdvantagesThatOnlyApplyToPersons(),2,1,3,3
net.sf.freecol.common.model.NationTypeTest.testHasType(),1,1,2,2
net.sf.freecol.common.model.NationTypeTest.testIsREF(),0,1,1,1
net.sf.freecol.common.model.NationTypeTest.testSettlementType(),1,1,2,2
net.sf.freecol.common.model.NationTypeTest.testStartingUnits(),32,1,13,13
net.sf.freecol.common.model.NationTypeTest.testisRef(),0,1,1,1
"net.sf.freecol.common.model.NativeTrade.NativeTrade(Game, String)",0,1,1,1
"net.sf.freecol.common.model.NativeTrade.NativeTrade(Unit, IndianSettlement)",0,1,1,1
"net.sf.freecol.common.model.NativeTrade.NativeTradeAction.NativeTradeAction(boolean, boolean)",0,1,1,1
net.sf.freecol.common.model.NativeTrade.NativeTradeAction.isClosing(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.NativeTradeAction.isEuropean(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.addToUnit(NativeTradeItem),0,1,1,1
net.sf.freecol.common.model.NativeTrade.atWar(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.canBuy(),1,1,4,4
net.sf.freecol.common.model.NativeTrade.canGift(),1,1,2,2
net.sf.freecol.common.model.NativeTrade.canSell(),1,1,3,3
net.sf.freecol.common.model.NativeTrade.copyIn(T),2,2,2,3
net.sf.freecol.common.model.NativeTrade.getBuy(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getCount(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getDone(),2,1,4,4
net.sf.freecol.common.model.NativeTrade.getGift(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getIndianSettlement(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getItem(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getKey(),0,1,1,1
"net.sf.freecol.common.model.NativeTrade.getNativeTradeKey(Unit, IndianSettlement)",0,1,1,1
net.sf.freecol.common.model.NativeTrade.getSell(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getSettlementToUnit(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getUnit(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getUnitToSettlement(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.haggleDown(int),0,1,1,1
net.sf.freecol.common.model.NativeTrade.haggleUp(int),0,1,1,1
net.sf.freecol.common.model.NativeTrade.hasNotTraded(),1,1,3,3
net.sf.freecol.common.model.NativeTrade.initialize(),2,1,3,3
net.sf.freecol.common.model.NativeTrade.isCompatible(NativeTrade),0,1,1,1
net.sf.freecol.common.model.NativeTrade.isInternable(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.limitSettlementToUnit(int),2,2,2,3
net.sf.freecol.common.model.NativeTrade.mergeFrom(NativeTrade),2,1,3,3
net.sf.freecol.common.model.NativeTrade.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NativeTrade.readChild(FreeColXMLReader),16,1,8,8
net.sf.freecol.common.model.NativeTrade.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NativeTrade.removeFromUnit(NativeTradeItem),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setBuy(boolean),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setCount(int),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setDone(),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setGift(boolean),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setItem(NativeTradeItem),0,1,1,1
net.sf.freecol.common.model.NativeTrade.setSell(boolean),0,1,1,1
net.sf.freecol.common.model.NativeTrade.toString(),3,1,4,4
net.sf.freecol.common.model.NativeTrade.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.NativeTrade.writeChildren(FreeColXMLWriter),3,1,4,4
"net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(Game, Player, Player, Goods)",0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.NativeTradeItem(NativeTradeItem),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.NativeTradeItem.equals(Object),2,2,3,4
net.sf.freecol.common.model.NativeTradeItem.getHaggleCount(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.getPrice(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.goodsMatcher(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.priceIsSet(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.priceIsValid(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.setHaggleCount(int),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.setPrice(int),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.NativeTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.Occupation.Occupation(WorkLocation, ProductionType, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.Occupation.improve(Unit, WorkLocation, int, Collection<GoodsType>, LogBuilder)",6,2,6,8
"net.sf.freecol.common.model.Occupation.improve(UnitType, WorkLocation, int, Collection<GoodsType>, LogBuilder)",0,1,1,1
"net.sf.freecol.common.model.Occupation.improve(UnitType, WorkLocation, int, Collection<GoodsType>, boolean, LogBuilder)",11,1,4,6
net.sf.freecol.common.model.Occupation.install(Unit),3,2,3,4
net.sf.freecol.common.model.Occupation.toString(),1,1,2,2
net.sf.freecol.common.model.Operand.Operand(),0,1,1,1
net.sf.freecol.common.model.Operand.Operand(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.Operand.Operand(OperandType, ScopeLevel)",0,1,1,1
net.sf.freecol.common.model.Operand.Operand(int),0,1,1,1
net.sf.freecol.common.model.Operand.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Operand.equals(Object),3,3,5,6
net.sf.freecol.common.model.Operand.getOperandType(),0,1,1,1
net.sf.freecol.common.model.Operand.getScopeLevel(),0,1,1,1
net.sf.freecol.common.model.Operand.getValue(),0,1,1,1
net.sf.freecol.common.model.Operand.getValue(Game),8,4,2,11
net.sf.freecol.common.model.Operand.getValue(Player),5,7,7,9
net.sf.freecol.common.model.Operand.getValue(Settlement),4,5,3,6
net.sf.freecol.common.model.Operand.hashCode(),0,1,1,1
net.sf.freecol.common.model.Operand.ourCount(Collection<? extends FreeColObject>),0,1,1,1
net.sf.freecol.common.model.Operand.readAttributes(FreeColXMLReader),5,1,3,4
net.sf.freecol.common.model.Operand.setOperandType(OperandType),0,1,1,1
net.sf.freecol.common.model.Operand.setScopeLevel(ScopeLevel),0,1,1,1
net.sf.freecol.common.model.Operand.setValue(Integer),0,1,1,1
net.sf.freecol.common.model.Operand.toString(),1,2,2,2
net.sf.freecol.common.model.Operand.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.PathNode.PathNode(Location, int, int, boolean, PathNode, PathNode)",0,1,1,1
net.sf.freecol.common.model.PathNode.addTurns(int),1,1,2,2
net.sf.freecol.common.model.PathNode.convertToGoodsDeliveryPath(),1,1,1,2
net.sf.freecol.common.model.PathNode.embarkedThisTurn(int),5,4,2,4
net.sf.freecol.common.model.PathNode.ensureDisembark(),1,1,1,2
net.sf.freecol.common.model.PathNode.fullPathToString(),1,1,2,2
net.sf.freecol.common.model.PathNode.getCarrierMove(),3,3,2,3
net.sf.freecol.common.model.PathNode.getCost(),0,1,1,1
net.sf.freecol.common.model.PathNode.getDirection(),2,2,3,4
net.sf.freecol.common.model.PathNode.getFirstNode(),1,1,1,2
net.sf.freecol.common.model.PathNode.getLastNode(),1,1,1,2
net.sf.freecol.common.model.PathNode.getLength(),1,1,1,2
net.sf.freecol.common.model.PathNode.getLocation(),0,1,1,1
net.sf.freecol.common.model.PathNode.getMovesLeft(),0,1,1,1
"net.sf.freecol.common.model.PathNode.getNodeCost(int, int)",1,1,1,2
net.sf.freecol.common.model.PathNode.getTile(),1,1,2,2
net.sf.freecol.common.model.PathNode.getTotalTurns(),1,1,1,2
net.sf.freecol.common.model.PathNode.getTransportDropNode(),2,1,2,3
net.sf.freecol.common.model.PathNode.getTransportDropTurns(),0,1,1,1
net.sf.freecol.common.model.PathNode.getTurns(),0,1,1,1
net.sf.freecol.common.model.PathNode.isOnCarrier(),0,1,1,1
net.sf.freecol.common.model.PathNode.setMovesLeft(int),0,1,1,1
net.sf.freecol.common.model.PathNode.setOnCarrier(boolean),0,1,1,1
net.sf.freecol.common.model.PathNode.setTurns(int),0,1,1,1
net.sf.freecol.common.model.PathNode.toString(),0,1,1,1
net.sf.freecol.common.model.PathNode.usesCarrier(),0,1,1,1
net.sf.freecol.common.model.PathfindingTest.testComposedGoalDeciders(),8,5,1,5
net.sf.freecol.common.model.Player.ColonyValueCategory.toString(),0,1,1,1
net.sf.freecol.common.model.Player.NoClaimReason.getDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.Player.NoClaimReason.getKey(),0,1,1,1
net.sf.freecol.common.model.Player.NoClaimReason.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Player.NoValueType.NoValueType(int),0,1,1,1
net.sf.freecol.common.model.Player.NoValueType.fromValue(int),2,1,2,3
net.sf.freecol.common.model.Player.NoValueType.getDouble(),0,1,1,1
net.sf.freecol.common.model.Player.NoValueType.getValue(),0,1,1,1
net.sf.freecol.common.model.Player.Player(Game),0,1,1,1
"net.sf.freecol.common.model.Player.Player(Game, String)",0,1,1,1
net.sf.freecol.common.model.Player.addFather(FoundingFather),1,1,2,2
net.sf.freecol.common.model.Player.addHistory(HistoryEvent),0,1,1,1
net.sf.freecol.common.model.Player.addLastSale(LastSale),1,1,1,2
net.sf.freecol.common.model.Player.addMissionBan(Player),1,1,1,2
net.sf.freecol.common.model.Player.addModelMessage(ModelMessage),0,1,1,1
net.sf.freecol.common.model.Player.addOwnable(Ownable),3,1,3,3
net.sf.freecol.common.model.Player.addSettlement(Settlement),10,7,3,7
net.sf.freecol.common.model.Player.addStartGameMessage(),3,1,2,3
net.sf.freecol.common.model.Player.addTradeRoute(TradeRoute),2,1,4,4
net.sf.freecol.common.model.Player.addUnit(Unit),3,4,2,4
net.sf.freecol.common.model.Player.atWarWith(Player),0,1,1,1
net.sf.freecol.common.model.Player.calculateStrength(boolean),0,1,1,1
net.sf.freecol.common.model.Player.canAcquireForImprovement(Tile),1,1,2,2
net.sf.freecol.common.model.Player.canBuildColonies(),1,1,2,2
net.sf.freecol.common.model.Player.canClaimForImprovement(Tile),1,1,3,3
net.sf.freecol.common.model.Player.canClaimForSettlement(Tile),0,1,1,1
net.sf.freecol.common.model.Player.canClaimForSettlementReason(Tile),26,1,5,8
net.sf.freecol.common.model.Player.canClaimFreeCenterTile(Tile),5,1,10,10
net.sf.freecol.common.model.Player.canClaimToFoundSettlement(Tile),0,1,1,1
net.sf.freecol.common.model.Player.canClaimToFoundSettlementReason(Tile),10,1,4,5
net.sf.freecol.common.model.Player.canHaveFoundingFathers(),1,1,2,2
net.sf.freecol.common.model.Player.canMoveToEurope(),0,1,1,1
net.sf.freecol.common.model.Player.canOwnTile(Tile),0,1,1,1
net.sf.freecol.common.model.Player.canOwnTileReason(Tile),10,1,4,6
net.sf.freecol.common.model.Player.canSee(Tile),3,3,2,4
net.sf.freecol.common.model.Player.canSeeUnit(Unit),15,1,5,6
net.sf.freecol.common.model.Player.canTrade(GoodsType),0,1,1,1
"net.sf.freecol.common.model.Player.canTrade(GoodsType, Access)",5,1,6,6
net.sf.freecol.common.model.Player.changeNationType(NationType),2,1,3,3
net.sf.freecol.common.model.Player.changePlayerType(PlayerType),4,1,2,4
net.sf.freecol.common.model.Player.checkDeclareIndependence(),2,2,3,3
net.sf.freecol.common.model.Player.checkEmigrate(),1,1,2,2
net.sf.freecol.common.model.Player.checkGold(int),1,1,1,2
"net.sf.freecol.common.model.Player.checkIntegrity(boolean, LogBuilder)",13,1,7,7
net.sf.freecol.common.model.Player.clearHistory(),0,1,1,1
net.sf.freecol.common.model.Player.clearModelMessages(),0,1,1,1
net.sf.freecol.common.model.Player.clearNationCache(),0,1,1,1
net.sf.freecol.common.model.Player.clearNationSummary(Player),0,1,1,1
net.sf.freecol.common.model.Player.clearOfferedFathers(),0,1,1,1
net.sf.freecol.common.model.Player.clearTradeRoutes(),0,1,1,1
net.sf.freecol.common.model.Player.clientError(String),1,1,2,2
net.sf.freecol.common.model.Player.clientError(StringTemplate),1,1,2,2
net.sf.freecol.common.model.Player.copyIn(T),3,2,3,4
"net.sf.freecol.common.model.Player.divertModelMessages(FreeColGameObject, FreeColGameObject)",4,1,3,3
net.sf.freecol.common.model.Player.getAllColonyValues(Tile),81,13,43,54
net.sf.freecol.common.model.Player.getArrears(GoodsType),1,1,2,2
net.sf.freecol.common.model.Player.getAttackedByPrivateers(),0,1,1,1
net.sf.freecol.common.model.Player.getBankrupt(),0,1,1,1
net.sf.freecol.common.model.Player.getBannedMissions(),1,1,2,2
net.sf.freecol.common.model.Player.getCapitalName(Random),0,1,1,1
net.sf.freecol.common.model.Player.getCarriersForUnit(Unit),0,1,1,1
"net.sf.freecol.common.model.Player.getClaimableTiles(Tile, int)",4,1,4,4
net.sf.freecol.common.model.Player.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.Player.getClosestPortForEurope(),0,1,1,1
net.sf.freecol.common.model.Player.getColonies(),0,1,1,1
net.sf.freecol.common.model.Player.getColoniesPopulation(),0,1,1,1
net.sf.freecol.common.model.Player.getColonyByName(String),0,1,1,1
net.sf.freecol.common.model.Player.getColonyList(),0,1,1,1
net.sf.freecol.common.model.Player.getColonyValue(Tile),2,2,2,3
net.sf.freecol.common.model.Player.getConnectedPortList(),1,1,2,2
net.sf.freecol.common.model.Player.getConnectedPorts(),0,1,1,1
net.sf.freecol.common.model.Player.getConnection(),0,1,1,1
net.sf.freecol.common.model.Player.getCountryLabel(),2,1,2,3
net.sf.freecol.common.model.Player.getCurrentFather(),0,1,1,1
net.sf.freecol.common.model.Player.getDead(),0,1,1,1
net.sf.freecol.common.model.Player.getDebugName(),0,1,1,1
net.sf.freecol.common.model.Player.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.Player.getElectionTurns(),0,1,1,1
net.sf.freecol.common.model.Player.getEmigrationMessage(Unit),0,1,1,1
net.sf.freecol.common.model.Player.getEntryTile(),0,1,1,1
net.sf.freecol.common.model.Player.getEurope(),0,1,1,1
net.sf.freecol.common.model.Player.getEuropeNameKey(),1,1,1,2
net.sf.freecol.common.model.Player.getEuropeanPurchasePrice(AbstractUnit),2,2,2,3
net.sf.freecol.common.model.Player.getEuropeanRecruitPrice(),0,1,1,1
net.sf.freecol.common.model.Player.getFallbackTile(),1,1,2,2
net.sf.freecol.common.model.Player.getFatherCount(),0,1,1,1
net.sf.freecol.common.model.Player.getFeatureContainer(),0,1,1,1
net.sf.freecol.common.model.Player.getForcesLabel(),0,1,1,1
net.sf.freecol.common.model.Player.getFoundingFathers(),0,1,1,1
net.sf.freecol.common.model.Player.getGold(),0,1,1,1
net.sf.freecol.common.model.Player.getHighSeas(),0,1,1,1
net.sf.freecol.common.model.Player.getHistory(),0,1,1,1
net.sf.freecol.common.model.Player.getImmigration(),1,1,1,2
net.sf.freecol.common.model.Player.getImmigrationRequired(),0,1,1,1
net.sf.freecol.common.model.Player.getIncomeAfterTaxes(GoodsType),1,1,2,2
net.sf.freecol.common.model.Player.getIncomeBeforeTaxes(GoodsType),1,1,2,2
net.sf.freecol.common.model.Player.getIndependentNationName(),0,1,1,1
net.sf.freecol.common.model.Player.getIndianSettlementByName(String),0,1,1,1
net.sf.freecol.common.model.Player.getIndianSettlementList(),0,1,1,1
net.sf.freecol.common.model.Player.getIndianSettlements(),0,1,1,1
net.sf.freecol.common.model.Player.getIndianSettlementsWithMissionary(Player),0,1,1,1
net.sf.freecol.common.model.Player.getIndianSettlementsWithMissionaryList(Player),1,1,2,2
net.sf.freecol.common.model.Player.getInterventionBells(),0,1,1,1
net.sf.freecol.common.model.Player.getLabel(),0,1,1,1
net.sf.freecol.common.model.Player.getLandPrice(Tile),8,5,5,7
"net.sf.freecol.common.model.Player.getLastSale(Location, GoodsType)",1,1,2,2
"net.sf.freecol.common.model.Player.getLastSaleString(Location, GoodsType)",1,1,2,2
"net.sf.freecol.common.model.Player.getLastSaleTip(Location, GoodsType)",1,1,2,2
net.sf.freecol.common.model.Player.getLastSales(),1,1,1,2
net.sf.freecol.common.model.Player.getLiberty(),1,1,1,2
net.sf.freecol.common.model.Player.getLibertyProductionNextTurn(),0,1,1,1
net.sf.freecol.common.model.Player.getMarket(),0,1,1,1
net.sf.freecol.common.model.Player.getMarketName(),1,1,2,2
net.sf.freecol.common.model.Player.getMaximumFoodConsumption(),1,1,2,2
net.sf.freecol.common.model.Player.getMercenaryHirePrice(AbstractUnit),1,1,2,2
net.sf.freecol.common.model.Player.getMilitaryUnits(),8,1,5,6
net.sf.freecol.common.model.Player.getModelMessages(),0,1,1,1
net.sf.freecol.common.model.Player.getMonarch(),0,1,1,1
net.sf.freecol.common.model.Player.getMostValuableGoods(),3,3,2,4
net.sf.freecol.common.model.Player.getName(),0,1,1,1
net.sf.freecol.common.model.Player.getNameForNewLand(),0,1,1,1
net.sf.freecol.common.model.Player.getNameForRegion(Region),0,1,1,1
net.sf.freecol.common.model.Player.getNameForTradeRoute(),0,1,1,1
"net.sf.freecol.common.model.Player.getNameForUnit(UnitType, Random)",0,1,1,1
net.sf.freecol.common.model.Player.getNation(),0,1,1,1
net.sf.freecol.common.model.Player.getNationColor(),1,1,2,2
net.sf.freecol.common.model.Player.getNationId(),0,1,1,1
net.sf.freecol.common.model.Player.getNationLabel(),2,1,2,3
net.sf.freecol.common.model.Player.getNationResourceKey(),0,1,1,1
net.sf.freecol.common.model.Player.getNationSummary(Player),0,1,1,1
net.sf.freecol.common.model.Player.getNationType(),0,1,1,1
net.sf.freecol.common.model.Player.getNewLandName(),0,1,1,1
net.sf.freecol.common.model.Player.getNewModelMessages(),0,1,1,1
net.sf.freecol.common.model.Player.getNewestTradeRoute(),1,1,2,2
net.sf.freecol.common.model.Player.getNextActiveUnit(),0,1,1,1
net.sf.freecol.common.model.Player.getNextGoingToUnit(),0,1,1,1
net.sf.freecol.common.model.Player.getNumberOfKingLandUnits(),1,1,2,2
net.sf.freecol.common.model.Player.getNumberOfPorts(),1,1,2,2
net.sf.freecol.common.model.Player.getOfferedFathers(),0,1,1,1
net.sf.freecol.common.model.Player.getOldSoL(),0,1,1,1
"net.sf.freecol.common.model.Player.getOurFreeColGameObject(String, Class<T>)",5,4,4,4
net.sf.freecol.common.model.Player.getPlayerType(),0,1,1,1
net.sf.freecol.common.model.Player.getREFPlayer(),1,1,2,2
net.sf.freecol.common.model.Player.getREFUnits(),1,1,2,2
net.sf.freecol.common.model.Player.getRank(),3,1,1,4
net.sf.freecol.common.model.Player.getReady(),0,1,1,1
net.sf.freecol.common.model.Player.getRebelStrengthRatio(boolean),1,2,1,2
net.sf.freecol.common.model.Player.getRebels(),2,1,3,3
net.sf.freecol.common.model.Player.getRemainingFoundingFatherCost(),0,1,1,1
net.sf.freecol.common.model.Player.getRulerNameKey(),0,1,1,1
net.sf.freecol.common.model.Player.getSales(GoodsType),1,1,2,2
net.sf.freecol.common.model.Player.getScore(),0,1,1,1
net.sf.freecol.common.model.Player.getSettlementByName(String),1,1,2,2
net.sf.freecol.common.model.Player.getSettlementCount(),0,1,1,1
net.sf.freecol.common.model.Player.getSettlementList(),0,1,1,1
net.sf.freecol.common.model.Player.getSettlementName(Random),0,1,1,1
net.sf.freecol.common.model.Player.getSettlements(),0,1,1,1
net.sf.freecol.common.model.Player.getSoL(),1,1,2,2
net.sf.freecol.common.model.Player.getSortedColonies(Comparator<Colony>),0,1,1,1
net.sf.freecol.common.model.Player.getSpanishSuccessionScore(),0,1,1,1
net.sf.freecol.common.model.Player.getStance(Player),2,1,3,3
net.sf.freecol.common.model.Player.getStances(),0,1,1,1
"net.sf.freecol.common.model.Player.getStrengthRatio(Player, boolean)",1,2,1,2
net.sf.freecol.common.model.Player.getTax(),0,1,1,1
net.sf.freecol.common.model.Player.getTension(),0,1,1,1
net.sf.freecol.common.model.Player.getTension(Player),2,2,2,3
net.sf.freecol.common.model.Player.getTotalFoundingFatherCost(),1,1,1,2
net.sf.freecol.common.model.Player.getTotalImmigrationProduction(),2,2,2,3
"net.sf.freecol.common.model.Player.getTradeRouteByName(String, TradeRoute)",1,1,2,2
net.sf.freecol.common.model.Player.getTradeRouteCount(),0,1,1,1
net.sf.freecol.common.model.Player.getTradeRoutes(),0,1,1,1
net.sf.freecol.common.model.Player.getUnitByName(String),0,1,1,1
net.sf.freecol.common.model.Player.getUnitCount(),0,1,1,1
net.sf.freecol.common.model.Player.getUnitCount(boolean),0,1,1,1
net.sf.freecol.common.model.Player.getUnitSet(),1,1,2,2
net.sf.freecol.common.model.Player.getUnits(),0,1,1,1
net.sf.freecol.common.model.Player.getVisibleTileSet(),18,1,9,9
net.sf.freecol.common.model.Player.getWaitingLabel(),0,1,1,1
net.sf.freecol.common.model.Player.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Player.hasContacted(Player),0,1,1,1
net.sf.freecol.common.model.Player.hasContactedEuropeans(),0,1,1,1
net.sf.freecol.common.model.Player.hasContactedIndians(),0,1,1,1
net.sf.freecol.common.model.Player.hasExplored(Tile),0,1,1,1
net.sf.freecol.common.model.Player.hasFather(FoundingFather),0,1,1,1
net.sf.freecol.common.model.Player.hasNextActiveUnit(),0,1,1,1
net.sf.freecol.common.model.Player.hasNextGoingToUnit(),0,1,1,1
net.sf.freecol.common.model.Player.hasSettlement(Settlement),0,1,1,1
net.sf.freecol.common.model.Player.hasSettlements(),0,1,1,1
net.sf.freecol.common.model.Player.hasTraded(GoodsType),1,1,2,2
net.sf.freecol.common.model.Player.hasUnit(Unit),0,1,1,1
net.sf.freecol.common.model.Player.hasUnitType(String),0,1,1,1
net.sf.freecol.common.model.Player.hasZeroSettlements(),2,1,3,3
net.sf.freecol.common.model.Player.initializeHighSeas(),2,1,3,3
net.sf.freecol.common.model.Player.invalidateCanSeeTiles(),0,1,1,1
net.sf.freecol.common.model.Player.isAI(),0,1,1,1
net.sf.freecol.common.model.Player.isAdmin(),0,1,1,1
net.sf.freecol.common.model.Player.isAtWar(),0,1,1,1
net.sf.freecol.common.model.Player.isColonial(),0,1,1,1
net.sf.freecol.common.model.Player.isConnected(),0,1,1,1
net.sf.freecol.common.model.Player.isDead(),0,1,1,1
net.sf.freecol.common.model.Player.isEuropean(),1,1,1,4
net.sf.freecol.common.model.Player.isIndian(),0,1,1,1
net.sf.freecol.common.model.Player.isNewLandNamed(),0,1,1,1
net.sf.freecol.common.model.Player.isPotentialEnemy(Player),4,3,3,4
net.sf.freecol.common.model.Player.isPotentialFriend(Player),3,3,2,3
net.sf.freecol.common.model.Player.isREF(),0,1,1,1
net.sf.freecol.common.model.Player.isReady(),1,1,2,2
net.sf.freecol.common.model.Player.isRebel(),0,1,1,1
net.sf.freecol.common.model.Player.isUndead(),0,1,1,1
net.sf.freecol.common.model.Player.isUnknownEnemy(),0,1,1,1
net.sf.freecol.common.model.Player.isWorkForREF(),1,1,2,2
net.sf.freecol.common.model.Player.logCheat(String),0,1,1,1
net.sf.freecol.common.model.Player.makeCanSeeTiles(Map),6,1,4,4
"net.sf.freecol.common.model.Player.makeContact(Player, Player)",0,1,1,1
net.sf.freecol.common.model.Player.missionsBanned(Player),1,1,2,2
net.sf.freecol.common.model.Player.modifyGold(int),4,1,3,3
net.sf.freecol.common.model.Player.modifyImmigration(int),0,1,1,1
"net.sf.freecol.common.model.Player.modifyIncomeAfterTaxes(GoodsType, int)",1,1,2,2
"net.sf.freecol.common.model.Player.modifyIncomeBeforeTaxes(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.Player.modifyLiberty(int),1,1,1,2
"net.sf.freecol.common.model.Player.modifySales(GoodsType, int)",1,1,2,2
net.sf.freecol.common.model.Player.owns(Ownable),1,1,2,2
"net.sf.freecol.common.model.Player.putNationSummary(Player, NationSummary)",0,1,1,1
net.sf.freecol.common.model.Player.putSettlementName(String),0,1,1,1
net.sf.freecol.common.model.Player.readAttributes(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Player.readChild(FreeColXMLReader),28,1,22,22
net.sf.freecol.common.model.Player.readChildren(FreeColXMLReader),3,1,4,4
net.sf.freecol.common.model.Player.recalculateBellsBonus(),3,1,3,3
net.sf.freecol.common.model.Player.reduceImmigration(),4,2,1,4
net.sf.freecol.common.model.Player.refilterModelMessages(OptionGroup),0,1,1,1
net.sf.freecol.common.model.Player.reinitialiseMarket(),0,1,1,1
net.sf.freecol.common.model.Player.removeDisplayedModelMessages(),0,1,1,1
net.sf.freecol.common.model.Player.removeMissionBan(Player),1,1,2,2
net.sf.freecol.common.model.Player.removeOwnable(Ownable),3,1,3,3
net.sf.freecol.common.model.Player.removeSettlement(Settlement),0,1,1,1
net.sf.freecol.common.model.Player.removeTension(Player),1,1,2,2
net.sf.freecol.common.model.Player.removeTradeRoute(TradeRoute),2,1,3,3
net.sf.freecol.common.model.Player.removeUnit(Unit),1,2,1,2
net.sf.freecol.common.model.Player.resetIterators(),0,1,1,1
net.sf.freecol.common.model.Player.restoreActiveUnit(),2,2,2,3
net.sf.freecol.common.model.Player.send(ChangeSet),0,1,1,1
net.sf.freecol.common.model.Player.setAI(boolean),0,1,1,1
net.sf.freecol.common.model.Player.setAttackedByPrivateers(boolean),0,1,1,1
net.sf.freecol.common.model.Player.setBankrupt(boolean),0,1,1,1
net.sf.freecol.common.model.Player.setBannedMissions(Collection<Player>),2,1,2,2
net.sf.freecol.common.model.Player.setColonyComparator(Comparator<Colony>),0,1,1,1
net.sf.freecol.common.model.Player.setConnection(Connection),0,1,1,1
net.sf.freecol.common.model.Player.setCurrentFather(FoundingFather),0,1,1,1
net.sf.freecol.common.model.Player.setDead(boolean),0,1,1,1
net.sf.freecol.common.model.Player.setEntryTile(Tile),0,1,1,1
net.sf.freecol.common.model.Player.setEurope(Europe),0,1,1,1
net.sf.freecol.common.model.Player.setFoundingFathers(Set<FoundingFather>),1,1,2,2
net.sf.freecol.common.model.Player.setGold(int),0,1,1,1
net.sf.freecol.common.model.Player.setHistory(List<HistoryEvent>),0,1,1,1
net.sf.freecol.common.model.Player.setImmigration(int),1,2,1,2
net.sf.freecol.common.model.Player.setImmigrationRequired(int),0,1,1,1
net.sf.freecol.common.model.Player.setIndependentNationName(String),0,1,1,1
"net.sf.freecol.common.model.Player.setLastSales(Map<String, LastSale>)",2,1,2,2
net.sf.freecol.common.model.Player.setLiberty(int),1,2,1,2
net.sf.freecol.common.model.Player.setModelMessages(List<ModelMessage>),0,1,1,1
net.sf.freecol.common.model.Player.setMonarch(Monarch),0,1,1,1
net.sf.freecol.common.model.Player.setName(String),0,1,1,1
net.sf.freecol.common.model.Player.setNation(Nation),0,1,1,1
net.sf.freecol.common.model.Player.setNationType(NationType),0,1,1,1
net.sf.freecol.common.model.Player.setNewLandName(String),0,1,1,1
net.sf.freecol.common.model.Player.setNextGoingToUnit(Unit),0,1,1,1
net.sf.freecol.common.model.Player.setOfferedFathers(List<FoundingFather>),0,1,1,1
net.sf.freecol.common.model.Player.setPlayerType(PlayerType),0,1,1,1
net.sf.freecol.common.model.Player.setReady(boolean),0,1,1,1
net.sf.freecol.common.model.Player.setScore(int),0,1,1,1
"net.sf.freecol.common.model.Player.setStance(Player, Stance)",7,5,2,8
"net.sf.freecol.common.model.Player.setStances(Map<String, Stance>)",0,1,1,1
net.sf.freecol.common.model.Player.setTax(int),3,1,3,3
"net.sf.freecol.common.model.Player.setTension(Map<Player, Tension>)",0,1,1,1
"net.sf.freecol.common.model.Player.setTension(Player, Tension)",2,2,1,3
"net.sf.freecol.common.model.Player.strengthRatio(double, double)",1,1,1,2
net.sf.freecol.common.model.Player.toString(),0,1,1,1
net.sf.freecol.common.model.Player.updateImmigrationRequired(),1,2,1,2
net.sf.freecol.common.model.Player.writeAttributes(FreeColXMLWriter),8,1,7,7
net.sf.freecol.common.model.Player.writeChildren(FreeColXMLWriter),43,4,20,22
net.sf.freecol.common.model.PlayerTest.testAddAnotherPlayersUnit(),1,1,2,2
net.sf.freecol.common.model.PlayerTest.testClassicPlayers(),0,1,1,1
net.sf.freecol.common.model.PlayerTest.testEuropeanPlayer(Player),0,1,1,1
net.sf.freecol.common.model.PlayerTest.testFreecolPlayers(),5,3,4,5
net.sf.freecol.common.model.PlayerTest.testIndianPlayer(Player),0,1,1,1
net.sf.freecol.common.model.PlayerTest.testRoyalPlayer(Player),0,1,1,1
net.sf.freecol.common.model.PlayerTest.testTension(),0,1,1,1
net.sf.freecol.common.model.PlayerTest.testUnits(),0,1,1,1
"net.sf.freecol.common.model.PlunderType.PlunderType(FreeColXMLReader, Specification)",0,1,1,1
"net.sf.freecol.common.model.PlunderType.PlunderType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.PlunderType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.PlunderType.getPlunder(),0,1,1,1
net.sf.freecol.common.model.PlunderType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.PlunderType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.PlunderType.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.ProductionCache.ProductionCache(Colony),0,1,1,1
net.sf.freecol.common.model.ProductionCache.getGoodsCount(GoodsType),0,1,1,1
net.sf.freecol.common.model.ProductionCache.getNetProductionOf(GoodsType),0,1,1,1
net.sf.freecol.common.model.ProductionCache.getProductionInfo(Object),0,1,1,1
net.sf.freecol.common.model.ProductionCache.getProductionMap(),0,1,1,1
net.sf.freecol.common.model.ProductionCache.invalidate(),0,1,1,1
net.sf.freecol.common.model.ProductionCache.invalidate(GoodsType),1,1,1,2
net.sf.freecol.common.model.ProductionCache.isConsuming(GoodsType),0,1,1,1
net.sf.freecol.common.model.ProductionCache.isProducing(GoodsType),0,1,1,1
net.sf.freecol.common.model.ProductionCache.reallyUpdate(),22,1,12,12
net.sf.freecol.common.model.ProductionCache.update(),1,2,1,2
net.sf.freecol.common.model.ProductionInfo.addConsumption(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.addMaximumConsumption(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.addMaximumProduction(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.addProduction(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.addProduction(List<AbstractGoods>),0,1,1,1
"net.sf.freecol.common.model.ProductionInfo.append(StringBuilder, String, List<AbstractGoods>)",4,2,3,4
net.sf.freecol.common.model.ProductionInfo.atMaximumProduction(),5,4,3,5
net.sf.freecol.common.model.ProductionInfo.getConsumption(),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.getConsumptionDeficit(),5,1,4,4
net.sf.freecol.common.model.ProductionInfo.getMaximumConsumption(),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.getMaximumProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.getProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.getProductionDeficit(),5,1,4,4
net.sf.freecol.common.model.ProductionInfo.setConsumption(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.setMaximumConsumption(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.setMaximumProduction(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.setProduction(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionInfo.toString(),0,1,1,1
"net.sf.freecol.common.model.ProductionMap.ProductionTree.ProductionTree(AbstractGoods, AbstractGoods...)",4,1,3,3
net.sf.freecol.common.model.ProductionMap.ProductionTree.add(AbstractGoods),4,3,3,3
net.sf.freecol.common.model.ProductionMap.ProductionTree.get(GoodsType),4,3,3,3
net.sf.freecol.common.model.ProductionMap.ProductionTree.getLeafs(),0,1,1,1
net.sf.freecol.common.model.ProductionMap.ProductionTree.getRoot(),0,1,1,1
net.sf.freecol.common.model.ProductionMap.ProductionTree.remove(AbstractGoods),6,1,4,4
net.sf.freecol.common.model.ProductionMap.ProductionTree.setLeafs(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionMap.ProductionTree.setRoot(AbstractGoods),0,1,1,1
net.sf.freecol.common.model.ProductionMap.ProductionTree.toString(),1,1,2,2
net.sf.freecol.common.model.ProductionMap.add(AbstractGoods),14,1,5,6
net.sf.freecol.common.model.ProductionMap.add(List<AbstractGoods>),1,1,2,2
net.sf.freecol.common.model.ProductionMap.get(GoodsType),3,3,3,3
net.sf.freecol.common.model.ProductionMap.remove(AbstractGoods),2,1,2,2
net.sf.freecol.common.model.ProductionMap.remove(List<AbstractGoods>),1,1,2,2
net.sf.freecol.common.model.ProductionMap.toString(),0,1,1,1
"net.sf.freecol.common.model.ProductionType.ProductionType(AbstractGoods, boolean, String)",0,1,1,1
"net.sf.freecol.common.model.ProductionType.ProductionType(FreeColXMLReader, Specification)",0,1,1,1
"net.sf.freecol.common.model.ProductionType.ProductionType(GoodsType, GoodsType, int)",2,1,3,3
net.sf.freecol.common.model.ProductionType.ProductionType(List<AbstractGoods>),0,1,1,1
"net.sf.freecol.common.model.ProductionType.ProductionType(List<AbstractGoods>, List<AbstractGoods>)",0,1,1,1
net.sf.freecol.common.model.ProductionType.ProductionType(Specification),0,1,1,1
"net.sf.freecol.common.model.ProductionType.addInput(GoodsType, int)",1,1,1,2
net.sf.freecol.common.model.ProductionType.addOutput(AbstractGoods),1,1,1,2
"net.sf.freecol.common.model.ProductionType.addOutput(GoodsType, int)",1,1,1,2
net.sf.freecol.common.model.ProductionType.appliesExactly(String),1,1,2,2
net.sf.freecol.common.model.ProductionType.appliesTo(String),1,1,3,3
"net.sf.freecol.common.model.ProductionType.canProduce(GoodsType, Collection<ProductionType>)",1,1,2,2
net.sf.freecol.common.model.ProductionType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ProductionType.equals(Object),3,3,6,7
net.sf.freecol.common.model.ProductionType.getBestOutputFor(GoodsType),1,1,2,2
net.sf.freecol.common.model.ProductionType.getBestOutputType(),2,1,3,3
"net.sf.freecol.common.model.ProductionType.getBestProductionType(GoodsType, Collection<ProductionType>)",2,1,2,2
net.sf.freecol.common.model.ProductionType.getInputList(),1,1,1,2
net.sf.freecol.common.model.ProductionType.getInputs(),1,1,2,2
net.sf.freecol.common.model.ProductionType.getOutput(GoodsType),1,1,2,2
net.sf.freecol.common.model.ProductionType.getOutputList(),1,1,1,2
net.sf.freecol.common.model.ProductionType.getOutputs(),1,1,2,2
net.sf.freecol.common.model.ProductionType.getProductionLevel(),0,1,1,1
net.sf.freecol.common.model.ProductionType.getUnattended(),0,1,1,1
net.sf.freecol.common.model.ProductionType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.ProductionType.hashCode(),7,1,5,6
net.sf.freecol.common.model.ProductionType.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.ProductionType.readChild(FreeColXMLReader),9,1,5,5
net.sf.freecol.common.model.ProductionType.readChildren(FreeColXMLReader),2,1,3,3
net.sf.freecol.common.model.ProductionType.setInputs(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionType.setOutputs(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.ProductionType.setUnattended(boolean),0,1,1,1
net.sf.freecol.common.model.ProductionType.toString(),10,1,9,9
net.sf.freecol.common.model.ProductionType.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.ProductionType.writeChildren(FreeColXMLWriter),6,1,5,5
"net.sf.freecol.common.model.ProductionTypeTest.getGenericPotential(TileType, GoodsType)",0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testArctic(),1,1,2,2
net.sf.freecol.common.model.ProductionTypeTest.testBellProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testBorealForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testBroadleafForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testCigarProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testClothProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testCoatProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testConiferForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testCrossProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testDesert(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testGrassland(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testGreatRiver(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testHammerProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testHighSeas(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testHills(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testHorseProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testLake(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testMarsh(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testMixedForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testMountains(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testMusketProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testOcean(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testOtherBuildings(),1,1,2,2
net.sf.freecol.common.model.ProductionTypeTest.testPlains(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testPrairie(),0,1,1,1
"net.sf.freecol.common.model.ProductionTypeTest.testProduction(Map<GoodsType, Integer>, Map<GoodsType, Integer>, List<ProductionType>)",5,1,4,4
net.sf.freecol.common.model.ProductionTypeTest.testRainForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testRumProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testSavannah(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testScrubForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testSwamp(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testToolsProduction(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testTropicalForest(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testTundra(),0,1,1,1
net.sf.freecol.common.model.ProductionTypeTest.testWetlandForest(),0,1,1,1
net.sf.freecol.common.model.RandomRange.RandomRange(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.RandomRange.RandomRange(int, int, int, int)",2,3,1,3
"net.sf.freecol.common.model.RandomRange.getAmount(String, Random, boolean)",6,3,5,5
net.sf.freecol.common.model.RandomRange.getFactor(),0,1,1,1
net.sf.freecol.common.model.RandomRange.getMaximum(),0,1,1,1
net.sf.freecol.common.model.RandomRange.getMinimum(),0,1,1,1
net.sf.freecol.common.model.RandomRange.getProbability(),0,1,1,1
net.sf.freecol.common.model.RandomRange.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.RandomRange.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.RandomRangeTest.testRandomRange(),5,1,2,8
net.sf.freecol.common.model.Region.Region(Game),0,1,1,1
"net.sf.freecol.common.model.Region.Region(Game, String)",0,1,1,1
net.sf.freecol.common.model.Region.RegionType.RegionType(boolean),0,1,1,1
net.sf.freecol.common.model.Region.RegionType.getClaimable(),0,1,1,1
net.sf.freecol.common.model.Region.RegionType.getKey(),0,1,1,1
net.sf.freecol.common.model.Region.RegionType.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Region.RegionType.getUnknownKey(),0,1,1,1
net.sf.freecol.common.model.Region.addChild(Region),1,1,1,2
net.sf.freecol.common.model.Region.checkDiscover(Unit),4,4,3,4
net.sf.freecol.common.model.Region.copyIn(T),2,2,2,3
"net.sf.freecol.common.model.Region.discover(Player, Unit, Turn)",3,2,5,5
net.sf.freecol.common.model.Region.fixRegionKey(String),5,5,4,5
net.sf.freecol.common.model.Region.getChildren(),1,1,2,2
net.sf.freecol.common.model.Region.getClaimable(),0,1,1,1
net.sf.freecol.common.model.Region.getDiscoverable(),0,1,1,1
net.sf.freecol.common.model.Region.getDiscoverableRegion(),3,1,3,3
net.sf.freecol.common.model.Region.getDiscoveredBy(),0,1,1,1
net.sf.freecol.common.model.Region.getDiscoveredIn(),0,1,1,1
net.sf.freecol.common.model.Region.getDiscoverer(),0,1,1,1
net.sf.freecol.common.model.Region.getKey(),0,1,1,1
net.sf.freecol.common.model.Region.getLabel(),3,1,3,3
net.sf.freecol.common.model.Region.getName(),0,1,1,1
net.sf.freecol.common.model.Region.getParent(),0,1,1,1
net.sf.freecol.common.model.Region.getScoreValue(),0,1,1,1
net.sf.freecol.common.model.Region.getType(),0,1,1,1
net.sf.freecol.common.model.Region.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Region.hasName(),1,1,1,2
net.sf.freecol.common.model.Region.isLeaf(),1,1,2,2
net.sf.freecol.common.model.Region.isPacific(),2,1,3,3
net.sf.freecol.common.model.Region.readAttributes(FreeColXMLReader),3,1,2,3
net.sf.freecol.common.model.Region.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Region.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Region.setChildren(List<Region>),0,1,1,1
net.sf.freecol.common.model.Region.setClaimable(boolean),0,1,1,1
net.sf.freecol.common.model.Region.setDiscoverable(boolean),0,1,1,1
net.sf.freecol.common.model.Region.setDiscoveredBy(Player),0,1,1,1
net.sf.freecol.common.model.Region.setDiscoveredIn(Turn),0,1,1,1
net.sf.freecol.common.model.Region.setName(String),0,1,1,1
net.sf.freecol.common.model.Region.setParent(Region),0,1,1,1
net.sf.freecol.common.model.Region.setScoreValue(int),0,1,1,1
net.sf.freecol.common.model.Region.toString(),5,1,2,4
net.sf.freecol.common.model.Region.writeAttributes(FreeColXMLWriter),6,1,7,7
net.sf.freecol.common.model.Region.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.Resource.Resource(Game, String)",0,1,1,1
"net.sf.freecol.common.model.Resource.Resource(Game, Tile, ResourceType)",0,1,1,1
"net.sf.freecol.common.model.Resource.Resource(Game, Tile, ResourceType, int)",1,2,1,2
"net.sf.freecol.common.model.Resource.applyBonus(GoodsType, UnitType, int)",2,1,1,3
"net.sf.freecol.common.model.Resource.canProduce(GoodsType, UnitType)",1,2,1,2
"net.sf.freecol.common.model.Resource.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.common.model.Resource.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Resource.getBestGoodsType(),0,1,1,1
net.sf.freecol.common.model.Resource.getLayer(),0,1,1,1
net.sf.freecol.common.model.Resource.getNameKey(),0,1,1,1
"net.sf.freecol.common.model.Resource.getProductionModifiers(GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.Resource.getQuantity(),0,1,1,1
net.sf.freecol.common.model.Resource.getType(),0,1,1,1
net.sf.freecol.common.model.Resource.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Resource.getZIndex(),0,1,1,1
net.sf.freecol.common.model.Resource.isComplete(),0,1,1,1
net.sf.freecol.common.model.Resource.isNatural(),0,1,1,1
net.sf.freecol.common.model.Resource.isTileTypeAllowed(TileType),0,1,1,1
net.sf.freecol.common.model.Resource.isUnlimited(),0,1,1,1
net.sf.freecol.common.model.Resource.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Resource.setQuantity(int),0,1,1,1
net.sf.freecol.common.model.Resource.toString(),2,1,3,3
"net.sf.freecol.common.model.Resource.useQuantity(GoodsType, UnitType, int)",0,1,1,1
net.sf.freecol.common.model.Resource.useQuantity(int),3,1,3,3
net.sf.freecol.common.model.Resource.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.ResourceType.ResourceType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.ResourceType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.ResourceType.getBestGoodsType(),1,1,2,2
net.sf.freecol.common.model.ResourceType.getMaxValue(),0,1,1,1
net.sf.freecol.common.model.ResourceType.getMinValue(),0,1,1,1
net.sf.freecol.common.model.ResourceType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.ResourceType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.ResourceType.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.Role.Role(String, Specification)",0,1,1,1
"net.sf.freecol.common.model.Role.RoleChange.RoleChange(String, String)",0,1,1,1
net.sf.freecol.common.model.Role.RoleChange.getCapture(Specification),0,1,1,1
net.sf.freecol.common.model.Role.RoleChange.getFrom(Specification),0,1,1,1
"net.sf.freecol.common.model.Role.addRoleChange(String, String)",1,1,1,2
"net.sf.freecol.common.model.Role.canBeBuiltInColony(Colony, List<BuildableType>)",0,1,1,1
net.sf.freecol.common.model.Role.copyIn(T),2,2,2,3
"net.sf.freecol.common.model.Role.getAvailableRoles(Player, UnitType, List<Role>)",0,1,1,1
net.sf.freecol.common.model.Role.getDefence(),0,1,1,1
net.sf.freecol.common.model.Role.getDowngrade(),0,1,1,1
net.sf.freecol.common.model.Role.getExpertUnit(),0,1,1,1
"net.sf.freecol.common.model.Role.getGoodsDifference(Role, int, Role, int)",10,1,7,7
net.sf.freecol.common.model.Role.getMaximumCount(),0,1,1,1
net.sf.freecol.common.model.Role.getOffence(),0,1,1,1
net.sf.freecol.common.model.Role.getRequiredGoods(int),0,1,1,1
net.sf.freecol.common.model.Role.getRequiredGoodsList(int),4,1,4,4
net.sf.freecol.common.model.Role.getRequiredGoodsPrice(Market),0,1,1,1
net.sf.freecol.common.model.Role.getRoleChanges(),1,1,1,2
net.sf.freecol.common.model.Role.getRoleIdSuffix(String),0,1,1,1
net.sf.freecol.common.model.Role.getRoleIndex(),3,1,2,3
net.sf.freecol.common.model.Role.getRoleSuffix(),0,1,1,1
net.sf.freecol.common.model.Role.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Role.isCompatibleWith(Role),0,1,1,1
net.sf.freecol.common.model.Role.isDefaultRole(),0,1,1,1
net.sf.freecol.common.model.Role.isDefaultRoleId(String),0,1,1,1
net.sf.freecol.common.model.Role.isDefensive(),0,1,1,1
net.sf.freecol.common.model.Role.isOffensive(),0,1,1,1
net.sf.freecol.common.model.Role.readAttributes(FreeColXMLReader),4,1,3,3
net.sf.freecol.common.model.Role.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.Role.readChildren(FreeColXMLReader),1,1,1,2
"net.sf.freecol.common.model.Role.rolesCompatible(Role, Role)",4,3,5,5
net.sf.freecol.common.model.Role.setDowngrade(Role),0,1,1,1
net.sf.freecol.common.model.Role.setExpertUnit(UnitType),0,1,1,1
net.sf.freecol.common.model.Role.setMaximumCount(int),0,1,1,1
net.sf.freecol.common.model.Role.setRoleChanges(List<RoleChange>),2,1,2,2
net.sf.freecol.common.model.Role.toFullString(),0,1,1,1
net.sf.freecol.common.model.Role.writeAttributes(FreeColXMLWriter),3,1,4,4
net.sf.freecol.common.model.Role.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.RoleTest.testCompatibleRoles(),0,1,1,1
net.sf.freecol.common.model.RoleTest.testGetRoleWithAbility(),0,1,1,1
net.sf.freecol.common.model.RoleTest.testGoodsDifference(),0,1,1,1
net.sf.freecol.common.model.RoleTest.testMilitaryRoles(),0,1,1,1
net.sf.freecol.common.model.RoleTest.testRoleComparator(),0,1,1,1
"net.sf.freecol.common.model.SchoolTest.addSchoolToColony(Game, Colony, SchoolLevel)",1,1,1,4
"net.sf.freecol.common.model.SchoolTest.getUnitList(Colony, UnitType)",0,1,1,1
net.sf.freecol.common.model.SchoolTest.testChangeTeachers(),0,1,1,1
net.sf.freecol.common.model.SchoolTest.testEducationOption(),0,1,1,1
net.sf.freecol.common.model.SchoolTest.testUpgrades(),0,1,1,1
net.sf.freecol.common.model.Scope.Scope(),0,1,1,1
net.sf.freecol.common.model.Scope.Scope(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Scope.appliesTo(FreeColObject),17,9,6,11
net.sf.freecol.common.model.Scope.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Scope.equals(Object),32,18,6,18
net.sf.freecol.common.model.Scope.getAbilityId(),0,1,1,1
net.sf.freecol.common.model.Scope.getAbilityValue(),0,1,1,1
net.sf.freecol.common.model.Scope.getFeatureString(),4,1,2,3
net.sf.freecol.common.model.Scope.getKey(),6,1,4,4
net.sf.freecol.common.model.Scope.getMatchNegated(),0,1,1,1
net.sf.freecol.common.model.Scope.getMatchesNull(),0,1,1,1
net.sf.freecol.common.model.Scope.getMethodName(),0,1,1,1
net.sf.freecol.common.model.Scope.getMethodValue(),0,1,1,1
net.sf.freecol.common.model.Scope.getType(),0,1,1,1
net.sf.freecol.common.model.Scope.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Scope.hashCode(),7,1,5,8
net.sf.freecol.common.model.Scope.readAttributes(FreeColXMLReader),8,1,5,5
net.sf.freecol.common.model.Scope.setAbilityId(String),0,1,1,1
net.sf.freecol.common.model.Scope.setAbilityValue(boolean),0,1,1,1
net.sf.freecol.common.model.Scope.setMatchNegated(boolean),0,1,1,1
net.sf.freecol.common.model.Scope.setMatchesNull(boolean),0,1,1,1
net.sf.freecol.common.model.Scope.setMethodName(String),0,1,1,1
net.sf.freecol.common.model.Scope.setMethodValue(String),0,1,1,1
net.sf.freecol.common.model.Scope.setType(String),0,1,1,1
net.sf.freecol.common.model.Scope.toString(),4,1,5,5
net.sf.freecol.common.model.Scope.writeAttributes(FreeColXMLWriter),5,1,5,5
net.sf.freecol.common.model.ScopeContainer.ScopeContainer(),0,1,1,1
net.sf.freecol.common.model.ScopeContainer.add(Scope),2,2,1,3
net.sf.freecol.common.model.ScopeContainer.addAll(Collection<Scope>),3,2,2,4
net.sf.freecol.common.model.ScopeContainer.addAll(ScopeContainer),1,1,2,2
"net.sf.freecol.common.model.ScopeContainer.addScope(ScopeContainer, Scope)",1,1,1,2
net.sf.freecol.common.model.ScopeContainer.appliesTo(FreeColObject),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.clear(),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.clearScopes(ScopeContainer),1,1,2,2
"net.sf.freecol.common.model.ScopeContainer.equalScopes(ScopeContainer, ScopeContainer)",3,1,3,3
net.sf.freecol.common.model.ScopeContainer.equals(Object),14,8,3,8
net.sf.freecol.common.model.ScopeContainer.get(),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.getList(),1,1,1,2
net.sf.freecol.common.model.ScopeContainer.getScopeList(ScopeContainer),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.getScopes(ScopeContainer),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.hashCode(),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.isEmpty(),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.isScopeContainerEmpty(ScopeContainer),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.remove(Scope),1,1,2,2
"net.sf.freecol.common.model.ScopeContainer.removeScope(ScopeContainer, Scope)",1,1,2,2
"net.sf.freecol.common.model.ScopeContainer.scopeContainerAppliesTo(ScopeContainer, FreeColObject)",1,1,2,2
"net.sf.freecol.common.model.ScopeContainer.scopeContainerToXML(ScopeContainer, FreeColXMLWriter)",1,1,2,2
net.sf.freecol.common.model.ScopeContainer.set(List<Scope>),3,1,2,3
"net.sf.freecol.common.model.ScopeContainer.setScopes(ScopeContainer, Collection<Scope>)",5,3,3,4
net.sf.freecol.common.model.ScopeContainer.sort(Comparator<Scope>),1,1,2,2
net.sf.freecol.common.model.ScopeContainer.toXML(FreeColXMLWriter),2,2,2,3
net.sf.freecol.common.model.ScopeTest.testAbilityScope(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testCombinedScope(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testEmptyScope(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testEquality(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testGameObjects(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testMatchesNull(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testMethodScope(),0,1,1,1
net.sf.freecol.common.model.ScopeTest.testTypeScope(),0,1,1,1
net.sf.freecol.common.model.SerializationTest.buildSource(FreeColObject),0,1,1,1
net.sf.freecol.common.model.SerializationTest.buildValidator(String),0,1,1,1
"net.sf.freecol.common.model.SerializationTest.logParseFailure(SAXParseException, String)",0,1,1,1
net.sf.freecol.common.model.SerializationTest.testDifficulty(),2,1,3,3
net.sf.freecol.common.model.SerializationTest.testGeneratedLists(),1,1,2,2
net.sf.freecol.common.model.SerializationTest.testSpecification(),2,1,3,3
net.sf.freecol.common.model.SerializationTest.testStandardMaps(),1,1,2,2
net.sf.freecol.common.model.SerializationTest.testStringTemplate(),1,1,2,2
net.sf.freecol.common.model.SerializationTest.testValidation(),3,1,3,3
net.sf.freecol.common.model.SerializationTest.validateMap(String),1,1,2,2
"net.sf.freecol.common.model.Settlement.Settlement(Game, Player, String, Tile)",0,1,1,1
"net.sf.freecol.common.model.Settlement.Settlement(Game, String)",0,1,1,1
net.sf.freecol.common.model.Settlement.addTile(Tile),0,1,1,1
net.sf.freecol.common.model.Settlement.canBombardEnemyShip(),1,1,2,2
net.sf.freecol.common.model.Settlement.canImproveUnitMilitaryRole(Unit),1,1,2,2
net.sf.freecol.common.model.Settlement.canProvideGoods(List<AbstractGoods>),2,1,1,2
net.sf.freecol.common.model.Settlement.changeOwner(Player),2,2,2,3
net.sf.freecol.common.model.Settlement.changeType(SettlementType),2,1,3,3
"net.sf.freecol.common.model.Settlement.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.common.model.Settlement.copyIn(T),3,2,3,4
net.sf.freecol.common.model.Settlement.disposeResources(),1,1,2,2
"net.sf.freecol.common.model.Settlement.equipForRole(Unit, Role, int)",3,2,2,4
net.sf.freecol.common.model.Settlement.exciseSettlement(),3,1,4,4
net.sf.freecol.common.model.Settlement.getAllUnitsList(),1,2,2,2
net.sf.freecol.common.model.Settlement.getConsumptionOf(GoodsType),0,1,1,1
net.sf.freecol.common.model.Settlement.getConsumptionOf(List<GoodsType>),1,1,2,2
net.sf.freecol.common.model.Settlement.getFeatureContainer(),0,1,1,1
net.sf.freecol.common.model.Settlement.getFoodConsumption(),0,1,1,1
net.sf.freecol.common.model.Settlement.getHighSeasCount(),1,1,2,2
net.sf.freecol.common.model.Settlement.getImmigration(),0,1,1,1
net.sf.freecol.common.model.Settlement.getLiberty(),0,1,1,1
net.sf.freecol.common.model.Settlement.getLineOfSight(),0,1,1,1
net.sf.freecol.common.model.Settlement.getLinkTarget(Player),1,1,2,2
net.sf.freecol.common.model.Settlement.getLocationImageKey(),0,1,1,1
net.sf.freecol.common.model.Settlement.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.Settlement.getName(),0,1,1,1
net.sf.freecol.common.model.Settlement.getNoAddReason(Locatable),4,4,2,4
net.sf.freecol.common.model.Settlement.getOwnedTiles(),0,1,1,1
net.sf.freecol.common.model.Settlement.getOwner(),0,1,1,1
"net.sf.freecol.common.model.Settlement.getPlunder(Unit, Random)",1,1,2,2
net.sf.freecol.common.model.Settlement.getRadius(),0,1,1,1
net.sf.freecol.common.model.Settlement.getRank(),0,1,1,1
net.sf.freecol.common.model.Settlement.getSettlement(),0,1,1,1
net.sf.freecol.common.model.Settlement.getTile(),0,1,1,1
net.sf.freecol.common.model.Settlement.getType(),0,1,1,1
net.sf.freecol.common.model.Settlement.getVisibleTileSet(),1,1,2,2
net.sf.freecol.common.model.Settlement.getWarehouseCapacity(),0,1,1,1
net.sf.freecol.common.model.Settlement.isCapital(),0,1,1,1
net.sf.freecol.common.model.Settlement.isConnectedPort(),1,1,2,2
net.sf.freecol.common.model.Settlement.isLandLocked(),0,1,1,1
net.sf.freecol.common.model.Settlement.placeSettlement(boolean),4,1,4,4
net.sf.freecol.common.model.Settlement.priceGoods(List<AbstractGoods>),1,2,1,2
net.sf.freecol.common.model.Settlement.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Settlement.readChild(FreeColXMLReader),7,1,5,5
net.sf.freecol.common.model.Settlement.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Settlement.removeTile(Tile),0,1,1,1
net.sf.freecol.common.model.Settlement.setCapital(boolean),1,1,2,2
net.sf.freecol.common.model.Settlement.setName(String),0,1,1,1
net.sf.freecol.common.model.Settlement.setOwnedTiles(Collection<Tile>),0,1,1,1
net.sf.freecol.common.model.Settlement.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Settlement.setType(SettlementType),0,1,1,1
net.sf.freecol.common.model.Settlement.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Settlement.writeChildren(FreeColXMLWriter),15,4,7,8
net.sf.freecol.common.model.SettlementTest.testCanImproveUnitMilitaryRole(),0,1,1,1
net.sf.freecol.common.model.SettlementTest.testColonyClaimsWater(),1,1,2,2
net.sf.freecol.common.model.SettlementTest.testColonyRadius(),0,1,1,1
net.sf.freecol.common.model.SettlementTest.testLineOfSight(),0,1,1,1
net.sf.freecol.common.model.SettlementTest.testSettlementDoesNotClaimWater(),1,1,2,2
net.sf.freecol.common.model.SettlementTest.testSettlementRadius(),0,1,1,1
"net.sf.freecol.common.model.SettlementType.SettlementType(FreeColXMLReader, Specification)",0,1,1,1
"net.sf.freecol.common.model.SettlementType.SettlementType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.SettlementType.addPlunderType(PlunderType),1,1,1,2
net.sf.freecol.common.model.SettlementType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.SettlementType.getClaimableRadius(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getConvertThreshold(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getExtraClaimableRadius(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getGifts(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getMaximumGrowth(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getMaximumSize(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getMinimumGrowth(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getMinimumSize(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getPlunderRange(Unit),2,2,2,3
net.sf.freecol.common.model.SettlementType.getPlunderTypes(),1,1,2,2
net.sf.freecol.common.model.SettlementType.getTradeBonus(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getVisibleRadius(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getWanderingRadius(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getWarehouseCapacity(),0,1,1,1
net.sf.freecol.common.model.SettlementType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.SettlementType.isCapital(),0,1,1,1
net.sf.freecol.common.model.SettlementType.readAttributes(FreeColXMLReader),20,1,11,11
net.sf.freecol.common.model.SettlementType.readChild(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.SettlementType.readChildren(FreeColXMLReader),1,1,1,2
net.sf.freecol.common.model.SettlementType.setPlunderTypes(List<PlunderType>),2,1,2,2
net.sf.freecol.common.model.SettlementType.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.SettlementType.writeChildren(FreeColXMLWriter),4,1,4,4
net.sf.freecol.common.model.SimpleCombatModel.SimpleCombatModel(),0,1,1,1
"net.sf.freecol.common.model.SimpleCombatModel.addLandDefensiveModifiers(FreeColGameObject, Unit, Set<Modifier>)",26,1,14,14
"net.sf.freecol.common.model.SimpleCombatModel.addLandOffensiveModifiers(Unit, FreeColGameObject, Set<Modifier>)",30,4,16,18
"net.sf.freecol.common.model.SimpleCombatModel.addNavalDefensiveModifiers(Unit, Set<Modifier>)",1,1,2,2
"net.sf.freecol.common.model.SimpleCombatModel.addNavalOffensiveModifiers(Unit, Set<Modifier>)",1,1,2,2
"net.sf.freecol.common.model.SimpleCombatModel.addPopularSupportBonus(Colony, Unit, Set<Modifier>)",5,1,3,4
"net.sf.freecol.common.model.SimpleCombatModel.calculateCombatOdds(FreeColGameObject, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.model.SimpleCombatModel.calculateCombatOdds(FreeColGameObject, FreeColGameObject, LogBuilder)",11,3,8,10
"net.sf.freecol.common.model.SimpleCombatModel.generateAttackResult(Random, FreeColGameObject, FreeColGameObject)",20,4,11,12
"net.sf.freecol.common.model.SimpleCombatModel.getDefencePower(FreeColGameObject, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.model.SimpleCombatModel.getDefencePower(FreeColGameObject, FreeColGameObject, LogBuilder)",5,2,6,6
"net.sf.freecol.common.model.SimpleCombatModel.getDefensiveModifiers(FreeColGameObject, FreeColGameObject)",8,3,7,7
"net.sf.freecol.common.model.SimpleCombatModel.getOffencePower(FreeColGameObject, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.model.SimpleCombatModel.getOffencePower(FreeColGameObject, FreeColGameObject, LogBuilder)",13,4,9,10
"net.sf.freecol.common.model.SimpleCombatModel.getOffensiveModifiers(FreeColGameObject, FreeColGameObject)",11,4,8,9
net.sf.freecol.common.model.SimpleCombatModel.hasStrongDefenceModifier(FreeColObject),1,1,2,2
"net.sf.freecol.common.model.SimpleCombatModel.isAmbush(FreeColGameObject, FreeColGameObject)",1,1,3,3
"net.sf.freecol.common.model.SimpleCombatModel.logModifiers(LogBuilder, Set<Modifier>)",0,1,1,1
"net.sf.freecol.common.model.SimpleCombatModel.resolveAttack(Unit, Unit, boolean, double, List<CombatEffectType>)",114,1,53,56
net.sf.freecol.common.model.SoLTest.testSoL(),1,1,2,2
net.sf.freecol.common.model.Specification.AbilityReader.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Specification.ModifierReader.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Specification.OptionReader.readChild(FreeColXMLReader),4,1,3,3
net.sf.freecol.common.model.Specification.OptionReader.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Specification.Source.Source(String),0,1,1,1
net.sf.freecol.common.model.Specification.Source.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Specification.Source.toString(),0,1,1,1
net.sf.freecol.common.model.Specification.Source.toXML(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.Specification.Specification(),1,1,2,2
net.sf.freecol.common.model.Specification.Specification(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Specification.Specification(InputStream),0,1,1,1
"net.sf.freecol.common.model.Specification.TypeReader.TypeReader(Class<T>, List<T>)",0,1,1,1
net.sf.freecol.common.model.Specification.TypeReader.readChildren(FreeColXMLReader),21,1,10,10
net.sf.freecol.common.model.Specification.addAbility(Ability),0,1,1,1
net.sf.freecol.common.model.Specification.addAbility(String),1,1,2,2
net.sf.freecol.common.model.Specification.addAbstractOption(AbstractOption),0,1,1,1
net.sf.freecol.common.model.Specification.addModifier(Modifier),1,1,2,2
"net.sf.freecol.common.model.Specification.addOptionGroup(OptionGroup, boolean)",8,1,4,4
net.sf.freecol.common.model.Specification.addTestFather(FoundingFather),0,1,1,1
"net.sf.freecol.common.model.Specification.addType(String, FreeColSpecObjectType)",0,1,1,1
net.sf.freecol.common.model.Specification.applyDifficultyLevel(OptionGroup),1,2,2,2
net.sf.freecol.common.model.Specification.applyDifficultyLevel(String),0,1,1,1
net.sf.freecol.common.model.Specification.applyFixes(),0,1,1,1
"net.sf.freecol.common.model.Specification.checkDifficultyIntegerOption(String, String, LogBuilder, int)",34,11,10,15
"net.sf.freecol.common.model.Specification.checkDifficultyOptionGroup(String, LogBuilder, String...)",26,7,10,12
"net.sf.freecol.common.model.Specification.checkDifficultyPercentageOption(String, String, LogBuilder, int)",34,11,10,15
"net.sf.freecol.common.model.Specification.checkDifficultyUnitListOption(String, String, LogBuilder)",37,11,10,16
"net.sf.freecol.common.model.Specification.checkOp(String, String, R, Class<T>)",2,2,2,3
net.sf.freecol.common.model.Specification.clean(String),72,3,33,38
net.sf.freecol.common.model.Specification.clearEuropeanNationalAdvantages(),1,1,2,2
net.sf.freecol.common.model.Specification.compareVersion(String),7,4,2,6
net.sf.freecol.common.model.Specification.disableEditing(),3,1,3,3
"net.sf.freecol.common.model.Specification.dropOptions(AbstractOption, Collection<AbstractOption>)",7,1,4,4
"net.sf.freecol.common.model.Specification.findType(String, Class<T>)",2,3,1,3
net.sf.freecol.common.model.Specification.fixDifficultyOptions(),22,1,12,12
net.sf.freecol.common.model.Specification.fixGameOptions(),0,1,1,1
net.sf.freecol.common.model.Specification.fixMapGeneratorOptions(),0,1,1,1
net.sf.freecol.common.model.Specification.fixOrphanOptions(),6,1,6,6
net.sf.freecol.common.model.Specification.fixRoles(),3,3,2,4
net.sf.freecol.common.model.Specification.fixSpec(),88,3,48,54
net.sf.freecol.common.model.Specification.fixUnitChanges(),3,2,3,4
net.sf.freecol.common.model.Specification.generateDynamicOptions(),8,1,5,6
net.sf.freecol.common.model.Specification.getAbilities(String),1,1,2,2
net.sf.freecol.common.model.Specification.getAge(Turn),6,1,1,4
net.sf.freecol.common.model.Specification.getBuildableType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getBuildableUnitTypes(),0,1,1,1
net.sf.freecol.common.model.Specification.getBuildingType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getBuildingTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getDefaultNationType(),0,1,1,1
net.sf.freecol.common.model.Specification.getDefaultRole(),0,1,1,1
net.sf.freecol.common.model.Specification.getDefaultUnitType(),0,1,1,1
net.sf.freecol.common.model.Specification.getDefaultUnitType(NationType),10,1,8,8
net.sf.freecol.common.model.Specification.getDefaultUnitType(Player),1,1,2,2
net.sf.freecol.common.model.Specification.getDifficultyLevel(),0,1,1,1
net.sf.freecol.common.model.Specification.getDifficultyLevels(),1,1,2,2
net.sf.freecol.common.model.Specification.getDifficultyOptionGroup(),0,1,1,1
net.sf.freecol.common.model.Specification.getDifficultyOptionGroup(String),0,1,1,1
net.sf.freecol.common.model.Specification.getDisaster(String),0,1,1,1
net.sf.freecol.common.model.Specification.getDisasters(),0,1,1,1
net.sf.freecol.common.model.Specification.getEuropeanNationTypes(),0,1,1,1
net.sf.freecol.common.model.Specification.getEuropeanNations(),0,1,1,1
net.sf.freecol.common.model.Specification.getEvent(String),0,1,1,1
net.sf.freecol.common.model.Specification.getEvents(),0,1,1,1
net.sf.freecol.common.model.Specification.getExpertForProducing(GoodsType),0,1,1,1
net.sf.freecol.common.model.Specification.getFarmedGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getFastestLandUnitType(),0,1,1,1
net.sf.freecol.common.model.Specification.getFastestNavalUnitType(),0,1,1,1
net.sf.freecol.common.model.Specification.getFoodGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getFoundingFather(String),0,1,1,1
net.sf.freecol.common.model.Specification.getFoundingFathers(),0,1,1,1
net.sf.freecol.common.model.Specification.getGameOptions(),0,1,1,1
net.sf.freecol.common.model.Specification.getGoodsType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getHillsTileTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getId(),0,1,1,1
net.sf.freecol.common.model.Specification.getImmigrationGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getIndianNationTypes(),0,1,1,1
net.sf.freecol.common.model.Specification.getIndianNations(),0,1,1,1
net.sf.freecol.common.model.Specification.getInitialPrice(GoodsType),2,1,3,3
net.sf.freecol.common.model.Specification.getLibertyGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getMapGeneratorOptions(),0,1,1,1
net.sf.freecol.common.model.Specification.getMilitaryRoles(),0,1,1,1
net.sf.freecol.common.model.Specification.getMilitaryRolesList(),1,1,2,2
net.sf.freecol.common.model.Specification.getMissionaryRole(),0,1,1,1
net.sf.freecol.common.model.Specification.getModifiers(String),1,1,2,2
net.sf.freecol.common.model.Specification.getMountainsTileTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getNation(String),0,1,1,1
net.sf.freecol.common.model.Specification.getNationType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getNationTypes(),0,1,1,1
net.sf.freecol.common.model.Specification.getNations(),0,1,1,1
"net.sf.freecol.common.model.Specification.getNeededTurnsOfTraining(UnitType, UnitType)",1,2,1,2
net.sf.freecol.common.model.Specification.getNewWorldGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getNewWorldLuxuryGoodsTypeList(),0,1,1,1
"net.sf.freecol.common.model.Specification.getOption(String, Class<T>)",5,3,4,4
net.sf.freecol.common.model.Specification.getOptionGroup(String),3,3,3,3
net.sf.freecol.common.model.Specification.getPioneerRole(),0,1,1,1
net.sf.freecol.common.model.Specification.getPrimaryFoodType(),0,1,1,1
net.sf.freecol.common.model.Specification.getREFNationTypes(),0,1,1,1
net.sf.freecol.common.model.Specification.getREFNations(),0,1,1,1
net.sf.freecol.common.model.Specification.getREFRoles(boolean),0,1,1,1
net.sf.freecol.common.model.Specification.getREFRolesList(boolean),1,1,2,2
net.sf.freecol.common.model.Specification.getREFUnitTypes(boolean),0,1,1,1
net.sf.freecol.common.model.Specification.getRawBuildingGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getRawMaterialsForStorableBuildingMaterials(),0,1,1,1
net.sf.freecol.common.model.Specification.getRawMaterialsForUnstorableBuildingMaterials(),0,1,1,1
net.sf.freecol.common.model.Specification.getResourceType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getResourceTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getRole(String),0,1,1,1
"net.sf.freecol.common.model.Specification.getRoleWithAbility(String, List<Role>)",0,1,1,1
net.sf.freecol.common.model.Specification.getRoles(),0,1,1,1
net.sf.freecol.common.model.Specification.getRolesList(),0,1,1,1
net.sf.freecol.common.model.Specification.getScoutRole(),0,1,1,1
net.sf.freecol.common.model.Specification.getStorableGoodsTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getTileImprovementType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getTileImprovementTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getTileType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getTileTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getType(String),0,1,1,1
"net.sf.freecol.common.model.Specification.getType(String, Class<T>)",1,1,2,2
"net.sf.freecol.common.model.Specification.getTypesProviding(String, boolean)",1,1,2,2
"net.sf.freecol.common.model.Specification.getTypesWithAbility(Class<T>, String...)",1,1,2,2
"net.sf.freecol.common.model.Specification.getTypesWithoutAbility(Class<T>, String...)",1,1,2,2
"net.sf.freecol.common.model.Specification.getUnitChange(String, UnitType)",0,1,1,1
"net.sf.freecol.common.model.Specification.getUnitChange(String, UnitType, UnitType)",1,1,2,2
net.sf.freecol.common.model.Specification.getUnitChangeType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitChangeTypeList(),0,1,1,1
"net.sf.freecol.common.model.Specification.getUnitChanges(String, UnitType)",1,1,2,2
net.sf.freecol.common.model.Specification.getUnitType(String),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitTypeList(),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitTypesPurchasedInEurope(Player),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitTypesTrainedInEurope(Player),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitTypesWithAbility(String...),0,1,1,1
net.sf.freecol.common.model.Specification.getUnitTypesWithoutAbility(String...),0,1,1,1
net.sf.freecol.common.model.Specification.getUnknownEnemyNation(),0,1,1,1
net.sf.freecol.common.model.Specification.getVersion(),0,1,1,1
net.sf.freecol.common.model.Specification.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Specification.hasAbility(String),1,1,2,2
"net.sf.freecol.common.model.Specification.hasOption(String, Class<T>)",2,2,2,3
net.sf.freecol.common.model.Specification.load(InputStream),0,1,1,1
net.sf.freecol.common.model.Specification.loadMods(List<FreeColModFile>),8,1,6,6
"net.sf.freecol.common.model.Specification.mergeGameOptions(OptionGroup, String)",1,2,1,2
net.sf.freecol.common.model.Specification.mergeGroup(OptionGroup),7,2,4,5
"net.sf.freecol.common.model.Specification.mergeMapGeneratorOptions(OptionGroup, String)",1,2,1,2
"net.sf.freecol.common.model.Specification.newType(String, Class<T>)",1,1,2,2
"net.sf.freecol.common.model.Specification.prepare(Advantages, OptionGroup)",2,1,3,3
"net.sf.freecol.common.model.Specification.prepare(Advantages, String)",1,1,2,2
net.sf.freecol.common.model.Specification.readFromXML(FreeColXMLReader),14,4,8,10
net.sf.freecol.common.model.Specification.removeType(String),0,1,1,1
net.sf.freecol.common.model.Specification.setDifficultyOptionGroup(OptionGroup),1,1,2,2
net.sf.freecol.common.model.Specification.setGameOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.model.Specification.setMapGeneratorOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.model.Specification.toXML(FreeColXMLWriter),5,1,5,5
net.sf.freecol.common.model.Specification.updateGameAndMapOptions(),0,1,1,1
"net.sf.freecol.common.model.Specification.writeSection(FreeColXMLWriter, String, Collection<T>)",1,1,2,2
net.sf.freecol.common.model.SpecificationTest.testExtends(),2,1,3,3
net.sf.freecol.common.model.SpecificationTest.testExtendsDelete(),2,1,3,3
net.sf.freecol.common.model.SpecificationTest.testFoundingFathers(),0,1,1,1
net.sf.freecol.common.model.SpecificationTest.testGetDefaultUnitType(),14,1,3,7
net.sf.freecol.common.model.SpecificationTest.testGoodsTypes(),0,1,1,1
net.sf.freecol.common.model.SpecificationTest.testLoad(),1,1,2,2
net.sf.freecol.common.model.SpecificationTest.testLoadMods(),1,1,2,2
net.sf.freecol.common.model.SpecificationTest.testModifiers(),0,1,1,1
net.sf.freecol.common.model.SpecificationTest.testNationTypes(),0,1,1,1
net.sf.freecol.common.model.SpecificationTest.testNations(),0,1,1,1
net.sf.freecol.common.model.SpecificationTest.testRequiredAbilitiesForRoles(),2,1,2,2
net.sf.freecol.common.model.SpecificationTest.testUnitAbilities(),0,1,1,1
net.sf.freecol.common.model.Stance.badStance(),0,1,1,1
net.sf.freecol.common.model.Stance.badTransition(Stance),0,1,1,1
net.sf.freecol.common.model.Stance.getKey(),0,1,1,1
net.sf.freecol.common.model.Stance.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Stance.getOtherStanceChangeKey(),0,1,1,1
net.sf.freecol.common.model.Stance.getStanceChangeKey(),0,1,1,1
net.sf.freecol.common.model.Stance.getStanceFromTension(Tension),7,5,1,8
net.sf.freecol.common.model.Stance.getTensionModifier(Stance),9,17,5,26
net.sf.freecol.common.model.Stance.isIncitable(),1,2,1,2
"net.sf.freecol.common.model.StanceTradeItem.StanceTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.StanceTradeItem.StanceTradeItem(Game, Player, Player, Stance)",0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.StanceTradeItem.equals(Object),2,2,3,3
net.sf.freecol.common.model.StanceTradeItem.evaluateFor(Player),8,1,1,8
net.sf.freecol.common.model.StanceTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.getStance(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.isValid(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.setStance(Stance),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.StanceTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.StringTemplate.StringTemplate(),0,1,1,1
net.sf.freecol.common.model.StringTemplate.StringTemplate(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.model.StringTemplate.StringTemplate(String, String, TemplateType)",0,1,1,1
"net.sf.freecol.common.model.StringTemplate.StringTemplate(String, StringTemplate)",0,1,1,1
net.sf.freecol.common.model.StringTemplate.add(String),1,2,1,2
"net.sf.freecol.common.model.StringTemplate.add(String, String)",1,2,1,2
"net.sf.freecol.common.model.StringTemplate.addAmount(String, Number)",0,1,1,1
net.sf.freecol.common.model.StringTemplate.addKey(String),0,1,1,1
net.sf.freecol.common.model.StringTemplate.addName(String),1,2,1,2
"net.sf.freecol.common.model.StringTemplate.addName(String, FreeColObject)",1,2,1,2
"net.sf.freecol.common.model.StringTemplate.addName(String, String)",1,2,1,2
net.sf.freecol.common.model.StringTemplate.addNamed(Named),0,1,1,1
"net.sf.freecol.common.model.StringTemplate.addNamed(String, Named)",0,1,1,1
"net.sf.freecol.common.model.StringTemplate.addPair(String, StringTemplate)",3,2,1,4
net.sf.freecol.common.model.StringTemplate.addReplacement(StringTemplate),4,3,3,4
"net.sf.freecol.common.model.StringTemplate.addStringTemplate(String, StringTemplate)",1,2,1,2
net.sf.freecol.common.model.StringTemplate.addStringTemplate(StringTemplate),1,2,1,2
"net.sf.freecol.common.model.StringTemplate.addTagged(String, String)",0,1,1,1
"net.sf.freecol.common.model.StringTemplate.complete(String, StringTemplate)",0,1,1,1
"net.sf.freecol.common.model.StringTemplate.copy(String, StringTemplate)",0,1,1,1
net.sf.freecol.common.model.StringTemplate.copyIn(T),2,2,2,3
net.sf.freecol.common.model.StringTemplate.entryList(),1,1,1,2
net.sf.freecol.common.model.StringTemplate.equals(Object),23,10,5,11
net.sf.freecol.common.model.StringTemplate.getDefaultId(),0,1,1,1
net.sf.freecol.common.model.StringTemplate.getReplacement(String),2,2,2,3
net.sf.freecol.common.model.StringTemplate.getTemplateType(),0,1,1,1
net.sf.freecol.common.model.StringTemplate.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.StringTemplate.hashCode(),3,1,3,3
net.sf.freecol.common.model.StringTemplate.isEmpty(),1,1,2,2
net.sf.freecol.common.model.StringTemplate.key(Named),0,1,1,1
net.sf.freecol.common.model.StringTemplate.key(String),0,1,1,1
net.sf.freecol.common.model.StringTemplate.label(String),0,1,1,1
net.sf.freecol.common.model.StringTemplate.name(String),0,1,1,1
net.sf.freecol.common.model.StringTemplate.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.StringTemplate.readChild(FreeColXMLReader),15,1,7,7
net.sf.freecol.common.model.StringTemplate.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.StringTemplate.setDefaultId(String),0,1,1,1
"net.sf.freecol.common.model.StringTemplate.setDefaultId(String, Class<T>)",1,1,2,2
net.sf.freecol.common.model.StringTemplate.template(Named),0,1,1,1
net.sf.freecol.common.model.StringTemplate.template(String),0,1,1,1
net.sf.freecol.common.model.StringTemplate.toString(),12,1,6,8
net.sf.freecol.common.model.StringTemplate.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.StringTemplate.writeChildren(FreeColXMLWriter),6,1,4,4
net.sf.freecol.common.model.Tension.Level.Level(int),0,1,1,1
net.sf.freecol.common.model.Tension.Level.getKey(),0,1,1,1
net.sf.freecol.common.model.Tension.Level.getLimit(),0,1,1,1
net.sf.freecol.common.model.Tension.Tension(),0,1,1,1
net.sf.freecol.common.model.Tension.Tension(int),0,1,1,1
net.sf.freecol.common.model.Tension.equals(Object),2,3,1,3
net.sf.freecol.common.model.Tension.getKey(),0,1,1,1
net.sf.freecol.common.model.Tension.getLevel(),0,1,1,1
net.sf.freecol.common.model.Tension.getNameKey(),0,1,1,1
net.sf.freecol.common.model.Tension.getValue(),0,1,1,1
net.sf.freecol.common.model.Tension.hashCode(),0,1,1,1
net.sf.freecol.common.model.Tension.modify(int),0,1,1,1
net.sf.freecol.common.model.Tension.setValue(int),3,1,1,3
net.sf.freecol.common.model.Tension.toString(),0,1,1,1
"net.sf.freecol.common.model.Tile.IndianSettlementInternals.setValues(UnitType, List<GoodsType>)",3,1,3,3
net.sf.freecol.common.model.Tile.IndianSettlementInternals.update(IndianSettlement),0,1,1,1
"net.sf.freecol.common.model.Tile.Tile(Game, String)",2,1,1,2
"net.sf.freecol.common.model.Tile.Tile(Game, TileType, int, int)",2,1,1,2
net.sf.freecol.common.model.Tile.add(Locatable),5,4,4,4
net.sf.freecol.common.model.Tile.addLostCityRumour(LostCityRumour),0,1,1,1
net.sf.freecol.common.model.Tile.addResource(Resource),0,1,1,1
"net.sf.freecol.common.model.Tile.addRiver(int, String)",2,2,2,3
net.sf.freecol.common.model.Tile.addRoad(),1,1,1,2
net.sf.freecol.common.model.Tile.addTileItem(TileItem),2,2,2,3
net.sf.freecol.common.model.Tile.cacheUnseen(),0,1,1,1
net.sf.freecol.common.model.Tile.cacheUnseen(Player),0,1,1,1
"net.sf.freecol.common.model.Tile.cacheUnseen(Player, Tile)",5,2,4,5
net.sf.freecol.common.model.Tile.cacheUnseen(Tile),0,1,1,1
net.sf.freecol.common.model.Tile.canAdd(Locatable),3,3,3,3
"net.sf.freecol.common.model.Tile.canProduce(GoodsType, UnitType)",3,1,4,4
"net.sf.freecol.common.model.Tile.changeOwnership(Player, Settlement)",0,1,1,1
net.sf.freecol.common.model.Tile.changeOwningSettlement(Settlement),2,1,3,3
net.sf.freecol.common.model.Tile.changeType(TileType),2,1,2,3
"net.sf.freecol.common.model.Tile.checkIntegrity(boolean, LogBuilder)",8,1,7,7
net.sf.freecol.common.model.Tile.contains(Locatable),3,2,3,3
net.sf.freecol.common.model.Tile.copyIn(T),5,2,4,5
net.sf.freecol.common.model.Tile.disposeResources(),2,1,3,3
"net.sf.freecol.common.model.Tile.getAbilities(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.Tile.getAdjacentColonies(),0,1,1,1
net.sf.freecol.common.model.Tile.getAvailableAdjacentCount(),0,1,1,1
"net.sf.freecol.common.model.Tile.getBaseProduction(ProductionType, GoodsType, UnitType)",3,2,3,5
net.sf.freecol.common.model.Tile.getBestDisembarkTile(Player),0,1,1,1
net.sf.freecol.common.model.Tile.getBestFoodProduction(),0,1,1,1
net.sf.freecol.common.model.Tile.getBuildColonyWarnings(Unit),45,12,19,26
net.sf.freecol.common.model.Tile.getCachedTile(Player),3,1,3,3
net.sf.freecol.common.model.Tile.getCachedTiles(),0,1,1,1
net.sf.freecol.common.model.Tile.getColonyTileLocationLabel(Colony),6,3,3,4
net.sf.freecol.common.model.Tile.getCompleteItems(),1,1,2,2
net.sf.freecol.common.model.Tile.getCompleteTileImprovements(),1,1,2,2
net.sf.freecol.common.model.Tile.getContiguity(),0,1,1,1
net.sf.freecol.common.model.Tile.getContiguityAdjacent(int),0,1,1,1
net.sf.freecol.common.model.Tile.getDefenceBonusPercentage(),0,1,1,1
net.sf.freecol.common.model.Tile.getDefenceValue(),1,1,2,2
net.sf.freecol.common.model.Tile.getDefendingUnit(Unit),15,1,9,11
net.sf.freecol.common.model.Tile.getDetailedLocationLabel(),14,3,8,8
net.sf.freecol.common.model.Tile.getDetailedLocationLabelFor(Player),13,3,8,8
net.sf.freecol.common.model.Tile.getDirection(Tile),0,1,1,1
net.sf.freecol.common.model.Tile.getDisasterChoices(),0,1,1,1
net.sf.freecol.common.model.Tile.getDiscoverableRegion(),1,1,2,2
net.sf.freecol.common.model.Tile.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.Tile.getDistanceTo(Tile),0,1,1,1
net.sf.freecol.common.model.Tile.getEdgeDistance(),0,1,1,1
net.sf.freecol.common.model.Tile.getHighSeasCount(),0,1,1,1
net.sf.freecol.common.model.Tile.getLabel(),7,1,5,5
net.sf.freecol.common.model.Tile.getLearnableSkill(Player),1,1,1,2
net.sf.freecol.common.model.Tile.getLinkTarget(Player),0,1,1,1
net.sf.freecol.common.model.Tile.getLocationLabel(),1,1,2,2
net.sf.freecol.common.model.Tile.getLocationLabelFor(Player),1,1,2,2
net.sf.freecol.common.model.Tile.getLostCityRumour(),1,1,2,2
net.sf.freecol.common.model.Tile.getMap(),0,1,1,1
"net.sf.freecol.common.model.Tile.getMaximumPotential(GoodsType, UnitType)",1,1,2,2
"net.sf.freecol.common.model.Tile.getMaximumPotential(GoodsType, UnitType, TileType)",9,1,8,8
net.sf.freecol.common.model.Tile.getMaximumPotentialFoodProductionWithExpert(),0,1,1,1
net.sf.freecol.common.model.Tile.getMoveToEurope(),0,1,1,1
net.sf.freecol.common.model.Tile.getNameKey(),10,3,5,5
"net.sf.freecol.common.model.Tile.getNearLocationLabel(Direction, StringTemplate)",0,1,1,1
"net.sf.freecol.common.model.Tile.getNearestSettlement(Player, int, boolean)",10,4,6,9
net.sf.freecol.common.model.Tile.getNeighbourOrNull(Direction),0,1,1,1
net.sf.freecol.common.model.Tile.getOccupyingUnit(),3,1,6,6
net.sf.freecol.common.model.Tile.getOwner(),0,1,1,1
net.sf.freecol.common.model.Tile.getOwningSettlement(),0,1,1,1
net.sf.freecol.common.model.Tile.getPlayerIndianSettlement(Player),1,1,2,2
"net.sf.freecol.common.model.Tile.getPotentialProduction(GoodsType, UnitType)",0,1,1,1
"net.sf.freecol.common.model.Tile.getProductionModifiers(GoodsType, UnitType)",2,1,3,3
net.sf.freecol.common.model.Tile.getRank(),0,1,1,1
net.sf.freecol.common.model.Tile.getRegion(),0,1,1,1
net.sf.freecol.common.model.Tile.getResource(),1,1,2,2
net.sf.freecol.common.model.Tile.getRiver(),1,1,2,2
net.sf.freecol.common.model.Tile.getRiverStyle(),3,1,3,3
net.sf.freecol.common.model.Tile.getRoad(),1,1,2,2
net.sf.freecol.common.model.Tile.getSafeAnchoringTiles(Unit),1,1,3,3
"net.sf.freecol.common.model.Tile.getSafeTile(Player, Random)",17,6,10,13
net.sf.freecol.common.model.Tile.getSafestSurroundingLandTiles(Player),2,1,3,3
net.sf.freecol.common.model.Tile.getSettlement(),0,1,1,1
net.sf.freecol.common.model.Tile.getSimpleLabel(),0,1,1,1
net.sf.freecol.common.model.Tile.getSortedAutoPotential(),0,1,1,1
net.sf.freecol.common.model.Tile.getSortedPotential(),0,1,1,1
net.sf.freecol.common.model.Tile.getSortedPotential(Unit),0,1,1,1
"net.sf.freecol.common.model.Tile.getSortedPotential(UnitType, Player, boolean)",7,2,6,6
net.sf.freecol.common.model.Tile.getStyle(),0,1,1,1
net.sf.freecol.common.model.Tile.getSurroundingTiles(int),0,1,1,1
"net.sf.freecol.common.model.Tile.getSurroundingTiles(int, int)",9,2,6,8
net.sf.freecol.common.model.Tile.getTile(),0,1,1,1
net.sf.freecol.common.model.Tile.getTileImprovement(TileImprovementType),1,1,2,2
net.sf.freecol.common.model.Tile.getTileImprovements(),1,1,2,2
net.sf.freecol.common.model.Tile.getTileItemContainer(),0,1,1,1
net.sf.freecol.common.model.Tile.getTileToCache(),1,1,2,2
net.sf.freecol.common.model.Tile.getType(),0,1,1,1
net.sf.freecol.common.model.Tile.getWantedGoods(Player),1,1,1,2
net.sf.freecol.common.model.Tile.getWorkAmount(TileImprovementType),3,1,3,3
net.sf.freecol.common.model.Tile.getX(),0,1,1,1
net.sf.freecol.common.model.Tile.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Tile.getY(),0,1,1,1
net.sf.freecol.common.model.Tile.hasLostCityRumour(),1,1,2,2
net.sf.freecol.common.model.Tile.hasResource(),1,1,2,2
net.sf.freecol.common.model.Tile.hasRiver(),0,1,1,1
net.sf.freecol.common.model.Tile.hasRoad(),0,1,1,1
net.sf.freecol.common.model.Tile.hasSettlement(),0,1,1,1
net.sf.freecol.common.model.Tile.hasTileImprovement(TileImprovementType),3,1,3,3
net.sf.freecol.common.model.Tile.hasUnexploredAdjacent(),0,1,1,1
"net.sf.freecol.common.model.Tile.internalToXML(FreeColXMLWriter, String)",0,1,1,1
net.sf.freecol.common.model.Tile.isAdjacent(Tile),1,1,2,2
net.sf.freecol.common.model.Tile.isBlocked(Unit),9,4,6,7
net.sf.freecol.common.model.Tile.isCoastland(),1,1,2,2
net.sf.freecol.common.model.Tile.isConnectedTo(Tile),0,1,1,1
net.sf.freecol.common.model.Tile.isDangerousToShip(Unit),4,1,5,5
net.sf.freecol.common.model.Tile.isDirectlyHighSeasConnected(),3,1,3,3
net.sf.freecol.common.model.Tile.isExplored(),0,1,1,1
net.sf.freecol.common.model.Tile.isExploredBy(Player),6,1,4,4
net.sf.freecol.common.model.Tile.isForested(),1,1,2,2
net.sf.freecol.common.model.Tile.isGoodHillTile(),1,1,3,3
net.sf.freecol.common.model.Tile.isGoodMountainTile(),1,1,2,2
net.sf.freecol.common.model.Tile.isGoodRiverTile(TileImprovementType),1,1,2,2
net.sf.freecol.common.model.Tile.isHighSeasConnected(),0,1,1,1
net.sf.freecol.common.model.Tile.isImprovementAllowed(TileImprovement),4,3,3,5
net.sf.freecol.common.model.Tile.isImprovementTypeAllowed(TileImprovementType),2,1,4,4
net.sf.freecol.common.model.Tile.isInUse(),1,1,2,2
net.sf.freecol.common.model.Tile.isLand(),1,1,2,2
net.sf.freecol.common.model.Tile.isLandLocked(),1,1,2,2
net.sf.freecol.common.model.Tile.isOccupied(),0,1,1,1
net.sf.freecol.common.model.Tile.isOnRiver(),3,3,2,3
net.sf.freecol.common.model.Tile.isPolar(),0,1,1,1
net.sf.freecol.common.model.Tile.isRiverCorner(),2,4,5,6
net.sf.freecol.common.model.Tile.isShore(),0,1,1,1
net.sf.freecol.common.model.Tile.readAttributes(FreeColXMLReader),8,2,4,7
net.sf.freecol.common.model.Tile.readChild(FreeColXMLReader),20,1,12,12
net.sf.freecol.common.model.Tile.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.Tile.remove(Locatable),2,2,2,2
net.sf.freecol.common.model.Tile.removeIndianSettlementInternals(Player),1,2,1,2
net.sf.freecol.common.model.Tile.removeLostCityRumour(),0,1,1,1
net.sf.freecol.common.model.Tile.removeResource(),1,2,1,2
net.sf.freecol.common.model.Tile.removeRiver(),1,2,1,2
net.sf.freecol.common.model.Tile.removeRoad(),1,2,1,2
net.sf.freecol.common.model.Tile.removeTileItem(T),2,2,1,3
net.sf.freecol.common.model.Tile.seeTile(),1,1,2,2
net.sf.freecol.common.model.Tile.seeTile(Player),0,1,1,1
"net.sf.freecol.common.model.Tile.setCachedTile(Player, Tile)",2,2,2,3
"net.sf.freecol.common.model.Tile.setCachedTiles(Map<Player, Tile>)",3,1,3,3
net.sf.freecol.common.model.Tile.setContiguity(int),0,1,1,1
"net.sf.freecol.common.model.Tile.setExplored(Player, boolean)",4,2,3,4
net.sf.freecol.common.model.Tile.setHighSeasCount(int),0,1,1,1
"net.sf.freecol.common.model.Tile.setIndianSettlementInternals(Player, UnitType, List<GoodsType>)",1,1,2,2
net.sf.freecol.common.model.Tile.setMoveToEurope(Boolean),0,1,1,1
net.sf.freecol.common.model.Tile.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Tile.setOwningSettlement(Settlement),0,1,1,1
net.sf.freecol.common.model.Tile.setRegion(Region),0,1,1,1
net.sf.freecol.common.model.Tile.setSettlement(Settlement),0,1,1,1
net.sf.freecol.common.model.Tile.setStyle(int),0,1,1,1
net.sf.freecol.common.model.Tile.setTileItemContainer(TileItemContainer),0,1,1,1
net.sf.freecol.common.model.Tile.setType(TileType),0,1,1,1
net.sf.freecol.common.model.Tile.toShortString(),1,1,2,2
net.sf.freecol.common.model.Tile.toString(),2,1,3,3
"net.sf.freecol.common.model.Tile.toXML(FreeColXMLWriter, String)",4,1,4,4
net.sf.freecol.common.model.Tile.up(),1,1,2,2
net.sf.freecol.common.model.Tile.updateColonyTiles(),1,1,2,2
net.sf.freecol.common.model.Tile.updateIndianSettlement(Player),8,2,5,6
net.sf.freecol.common.model.Tile.writeAttributes(FreeColXMLWriter),10,1,9,9
net.sf.freecol.common.model.Tile.writeChildren(FreeColXMLWriter),20,4,13,14
"net.sf.freecol.common.model.TileImprovement.TileImprovement(Game, String)",0,1,1,1
"net.sf.freecol.common.model.TileImprovement.TileImprovement(Game, Tile, TileImprovementType, TileImprovementStyle)",2,2,2,3
"net.sf.freecol.common.model.TileImprovement.applyBonus(GoodsType, UnitType, int)",2,1,3,3
"net.sf.freecol.common.model.TileImprovement.canProduce(GoodsType, UnitType)",0,1,1,1
"net.sf.freecol.common.model.TileImprovement.checkIntegrity(boolean, LogBuilder)",44,3,17,17
net.sf.freecol.common.model.TileImprovement.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TileImprovement.getBonus(GoodsType),2,2,2,2
net.sf.freecol.common.model.TileImprovement.getChange(TileType),1,1,2,2
net.sf.freecol.common.model.TileImprovement.getConnectionDirections(),3,1,2,3
net.sf.freecol.common.model.TileImprovement.getConnections(),1,1,2,2
net.sf.freecol.common.model.TileImprovement.getConnectionsFromStyle(),10,1,5,5
net.sf.freecol.common.model.TileImprovement.getDisasterChoices(),1,1,2,2
net.sf.freecol.common.model.TileImprovement.getLayer(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getMagnitude(),0,1,1,1
"net.sf.freecol.common.model.TileImprovement.getMoveCost(Direction, int)",2,1,3,3
net.sf.freecol.common.model.TileImprovement.getNameKey(),1,1,2,2
net.sf.freecol.common.model.TileImprovement.getProductionModifier(GoodsType),3,2,4,5
"net.sf.freecol.common.model.TileImprovement.getProductionModifiers(GoodsType, UnitType)",9,5,14,14
net.sf.freecol.common.model.TileImprovement.getRiverConnection(Direction),3,2,1,4
net.sf.freecol.common.model.TileImprovement.getStyle(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getTurnsToComplete(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getType(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getVirtual(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.getZIndex(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isComplete(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isConnectedTo(Direction),5,1,4,5
net.sf.freecol.common.model.TileImprovement.isNatural(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isRiver(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isRoad(),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isTileTypeAllowed(TileType),0,1,1,1
net.sf.freecol.common.model.TileImprovement.isWorkerAllowed(Unit),2,1,3,3
net.sf.freecol.common.model.TileImprovement.readAttributes(FreeColXMLReader),7,1,6,6
"net.sf.freecol.common.model.TileImprovement.setConnected(Direction, boolean)",2,1,3,3
"net.sf.freecol.common.model.TileImprovement.setConnected(Direction, boolean, String)",8,1,4,5
net.sf.freecol.common.model.TileImprovement.setMagnitude(int),0,1,1,1
net.sf.freecol.common.model.TileImprovement.setRiverStyle(String),21,2,9,11
net.sf.freecol.common.model.TileImprovement.setStyle(TileImprovementStyle),0,1,1,1
net.sf.freecol.common.model.TileImprovement.setTurnsToComplete(int),0,1,1,1
net.sf.freecol.common.model.TileImprovement.setVirtual(boolean),0,1,1,1
net.sf.freecol.common.model.TileImprovement.toString(),3,1,4,4
net.sf.freecol.common.model.TileImprovement.updateRiverConnections(String),18,2,10,11
net.sf.freecol.common.model.TileImprovement.updateRoadConnections(boolean),10,2,7,8
net.sf.freecol.common.model.TileImprovement.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.model.TileImprovementStyle.TileImprovementStyle(String),5,3,2,4
net.sf.freecol.common.model.TileImprovementStyle.getInstance(String),6,2,5,6
net.sf.freecol.common.model.TileImprovementStyle.getMask(),0,1,1,1
net.sf.freecol.common.model.TileImprovementStyle.getString(),0,1,1,1
net.sf.freecol.common.model.TileImprovementStyle.toString(),0,1,1,1
net.sf.freecol.common.model.TileImprovementTest.testRiverNoExtras(),0,1,1,1
net.sf.freecol.common.model.TileImprovementTest.testRiverWithExtras(),0,1,1,1
net.sf.freecol.common.model.TileImprovementTest.testRoadNoExtras(),0,1,1,1
net.sf.freecol.common.model.TileImprovementTest.testRoadWithExtras(),0,1,1,1
"net.sf.freecol.common.model.TileImprovementType.TileImprovementType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.TileImprovementType.addAllowedWorker(String),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.addChange(TileTypeChange),1,1,1,2
"net.sf.freecol.common.model.TileImprovementType.addDisaster(Disaster, int)",1,1,1,2
net.sf.freecol.common.model.TileImprovementType.changeContainsTarget(TileType),1,1,2,2
net.sf.freecol.common.model.TileImprovementType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TileImprovementType.getAddWorkTurns(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getAllowedWorkers(),1,1,1,2
net.sf.freecol.common.model.TileImprovementType.getBonus(GoodsType),2,2,2,2
net.sf.freecol.common.model.TileImprovementType.getChange(TileType),2,2,2,3
net.sf.freecol.common.model.TileImprovementType.getDisasterChoices(),1,1,2,2
net.sf.freecol.common.model.TileImprovementType.getDisasters(),1,1,1,2
net.sf.freecol.common.model.TileImprovementType.getExpendedAmount(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getExposeResourcePercent(),0,1,1,1
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(Tile, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(Tile, GoodsType, UnitType)",7,1,4,4
"net.sf.freecol.common.model.TileImprovementType.getImprovementValue(TileType, GoodsType, UnitType)",7,1,4,4
net.sf.freecol.common.model.TileImprovementType.getMagnitude(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getMoveCost(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getMoveCost(int),2,1,1,3
net.sf.freecol.common.model.TileImprovementType.getProduction(TileType),2,2,2,3
net.sf.freecol.common.model.TileImprovementType.getProductionModifier(GoodsType),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getRequiredImprovementType(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getRequiredRole(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getTileTypeChanges(),1,1,1,2
net.sf.freecol.common.model.TileImprovementType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.getZIndex(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.isChangeType(),1,1,2,2
net.sf.freecol.common.model.TileImprovementType.isNatural(),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.isTileTypeAllowed(TileType),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.isWorkerAllowed(Unit),2,1,3,3
net.sf.freecol.common.model.TileImprovementType.isWorkerTypeAllowed(UnitType),1,1,3,3
net.sf.freecol.common.model.TileImprovementType.readAttributes(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.TileImprovementType.readChild(FreeColXMLReader),5,1,5,5
net.sf.freecol.common.model.TileImprovementType.readChildren(FreeColXMLReader),1,1,1,2
net.sf.freecol.common.model.TileImprovementType.setAllowedWorkers(Set<String>),2,1,2,2
net.sf.freecol.common.model.TileImprovementType.setDisasters(List<RandomChoice<Disaster>>),2,1,2,2
"net.sf.freecol.common.model.TileImprovementType.setTileTypeChanges(Map<TileType, TileTypeChange>)",2,1,2,2
net.sf.freecol.common.model.TileImprovementType.setZIndex(int),0,1,1,1
net.sf.freecol.common.model.TileImprovementType.writeAttributes(FreeColXMLWriter),3,1,4,4
net.sf.freecol.common.model.TileImprovementType.writeChildren(FreeColXMLWriter),7,1,6,6
"net.sf.freecol.common.model.TileItem.TileItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.TileItem.TileItem(Game, String)",0,1,1,1
"net.sf.freecol.common.model.TileItem.TileItem(Game, Tile)",1,2,1,2
"net.sf.freecol.common.model.TileItem.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.common.model.TileItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TileItem.getLocation(),0,1,1,1
net.sf.freecol.common.model.TileItem.getSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.TileItem.getTile(),0,1,1,1
net.sf.freecol.common.model.TileItem.isInEurope(),0,1,1,1
net.sf.freecol.common.model.TileItem.setLocation(Location),2,2,1,3
"net.sf.freecol.common.model.TileItemContainer.TileItemContainer(Game, String)",0,1,1,1
"net.sf.freecol.common.model.TileItemContainer.TileItemContainer(Game, Tile)",1,2,1,2
net.sf.freecol.common.model.TileItemContainer.addTileItem(TileItem),3,3,2,3
"net.sf.freecol.common.model.TileItemContainer.canProduce(GoodsType, UnitType)",0,1,1,1
"net.sf.freecol.common.model.TileItemContainer.checkIntegrity(boolean, LogBuilder)",19,1,8,8
net.sf.freecol.common.model.TileItemContainer.clearTileItems(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.contains(TileItem),0,1,1,1
"net.sf.freecol.common.model.TileItemContainer.copyFrom(TileItemContainer, Layer)",10,1,7,7
net.sf.freecol.common.model.TileItemContainer.copyIn(T),5,4,3,5
net.sf.freecol.common.model.TileItemContainer.disposeResources(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.findTileItem(Predicate<TileItem>),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getCompleteImprovements(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getCompleteItems(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getImprovement(TileImprovementType),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.getImprovements(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getImprovements(boolean),2,1,3,3
net.sf.freecol.common.model.TileItemContainer.getLostCityRumour(),0,1,1,1
"net.sf.freecol.common.model.TileItemContainer.getMoveCost(Tile, Tile, int)",4,3,3,4
"net.sf.freecol.common.model.TileItemContainer.getProductionModifiers(GoodsType, UnitType)",0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getResource(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getRiver(),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.getRoad(),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.getTile(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.getTileItems(),0,1,1,1
"net.sf.freecol.common.model.TileItemContainer.getTotalBonusPotential(GoodsType, UnitType, int, boolean)",2,1,3,3
net.sf.freecol.common.model.TileItemContainer.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.hasImprovement(TileImprovementType),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.invalidateCache(),2,1,3,3
net.sf.freecol.common.model.TileItemContainer.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.readChild(FreeColXMLReader),7,1,6,6
net.sf.freecol.common.model.TileItemContainer.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.removeAll(Class<T>),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.removeIncompatibleImprovements(),3,1,5,5
net.sf.freecol.common.model.TileItemContainer.removeTileItem(T),1,2,2,2
net.sf.freecol.common.model.TileItemContainer.setTileItems(List<TileItem>),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.toString(),1,1,2,2
net.sf.freecol.common.model.TileItemContainer.tryAddTileItem(TileItem),15,7,5,8
net.sf.freecol.common.model.TileItemContainer.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TileItemContainer.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.TileItemContainerTest.getSample(Game, Tile, boolean, boolean, boolean)",4,1,5,5
net.sf.freecol.common.model.TileItemContainerTest.testCopyFromWithEveryThing(),0,1,1,1
"net.sf.freecol.common.model.TileTest.Work.Work(TileType, int, int)",0,1,1,1
"net.sf.freecol.common.model.TileTest.hasBonusFrom(Stream<Modifier>, FreeColSpecObjectType)",0,1,1,1
net.sf.freecol.common.model.TileTest.testColonyImprovements(),0,1,1,1
net.sf.freecol.common.model.TileTest.testConiferForest(),23,1,7,14
net.sf.freecol.common.model.TileTest.testCopy(),0,1,1,1
net.sf.freecol.common.model.TileTest.testDefenceModifiers(),2,1,6,6
net.sf.freecol.common.model.TileTest.testGetBestDisembarkTile(),0,1,1,1
net.sf.freecol.common.model.TileTest.testGetWorkAmount(),2,1,3,3
net.sf.freecol.common.model.TileTest.testImprovements(),0,1,1,1
net.sf.freecol.common.model.TileTest.testIsTileTypeAllowed(),22,1,9,9
net.sf.freecol.common.model.TileTest.testMaximumPotential(),0,1,1,1
net.sf.freecol.common.model.TileTest.testMinerals(),2,1,3,3
net.sf.freecol.common.model.TileTest.testPotential(),0,1,1,1
net.sf.freecol.common.model.TileTest.testPrimarySecondaryGoods(),0,1,1,1
net.sf.freecol.common.model.TileTest.testProductionModifiers(),7,5,2,5
net.sf.freecol.common.model.TileTest.testTileTypeChangeProduction(),6,1,3,4
net.sf.freecol.common.model.TileTest.testZIndex(),0,1,1,1
"net.sf.freecol.common.model.TileType.TileType(String, Specification)",0,1,1,1
"net.sf.freecol.common.model.TileType.TileType(String, boolean)",0,1,1,1
"net.sf.freecol.common.model.TileType.addDisaster(Disaster, int)",1,1,1,2
"net.sf.freecol.common.model.TileType.addResourceType(ResourceType, int)",1,1,1,2
net.sf.freecol.common.model.TileType.canHaveResourceType(ResourceType),0,1,1,1
"net.sf.freecol.common.model.TileType.canProduce(GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.TileType.canSettle(),0,1,1,1
net.sf.freecol.common.model.TileType.copyIn(T),5,2,5,6
net.sf.freecol.common.model.TileType.getAltitude(int),0,1,1,1
net.sf.freecol.common.model.TileType.getAvailableProductionTypes(boolean),0,1,1,1
"net.sf.freecol.common.model.TileType.getAvailableProductionTypes(boolean, String)",5,1,4,5
net.sf.freecol.common.model.TileType.getBasicMoveCost(),0,1,1,1
net.sf.freecol.common.model.TileType.getBasicWorkTurns(),0,1,1,1
net.sf.freecol.common.model.TileType.getDisasterChoices(),1,1,2,2
net.sf.freecol.common.model.TileType.getDisasters(),0,1,1,1
net.sf.freecol.common.model.TileType.getHumidity(int),0,1,1,1
net.sf.freecol.common.model.TileType.getPossibleProduction(boolean),0,1,1,1
"net.sf.freecol.common.model.TileType.getPotentialProduction(GoodsType, UnitType)",4,2,2,4
net.sf.freecol.common.model.TileType.getProductionTypes(),0,1,1,1
net.sf.freecol.common.model.TileType.getResourceTypeValues(),0,1,1,1
net.sf.freecol.common.model.TileType.getResourceTypes(),1,1,1,2
net.sf.freecol.common.model.TileType.getTemperature(int),0,1,1,1
net.sf.freecol.common.model.TileType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TileType.isDirectlyHighSeasConnected(),0,1,1,1
net.sf.freecol.common.model.TileType.isElevation(),0,1,1,1
net.sf.freecol.common.model.TileType.isForested(),0,1,1,1
net.sf.freecol.common.model.TileType.isHighSeasConnected(),0,1,1,1
net.sf.freecol.common.model.TileType.isHills(),1,1,1,2
net.sf.freecol.common.model.TileType.isMountains(),1,1,1,2
net.sf.freecol.common.model.TileType.isWater(),0,1,1,1
net.sf.freecol.common.model.TileType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TileType.readChild(FreeColXMLReader),23,1,16,16
net.sf.freecol.common.model.TileType.readChildren(FreeColXMLReader),1,1,2,2
"net.sf.freecol.common.model.TileType.setAltitude(int, int)",0,1,1,1
net.sf.freecol.common.model.TileType.setDisasters(List<RandomChoice<Disaster>>),2,1,2,2
"net.sf.freecol.common.model.TileType.setHumidity(int, int)",0,1,1,1
net.sf.freecol.common.model.TileType.setProductionTypes(List<ProductionType>),0,1,1,1
net.sf.freecol.common.model.TileType.setResourceTypes(List<RandomChoice<ResourceType>>),2,1,2,2
"net.sf.freecol.common.model.TileType.setTemperature(int, int)",0,1,1,1
"net.sf.freecol.common.model.TileType.withinRange(RangeType, int)",4,4,1,7
net.sf.freecol.common.model.TileType.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TileType.writeChildren(FreeColXMLWriter),5,1,5,5
"net.sf.freecol.common.model.TileTypeChange.TileTypeChange(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.model.TileTypeChange.TileTypeChange(Specification),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TileTypeChange.equals(Object),2,2,3,3
net.sf.freecol.common.model.TileTypeChange.getFrom(),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.getProduction(),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.getTo(),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.hashCode(),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.readChildren(FreeColXMLReader),5,3,3,4
net.sf.freecol.common.model.TileTypeChange.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TileTypeChange.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.model.TradeItem.TradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.TradeItem.TradeItem(Game, String, Player, Player)",0,1,1,1
net.sf.freecol.common.model.TradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TradeItem.equals(Object),2,2,3,4
net.sf.freecol.common.model.TradeItem.getColony(Game),0,1,1,1
net.sf.freecol.common.model.TradeItem.getDestination(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getGold(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getGoods(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getOther(Player),1,1,1,2
net.sf.freecol.common.model.TradeItem.getSource(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getStance(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getUnit(),0,1,1,1
net.sf.freecol.common.model.TradeItem.getVictim(),0,1,1,1
net.sf.freecol.common.model.TradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.TradeItem.isInternable(),0,1,1,1
net.sf.freecol.common.model.TradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TradeItem.setDestination(Player),0,1,1,1
net.sf.freecol.common.model.TradeItem.setGold(int),0,1,1,1
net.sf.freecol.common.model.TradeItem.setGoods(Goods),0,1,1,1
net.sf.freecol.common.model.TradeItem.setSource(Player),0,1,1,1
net.sf.freecol.common.model.TradeItem.setStance(Stance),0,1,1,1
net.sf.freecol.common.model.TradeItem.setUnit(Unit),0,1,1,1
net.sf.freecol.common.model.TradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TradeLocation.canBeInput(),0,1,1,1
net.sf.freecol.common.model.TradeLocation.getNameAsJlabel(),0,1,1,1
"net.sf.freecol.common.model.TradeRoute.TradeRoute(Game, String)",0,1,1,1
"net.sf.freecol.common.model.TradeRoute.TradeRoute(Game, String, Player)",0,1,1,1
net.sf.freecol.common.model.TradeRoute.addStop(TradeRouteStop),0,1,1,1
"net.sf.freecol.common.model.TradeRoute.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.common.model.TradeRoute.clearStops(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.copyIn(T),3,2,3,4
net.sf.freecol.common.model.TradeRoute.getAssignedUnits(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.getIndex(TradeRouteStop),3,3,1,3
net.sf.freecol.common.model.TradeRoute.getName(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.getOwner(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.getStop(int),2,1,3,3
net.sf.freecol.common.model.TradeRoute.getStopCount(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.getStopList(),0,1,1,1
"net.sf.freecol.common.model.TradeRoute.getStopSublist(TradeRouteStop, TradeRouteStop)",5,2,2,5
net.sf.freecol.common.model.TradeRoute.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.TradeRoute.isSilent(),0,1,1,1
"net.sf.freecol.common.model.TradeRoute.isStopValid(Player, TradeRouteStop)",1,1,2,2
"net.sf.freecol.common.model.TradeRoute.isStopValid(Unit, TradeRouteStop)",0,1,1,1
net.sf.freecol.common.model.TradeRoute.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TradeRoute.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.TradeRoute.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TradeRoute.removeMatchingStops(Location),0,1,1,1
net.sf.freecol.common.model.TradeRoute.removeStop(TradeRouteStop),0,1,1,1
net.sf.freecol.common.model.TradeRoute.setName(String),0,1,1,1
net.sf.freecol.common.model.TradeRoute.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.TradeRoute.setSilent(boolean),0,1,1,1
net.sf.freecol.common.model.TradeRoute.toString(),2,1,3,3
net.sf.freecol.common.model.TradeRoute.verify(),12,6,9,10
net.sf.freecol.common.model.TradeRoute.verifyUniqueName(),1,1,2,2
net.sf.freecol.common.model.TradeRoute.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TradeRoute.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game),0,1,1,1
"net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(Game, Location)",0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.TradeRouteStop(TradeRouteStop),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.addCargo(GoodsType),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.copyIn(T),2,2,2,3
net.sf.freecol.common.model.TradeRouteStop.equals(Object),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getAvailableGoodsCount(GoodsType),1,1,2,2
net.sf.freecol.common.model.TradeRouteStop.getCargo(),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getCompactCargo(),4,1,3,3
"net.sf.freecol.common.model.TradeRouteStop.getExportAmount(GoodsType, int)",1,1,2,2
"net.sf.freecol.common.model.TradeRouteStop.getImportAmount(GoodsType, int)",1,1,2,2
"net.sf.freecol.common.model.TradeRouteStop.getLabelFor(String, Player)",0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getLocation(),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getLocationName(TradeLocation),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getTradeLocation(),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.model.TradeRouteStop.hasWork(Unit, int)",4,3,3,5
net.sf.freecol.common.model.TradeRouteStop.invalidStopLabel(Player),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.isInternable(),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.isValid(Player),2,1,5,5
net.sf.freecol.common.model.TradeRouteStop.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.TradeRouteStop.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.setCargo(List<GoodsType>),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.toString(),1,1,2,2
net.sf.freecol.common.model.TradeRouteStop.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.TradeRouteStop.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.TradeRouteTest.testTradeRoute(),0,1,1,1
net.sf.freecol.common.model.Turn.Turn(int),0,1,1,1
net.sf.freecol.common.model.Turn.equals(Object),1,2,1,2
net.sf.freecol.common.model.Turn.getLabel(),0,1,1,1
net.sf.freecol.common.model.Turn.getNumber(),0,1,1,1
net.sf.freecol.common.model.Turn.getSaveGameSuffix(),1,1,2,2
net.sf.freecol.common.model.Turn.getSeason(),0,1,1,1
net.sf.freecol.common.model.Turn.getSeasonNumber(),0,1,1,1
net.sf.freecol.common.model.Turn.getSeasonYear(),0,1,1,1
net.sf.freecol.common.model.Turn.getStartingYear(),0,1,1,1
net.sf.freecol.common.model.Turn.getTurnLabel(int),1,1,2,2
net.sf.freecol.common.model.Turn.getTurnSeason(int),1,1,2,2
net.sf.freecol.common.model.Turn.getTurnYear(int),1,1,2,2
net.sf.freecol.common.model.Turn.getTurnsText(int),3,1,3,3
net.sf.freecol.common.model.Turn.getYear(),0,1,1,1
net.sf.freecol.common.model.Turn.hashCode(),0,1,1,1
"net.sf.freecol.common.model.Turn.initialize(int, int, int)",0,1,1,1
net.sf.freecol.common.model.Turn.isFirstSeasonTurn(),0,1,1,1
net.sf.freecol.common.model.Turn.isFirstTurn(),0,1,1,1
net.sf.freecol.common.model.Turn.next(),0,1,1,1
net.sf.freecol.common.model.Turn.toString(),0,1,1,1
net.sf.freecol.common.model.Turn.yearToTurn(int),0,1,1,1
"net.sf.freecol.common.model.Turn.yearToTurn(int, int)",3,1,3,3
net.sf.freecol.common.model.TypeCountMap.add(TypeCountMap<T>),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.clear(),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.containsKey(T),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.getCount(T),1,1,1,2
net.sf.freecol.common.model.TypeCountMap.getValues(),0,1,1,1
"net.sf.freecol.common.model.TypeCountMap.incrementCount(T, int)",3,3,3,3
net.sf.freecol.common.model.TypeCountMap.isEmpty(),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.keySet(),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.putAll(TypeCountMap<T>),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.size(),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.toString(),0,1,1,1
net.sf.freecol.common.model.TypeCountMap.values(),0,1,1,1
"net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.ClosestSettlementGoalDecider(Tile, boolean)",0,1,1,1
"net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.check(Unit, PathNode)",5,3,5,8
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.getGoal(),0,1,1,1
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider.hasSubGoals(),0,1,1,1
net.sf.freecol.common.model.Unit.MoveType.MoveType(String),0,1,1,1
"net.sf.freecol.common.model.Unit.MoveType.MoveType(String, boolean)",0,1,1,1
net.sf.freecol.common.model.Unit.MoveType.isAttack(),1,1,1,2
net.sf.freecol.common.model.Unit.MoveType.isLegal(),0,1,1,1
net.sf.freecol.common.model.Unit.MoveType.isProgress(),0,1,1,1
net.sf.freecol.common.model.Unit.MoveType.whyIllegal(),1,1,1,2
net.sf.freecol.common.model.Unit.Unit(Game),0,1,1,1
"net.sf.freecol.common.model.Unit.Unit(Game, String)",0,1,1,1
net.sf.freecol.common.model.Unit.UnitState.getKey(),0,1,1,1
net.sf.freecol.common.model.Unit.add(Locatable),8,6,6,6
net.sf.freecol.common.model.Unit.addFeature(Feature),0,1,1,1
net.sf.freecol.common.model.Unit.allowContact(Settlement),0,1,1,1
net.sf.freecol.common.model.Unit.allowMoveFrom(Tile),2,1,3,3
net.sf.freecol.common.model.Unit.atStop(TradeRouteStop),0,1,1,1
"net.sf.freecol.common.model.Unit.betterDefender(Unit, double, Unit, double)",10,6,13,14
net.sf.freecol.common.model.Unit.canAmbush(Unit),3,1,9,9
net.sf.freecol.common.model.Unit.canAttack(Unit),5,2,6,7
net.sf.freecol.common.model.Unit.canAttackRanged(Tile),4,1,5,5
net.sf.freecol.common.model.Unit.canBeStudent(Unit),1,1,3,3
net.sf.freecol.common.model.Unit.canBuildColony(),2,1,5,5
net.sf.freecol.common.model.Unit.canCaptureEquipment(Role),2,2,2,3
net.sf.freecol.common.model.Unit.canCaptureGoods(),0,1,1,1
net.sf.freecol.common.model.Unit.canCarryGoods(),0,1,1,1
net.sf.freecol.common.model.Unit.canCarryTreasure(),0,1,1,1
net.sf.freecol.common.model.Unit.canCarryUnits(),0,1,1,1
net.sf.freecol.common.model.Unit.canCashInTreasureTrain(),0,1,1,1
net.sf.freecol.common.model.Unit.canCashInTreasureTrain(Location),8,5,7,9
net.sf.freecol.common.model.Unit.canMoveToHighSeas(),9,1,8,8
net.sf.freecol.common.model.Unit.changeExperienceType(GoodsType),1,1,1,2
net.sf.freecol.common.model.Unit.changeHomeIndianSettlement(IndianSettlement),2,1,3,3
net.sf.freecol.common.model.Unit.changeOwner(Player),9,2,9,10
"net.sf.freecol.common.model.Unit.changeRole(Role, int)",2,1,2,3
net.sf.freecol.common.model.Unit.changeRoleCount(int),1,2,1,2
net.sf.freecol.common.model.Unit.changeType(UnitType),8,2,6,7
net.sf.freecol.common.model.Unit.changeWorkType(GoodsType),1,1,2,2
"net.sf.freecol.common.model.Unit.checkIntegrity(boolean, LogBuilder)",16,1,8,9
net.sf.freecol.common.model.Unit.checkSetState(UnitState),3,9,8,11
net.sf.freecol.common.model.Unit.copyIn(T),2,2,2,3
net.sf.freecol.common.model.Unit.couldCarry(Goods),1,1,2,2
net.sf.freecol.common.model.Unit.couldCarry(Unit),1,1,2,2
net.sf.freecol.common.model.Unit.couldMove(),1,1,3,3
net.sf.freecol.common.model.Unit.damageShip(Location),0,1,1,1
net.sf.freecol.common.model.Unit.disposeResources(),3,1,4,4
net.sf.freecol.common.model.Unit.evaluateFor(Player),2,2,1,3
net.sf.freecol.common.model.Unit.findIntermediatePort(Location),28,1,14,21
net.sf.freecol.common.model.Unit.findOurNearestOtherSettlement(),0,1,1,1
net.sf.freecol.common.model.Unit.findOurNearestPort(),12,1,5,8
net.sf.freecol.common.model.Unit.findOurNearestSettlement(),0,1,1,1
"net.sf.freecol.common.model.Unit.findOurNearestSettlement(Tile, boolean, int, boolean)",3,2,2,4
"net.sf.freecol.common.model.Unit.findOurNearestSettlement(boolean, int, boolean)",2,2,2,3
net.sf.freecol.common.model.Unit.findPath(Location),0,1,1,1
"net.sf.freecol.common.model.Unit.findPath(Location, Location)",0,1,1,1
"net.sf.freecol.common.model.Unit.findPath(Location, Location, Unit)",0,1,1,1
"net.sf.freecol.common.model.Unit.findPath(Location, Location, Unit, CostDecider, LogBuilder)",1,2,1,2
"net.sf.freecol.common.model.Unit.findPathToNeighbour(Location, Tile, Unit, CostDecider)",3,1,4,4
net.sf.freecol.common.model.Unit.followingTradeRoute(),1,1,2,2
"net.sf.freecol.common.model.Unit.getAbilities(String, FreeColSpecObjectType, Turn)",0,1,1,1
"net.sf.freecol.common.model.Unit.getAdjacentSettlement(String, Class<T>)",6,7,7,7
net.sf.freecol.common.model.Unit.getApparentOwnerName(),1,1,2,2
net.sf.freecol.common.model.Unit.getAttrition(),0,1,1,1
net.sf.freecol.common.model.Unit.getAutomaticRole(),6,3,4,6
net.sf.freecol.common.model.Unit.getAvailableRoles(List<Role>),0,1,1,1
net.sf.freecol.common.model.Unit.getAvailableRolesList(List<Role>),1,1,2,2
net.sf.freecol.common.model.Unit.getBestEntryTile(Tile),0,1,1,1
net.sf.freecol.common.model.Unit.getBurnProbability(),0,1,1,1
net.sf.freecol.common.model.Unit.getCargoCapacity(),0,1,1,1
net.sf.freecol.common.model.Unit.getCargoSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.Unit.getCarriedUnitById(String),4,4,2,4
net.sf.freecol.common.model.Unit.getCarrier(),1,1,2,2
net.sf.freecol.common.model.Unit.getClassIndex(),0,1,1,1
net.sf.freecol.common.model.Unit.getClosestColony(List<Colony>),0,1,1,1
net.sf.freecol.common.model.Unit.getClosestColony(Stream<Colony>),2,1,2,2
net.sf.freecol.common.model.Unit.getCombatLabel(Tile),2,1,3,3
"net.sf.freecol.common.model.Unit.getCombatModifiers(String, FreeColSpecObjectType, Turn)",2,1,1,2
net.sf.freecol.common.model.Unit.getCompactGoodsList(),0,1,1,1
net.sf.freecol.common.model.Unit.getConsumedGoods(),0,1,1,1
net.sf.freecol.common.model.Unit.getConsumptionModifiers(String),0,1,1,1
net.sf.freecol.common.model.Unit.getConvertProbability(),0,1,1,1
net.sf.freecol.common.model.Unit.getCurrentStop(),0,1,1,1
net.sf.freecol.common.model.Unit.getCurrentStops(),1,2,1,2
net.sf.freecol.common.model.Unit.getDescription(),0,1,1,1
net.sf.freecol.common.model.Unit.getDescription(UnitLabelType),0,1,1,1
net.sf.freecol.common.model.Unit.getDestination(),0,1,1,1
net.sf.freecol.common.model.Unit.getDestinationLabel(),3,1,2,3
net.sf.freecol.common.model.Unit.getDisplayObject(),0,1,1,1
net.sf.freecol.common.model.Unit.getEntryLocation(),0,1,1,1
net.sf.freecol.common.model.Unit.getEthnicity(),0,1,1,1
net.sf.freecol.common.model.Unit.getExperience(),0,1,1,1
net.sf.freecol.common.model.Unit.getExperienceType(),0,1,1,1
net.sf.freecol.common.model.Unit.getFullEntryLocation(),1,1,2,2
net.sf.freecol.common.model.Unit.getGoodsCapacity(),0,1,1,1
"net.sf.freecol.common.model.Unit.getGoodsDifference(Role, int)",0,1,1,1
net.sf.freecol.common.model.Unit.getGoodsInternal(boolean),3,2,4,4
net.sf.freecol.common.model.Unit.getGoodsList(),0,1,1,1
net.sf.freecol.common.model.Unit.getGoodsSpaceTaken(),2,2,2,3
net.sf.freecol.common.model.Unit.getHitPoints(),0,1,1,1
net.sf.freecol.common.model.Unit.getHomeIndianSettlement(),0,1,1,1
net.sf.freecol.common.model.Unit.getInitialMovesLeft(),0,1,1,1
net.sf.freecol.common.model.Unit.getLabel(),0,1,1,1
net.sf.freecol.common.model.Unit.getLabel(UnitLabelType),36,9,11,15
"net.sf.freecol.common.model.Unit.getLandMoveType(Tile, Tile)",58,16,20,28
"net.sf.freecol.common.model.Unit.getLearnMoveType(Tile, Settlement)",12,3,5,6
net.sf.freecol.common.model.Unit.getLineOfSight(),2,1,3,3
net.sf.freecol.common.model.Unit.getLinkTarget(Player),1,1,2,2
net.sf.freecol.common.model.Unit.getLoadableAmount(GoodsType),2,2,1,3
net.sf.freecol.common.model.Unit.getLocation(),0,1,1,1
"net.sf.freecol.common.model.Unit.getLocationAbilities(String, Turn)",4,4,4,4
net.sf.freecol.common.model.Unit.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.Unit.getMaximumHitPoints(),0,1,1,1
net.sf.freecol.common.model.Unit.getMilitaryRole(),1,1,2,2
"net.sf.freecol.common.model.Unit.getMissionaryMoveType(Tile, Settlement)",12,3,5,6
net.sf.freecol.common.model.Unit.getMissionaryTradeModifiers(boolean),2,1,2,2
"net.sf.freecol.common.model.Unit.getModifiers(String, FreeColSpecObjectType, Turn)",0,1,1,1
net.sf.freecol.common.model.Unit.getMoveCost(Tile),0,1,1,1
"net.sf.freecol.common.model.Unit.getMoveCost(Tile, Tile, int)",10,1,9,10
net.sf.freecol.common.model.Unit.getMoveType(Direction),3,1,3,3
net.sf.freecol.common.model.Unit.getMoveType(Tile),1,1,2,2
"net.sf.freecol.common.model.Unit.getMoveType(Tile, Tile, int)",11,1,4,7
net.sf.freecol.common.model.Unit.getMovesAsString(),3,1,3,4
net.sf.freecol.common.model.Unit.getMovesLeft(),0,1,1,1
net.sf.freecol.common.model.Unit.getName(),0,1,1,1
net.sf.freecol.common.model.Unit.getNationality(),0,1,1,1
"net.sf.freecol.common.model.Unit.getNavalMoveType(Tile, Tile)",21,8,8,12
net.sf.freecol.common.model.Unit.getNeededTurnsOfTraining(),3,1,3,3
net.sf.freecol.common.model.Unit.getNeighbourTile(String),2,3,3,3
net.sf.freecol.common.model.Unit.getNoAddReason(Locatable),13,4,7,8
"net.sf.freecol.common.model.Unit.getOccupationLabel(Player, boolean)",27,1,15,15
net.sf.freecol.common.model.Unit.getOwner(),0,1,1,1
"net.sf.freecol.common.model.Unit.getPathComparator(Location, Unit, CostDecider)",2,1,2,2
net.sf.freecol.common.model.Unit.getPathStartLocation(),20,4,15,17
net.sf.freecol.common.model.Unit.getPioneerScore(),17,1,7,8
net.sf.freecol.common.model.Unit.getPriority(),0,1,1,1
net.sf.freecol.common.model.Unit.getProductionInfo(List<AbstractGoods>),0,1,1,1
net.sf.freecol.common.model.Unit.getRank(),0,1,1,1
net.sf.freecol.common.model.Unit.getRepairLabel(),0,1,1,1
net.sf.freecol.common.model.Unit.getRepairLocation(),2,1,3,3
net.sf.freecol.common.model.Unit.getRole(),0,1,1,1
net.sf.freecol.common.model.Unit.getRoleCount(),0,1,1,1
net.sf.freecol.common.model.Unit.getRoleSuffix(),0,1,1,1
net.sf.freecol.common.model.Unit.getSailTurns(),0,1,1,1
net.sf.freecol.common.model.Unit.getScoreValue(),1,1,2,2
net.sf.freecol.common.model.Unit.getScoutScore(),17,1,7,8
net.sf.freecol.common.model.Unit.getSettlement(),1,1,2,2
net.sf.freecol.common.model.Unit.getSimpleMoveType(Direction),3,1,3,3
net.sf.freecol.common.model.Unit.getSimpleMoveType(Tile),1,1,2,2
"net.sf.freecol.common.model.Unit.getSimpleMoveType(Tile, Tile)",1,1,2,2
net.sf.freecol.common.model.Unit.getSkillLevel(),0,1,1,1
net.sf.freecol.common.model.Unit.getSortedMilitaryRoles(),1,1,2,2
net.sf.freecol.common.model.Unit.getSpaceLeft(),0,1,1,1
net.sf.freecol.common.model.Unit.getSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.Unit.getState(),0,1,1,1
net.sf.freecol.common.model.Unit.getStop(),1,1,2,2
net.sf.freecol.common.model.Unit.getStudent(),0,1,1,1
net.sf.freecol.common.model.Unit.getTeacher(),0,1,1,1
net.sf.freecol.common.model.Unit.getTeachingType(Unit),0,1,1,1
net.sf.freecol.common.model.Unit.getTeachingType(UnitType),3,1,3,4
net.sf.freecol.common.model.Unit.getTile(),1,1,2,2
net.sf.freecol.common.model.Unit.getTradeLocation(),6,1,4,4
net.sf.freecol.common.model.Unit.getTradeMoveType(Settlement),16,3,8,10
net.sf.freecol.common.model.Unit.getTradeRoute(),0,1,1,1
net.sf.freecol.common.model.Unit.getTransportFee(),2,2,3,3
net.sf.freecol.common.model.Unit.getTreasureAmount(),0,1,1,1
net.sf.freecol.common.model.Unit.getTrivialPath(),11,6,8,10
net.sf.freecol.common.model.Unit.getTurnsForRepair(),0,1,1,1
net.sf.freecol.common.model.Unit.getTurnsOfTraining(),0,1,1,1
net.sf.freecol.common.model.Unit.getTurnsToReach(Location),0,1,1,1
"net.sf.freecol.common.model.Unit.getTurnsToReach(Location, Location)",0,1,1,1
"net.sf.freecol.common.model.Unit.getTurnsToReach(Location, Location, Unit, CostDecider)",1,1,2,2
net.sf.freecol.common.model.Unit.getType(),0,1,1,1
net.sf.freecol.common.model.Unit.getUnitChange(String),0,1,1,1
"net.sf.freecol.common.model.Unit.getUnitChange(String, UnitType)",2,2,2,3
"net.sf.freecol.common.model.Unit.getUnitChange(String, UnitType, Player)",7,3,7,9
"net.sf.freecol.common.model.Unit.getUnitDestinationLabel(String, Location, Player)",0,1,1,1
net.sf.freecol.common.model.Unit.getUnitSkillLevel(UnitType),1,1,2,2
net.sf.freecol.common.model.Unit.getUnitSpaceTaken(),1,1,2,2
net.sf.freecol.common.model.Unit.getVisibleGoodsCount(),1,1,2,2
net.sf.freecol.common.model.Unit.getVisibleTileSet(),1,1,2,2
net.sf.freecol.common.model.Unit.getWorkImprovement(),0,1,1,1
net.sf.freecol.common.model.Unit.getWorkLeft(),0,1,1,1
net.sf.freecol.common.model.Unit.getWorkLocation(),1,1,2,2
net.sf.freecol.common.model.Unit.getWorkTile(),1,1,2,2
net.sf.freecol.common.model.Unit.getWorkTurnsLeft(),2,1,3,3
net.sf.freecol.common.model.Unit.getWorkType(),0,1,1,1
net.sf.freecol.common.model.Unit.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.Unit.goingToDestination(),1,1,3,3
net.sf.freecol.common.model.Unit.hasCargo(),0,1,1,1
net.sf.freecol.common.model.Unit.hasDefaultRole(),0,1,1,1
net.sf.freecol.common.model.Unit.hasGoodsCargo(),0,1,1,1
net.sf.freecol.common.model.Unit.hasNativeEthnicity(),1,1,1,2
net.sf.freecol.common.model.Unit.hasSpaceLeft(),0,1,1,1
net.sf.freecol.common.model.Unit.hasTile(),0,1,1,1
net.sf.freecol.common.model.Unit.initialize(),2,1,3,3
net.sf.freecol.common.model.Unit.invalidateCache(),0,1,1,1
net.sf.freecol.common.model.Unit.isArmed(),0,1,1,1
net.sf.freecol.common.model.Unit.isAtLocation(Location),2,1,3,3
net.sf.freecol.common.model.Unit.isAtSea(),1,1,2,2
net.sf.freecol.common.model.Unit.isBeached(),0,1,1,1
net.sf.freecol.common.model.Unit.isBeached(Tile),1,1,4,4
net.sf.freecol.common.model.Unit.isCandidateForNextActiveUnit(),1,1,2,2
net.sf.freecol.common.model.Unit.isCarrier(),1,1,2,2
net.sf.freecol.common.model.Unit.isColonist(),1,1,2,2
net.sf.freecol.common.model.Unit.isDamaged(),0,1,1,1
net.sf.freecol.common.model.Unit.isDamagedAndUnderForcedRepair(),1,1,2,2
net.sf.freecol.common.model.Unit.isDefensiveUnit(),2,1,3,3
net.sf.freecol.common.model.Unit.isInColony(),0,1,1,1
"net.sf.freecol.common.model.Unit.isInDanger(int, float)",0,1,1,1
net.sf.freecol.common.model.Unit.isInEurope(),1,1,2,2
net.sf.freecol.common.model.Unit.isInMission(),1,1,2,2
net.sf.freecol.common.model.Unit.isMounted(),0,1,1,1
net.sf.freecol.common.model.Unit.isNaval(),1,1,2,2
net.sf.freecol.common.model.Unit.isOffensiveUnit(),1,1,2,2
net.sf.freecol.common.model.Unit.isOnCarrier(),0,1,1,1
net.sf.freecol.common.model.Unit.isOnTile(),0,1,1,1
net.sf.freecol.common.model.Unit.isOwnerHidden(),1,1,2,2
net.sf.freecol.common.model.Unit.isPerson(),1,1,2,2
net.sf.freecol.common.model.Unit.isReadyToTrade(),1,1,9,9
net.sf.freecol.common.model.Unit.isTileAccessible(Tile),3,1,4,4
net.sf.freecol.common.model.Unit.isTradingUnit(),1,1,2,2
net.sf.freecol.common.model.Unit.isUndead(),0,1,1,1
net.sf.freecol.common.model.Unit.losingEquipmentDemotesUnit(),1,1,2,2
net.sf.freecol.common.model.Unit.losingEquipmentKillsUnit(),1,1,2,2
net.sf.freecol.common.model.Unit.modifyExperience(int),0,1,1,1
net.sf.freecol.common.model.Unit.nonExpertWorker(GoodsType),1,1,3,3
net.sf.freecol.common.model.Unit.readAttributes(FreeColXMLReader),6,1,4,7
net.sf.freecol.common.model.Unit.readChild(FreeColXMLReader),4,1,4,4
net.sf.freecol.common.model.Unit.readChildren(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.model.Unit.readyAndAble(),1,1,7,7
"net.sf.freecol.common.model.Unit.realStart(Location, Unit)",23,13,13,17
"net.sf.freecol.common.model.Unit.reduceVisibility(Tile, Player)",2,1,2,2
net.sf.freecol.common.model.Unit.remove(Locatable),10,6,8,8
net.sf.freecol.common.model.Unit.resolveDestination(),6,3,5,7
net.sf.freecol.common.model.Unit.roleIsAvailable(Role),0,1,1,1
"net.sf.freecol.common.model.Unit.search(Location, GoalDecider, CostDecider, int, Unit)",1,1,2,2
"net.sf.freecol.common.model.Unit.searchForDanger(int, float)",10,4,7,10
net.sf.freecol.common.model.Unit.setAttrition(int),0,1,1,1
net.sf.freecol.common.model.Unit.setCurrentStop(int),0,1,1,1
net.sf.freecol.common.model.Unit.setDestination(Location),0,1,1,1
net.sf.freecol.common.model.Unit.setEntryLocation(Location),3,1,3,3
net.sf.freecol.common.model.Unit.setEthnicity(String),0,1,1,1
net.sf.freecol.common.model.Unit.setExperience(int),0,1,1,1
net.sf.freecol.common.model.Unit.setHitPoints(int),0,1,1,1
net.sf.freecol.common.model.Unit.setHomeIndianSettlement(IndianSettlement),0,1,1,1
net.sf.freecol.common.model.Unit.setLocation(Location),21,8,16,20
net.sf.freecol.common.model.Unit.setLocationNoUpdate(Location),0,1,1,1
net.sf.freecol.common.model.Unit.setMovesLeft(int),1,1,1,2
net.sf.freecol.common.model.Unit.setName(String),0,1,1,1
net.sf.freecol.common.model.Unit.setNationality(String),0,1,1,1
net.sf.freecol.common.model.Unit.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.Unit.setRole(Role),0,1,1,1
net.sf.freecol.common.model.Unit.setRoleCount(int),0,1,1,1
net.sf.freecol.common.model.Unit.setState(UnitState),3,3,3,3
net.sf.freecol.common.model.Unit.setStateToAllChildren(UnitState),3,1,3,3
net.sf.freecol.common.model.Unit.setStateUnchecked(UnitState),16,1,10,16
net.sf.freecol.common.model.Unit.setStudent(Unit),11,4,9,10
net.sf.freecol.common.model.Unit.setTeacher(Unit),14,4,9,10
net.sf.freecol.common.model.Unit.setTradeRoute(TradeRoute),0,1,1,1
net.sf.freecol.common.model.Unit.setTreasureAmount(int),0,1,1,1
net.sf.freecol.common.model.Unit.setTurnsOfTraining(int),0,1,1,1
net.sf.freecol.common.model.Unit.setType(UnitType),0,1,1,1
net.sf.freecol.common.model.Unit.setWorkImprovement(TileImprovement),0,1,1,1
net.sf.freecol.common.model.Unit.setWorkLeft(int),0,1,1,1
net.sf.freecol.common.model.Unit.setWorkType(GoodsType),0,1,1,1
net.sf.freecol.common.model.Unit.shouldTakeTransportTo(Location),2,1,5,5
net.sf.freecol.common.model.Unit.spendAllMoves(),2,1,3,3
net.sf.freecol.common.model.Unit.swapWork(Unit),1,1,2,2
net.sf.freecol.common.model.Unit.toShortString(),3,1,3,3
net.sf.freecol.common.model.Unit.toString(),0,1,1,1
net.sf.freecol.common.model.Unit.toString(String),10,1,7,7
net.sf.freecol.common.model.Unit.trySwapExpert(List<Unit>),2,2,2,3
net.sf.freecol.common.model.Unit.up(),6,1,4,4
net.sf.freecol.common.model.Unit.validateCurrentStop(),6,1,2,5
net.sf.freecol.common.model.Unit.writeAttributes(FreeColXMLWriter),27,1,16,16
net.sf.freecol.common.model.Unit.writeChildren(FreeColXMLWriter),3,1,3,3
"net.sf.freecol.common.model.UnitChangeType.UnitChangeType(String, Specification)",0,1,1,1
net.sf.freecol.common.model.UnitChangeType.addUnitTypeChange(UnitTypeChange),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.UnitChangeType.deleteUnitChanges(UnitType),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.getChanges(),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.getOwnerChange(),0,1,1,1
"net.sf.freecol.common.model.UnitChangeType.getUnitChange(UnitType, UnitType)",1,1,2,2
net.sf.freecol.common.model.UnitChangeType.getUnitChanges(UnitType),1,1,2,2
net.sf.freecol.common.model.UnitChangeType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.UnitChangeType.readChildren(FreeColXMLReader),1,1,2,2
"net.sf.freecol.common.model.UnitChangeType.setChanges(Map<UnitType, List<UnitTypeChange>>)",0,1,1,1
net.sf.freecol.common.model.UnitChangeType.toString(),3,1,3,3
net.sf.freecol.common.model.UnitChangeType.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.UnitChangeType.writeChildren(FreeColXMLWriter),3,1,3,3
net.sf.freecol.common.model.UnitChangeTypeTest.testAbilityScope(),0,1,1,1
net.sf.freecol.common.model.UnitChangeTypeTest.testCreation(),0,1,1,1
net.sf.freecol.common.model.UnitChangeTypeTest.testEmptyScope(),1,1,2,2
"net.sf.freecol.common.model.UnitIterator.UnitIterator(Player, Predicate<Unit>)",0,1,1,1
net.sf.freecol.common.model.UnitIterator.hasNext(),3,3,2,3
net.sf.freecol.common.model.UnitIterator.next(),1,1,2,2
net.sf.freecol.common.model.UnitIterator.remove(),0,1,1,1
net.sf.freecol.common.model.UnitIterator.remove(Unit),0,1,1,1
net.sf.freecol.common.model.UnitIterator.reset(),0,1,1,1
net.sf.freecol.common.model.UnitIterator.setNext(Unit),12,6,5,7
net.sf.freecol.common.model.UnitIterator.update(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.NoAddReason.getDescriptionKey(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.NoAddReason.getKey(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.UnitLocation(Game),0,1,1,1
"net.sf.freecol.common.model.UnitLocation.UnitLocation(Game, String)",0,1,1,1
net.sf.freecol.common.model.UnitLocation.add(Locatable),6,5,5,5
net.sf.freecol.common.model.UnitLocation.addUnit(Unit),1,2,1,2
net.sf.freecol.common.model.UnitLocation.canAdd(Locatable),0,1,1,1
net.sf.freecol.common.model.UnitLocation.clearUnitList(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.contains(Locatable),1,2,1,2
net.sf.freecol.common.model.UnitLocation.copyIn(T),3,2,3,4
net.sf.freecol.common.model.UnitLocation.disposeResources(),0,1,1,1
"net.sf.freecol.common.model.UnitLocation.equipForRole(Unit, Role, int)",0,1,1,1
net.sf.freecol.common.model.UnitLocation.getCarrierForUnit(Unit),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getColony(),1,1,1,2
net.sf.freecol.common.model.UnitLocation.getDisposables(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getFirstUnit(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getGoodsContainer(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getIndianSettlement(),1,1,1,2
net.sf.freecol.common.model.UnitLocation.getLastUnit(),1,2,1,2
net.sf.freecol.common.model.UnitLocation.getLocationLabel(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getLocationLabelFor(Player),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getNavalUnits(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getNoAddReason(Locatable),12,1,5,7
net.sf.freecol.common.model.UnitLocation.getSettlement(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getTile(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getTotalUnitCount(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getUnitCapacity(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getUnitCount(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.getUnitList(),1,1,2,2
net.sf.freecol.common.model.UnitLocation.getUnits(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.hasCarrierWithSpace(int),1,1,3,3
net.sf.freecol.common.model.UnitLocation.intern(),1,1,2,2
net.sf.freecol.common.model.UnitLocation.isEmpty(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.isFull(),0,1,1,1
net.sf.freecol.common.model.UnitLocation.moveToFront(Unit),1,1,2,2
net.sf.freecol.common.model.UnitLocation.priceGoods(List<AbstractGoods>),1,2,1,2
net.sf.freecol.common.model.UnitLocation.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.UnitLocation.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.UnitLocation.remove(Locatable),4,3,2,3
net.sf.freecol.common.model.UnitLocation.writeChildren(FreeColXMLWriter),3,1,3,3
net.sf.freecol.common.model.UnitTest.testAttrition(),4,1,3,3
net.sf.freecol.common.model.UnitTest.testCanAdd(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testCarrierOwnerChange(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testCopy(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testDefaultRole(),1,1,2,2
net.sf.freecol.common.model.UnitTest.testFailedAddGoods(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testGetLineOfSight(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testGetMovesAsString(),1,1,2,2
net.sf.freecol.common.model.UnitTest.testIndianDies(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testIsColonist(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testMissionary(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testOwnerChange(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testTreasureTransportFee(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testUnitAvailability(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testUnitCanBuildColony(),0,1,1,1
net.sf.freecol.common.model.UnitTest.testUnitLocationAfterBuildingColony(),6,1,3,5
net.sf.freecol.common.model.UnitTest.testUnitLosesExperienceWithRoleChange(),0,1,1,1
"net.sf.freecol.common.model.UnitTradeItem.UnitTradeItem(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.UnitTradeItem.UnitTradeItem(Game, Player, Player, Unit)",0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.copyIn(T),2,2,2,3
net.sf.freecol.common.model.UnitTradeItem.equals(Object),2,2,3,3
net.sf.freecol.common.model.UnitTradeItem.evaluateFor(Player),7,1,5,5
net.sf.freecol.common.model.UnitTradeItem.getLabel(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.getUnit(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.hashCode(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.isUnique(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.isValid(),1,1,2,2
net.sf.freecol.common.model.UnitTradeItem.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.setUnit(Unit),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.toString(),0,1,1,1
net.sf.freecol.common.model.UnitTradeItem.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.UnitType.UnitType(String, Specification)",0,1,1,1
"net.sf.freecol.common.model.UnitType.addConsumption(GoodsType, int)",1,1,1,2
"net.sf.freecol.common.model.UnitType.canBeBuiltInColony(Colony, List<BuildableType>)",2,2,3,4
net.sf.freecol.common.model.UnitType.canBuildColony(),0,1,1,1
net.sf.freecol.common.model.UnitType.canCarryGoods(),0,1,1,1
net.sf.freecol.common.model.UnitType.canCarryTreasure(),0,1,1,1
net.sf.freecol.common.model.UnitType.canCarryUnits(),0,1,1,1
net.sf.freecol.common.model.UnitType.canMoveToHighSeas(),0,1,1,1
net.sf.freecol.common.model.UnitType.copyIn(T),2,2,2,3
net.sf.freecol.common.model.UnitType.getAttackRange(),0,1,1,1
net.sf.freecol.common.model.UnitType.getBaseDefence(),0,1,1,1
net.sf.freecol.common.model.UnitType.getBaseOffence(),0,1,1,1
net.sf.freecol.common.model.UnitType.getConsumedGoods(),1,1,2,2
net.sf.freecol.common.model.UnitType.getConsumption(),0,1,1,1
net.sf.freecol.common.model.UnitType.getConsumptionModifiers(String),0,1,1,1
net.sf.freecol.common.model.UnitType.getConsumptionOf(GoodsType),1,1,2,2
net.sf.freecol.common.model.UnitType.getDefaultRole(),0,1,1,1
net.sf.freecol.common.model.UnitType.getDefence(),0,1,1,1
net.sf.freecol.common.model.UnitType.getDisplayRoleId(),1,1,2,2
net.sf.freecol.common.model.UnitType.getExpertProduction(),0,1,1,1
net.sf.freecol.common.model.UnitType.getExpertRoles(),0,1,1,1
net.sf.freecol.common.model.UnitType.getHitPoints(),0,1,1,1
net.sf.freecol.common.model.UnitType.getLineOfSight(),0,1,1,1
net.sf.freecol.common.model.UnitType.getMaximumAttrition(),0,1,1,1
net.sf.freecol.common.model.UnitType.getMaximumExperience(),0,1,1,1
"net.sf.freecol.common.model.UnitType.getMaximumIndex(Colony, JList<BuildableType>, int)",7,5,2,6
net.sf.freecol.common.model.UnitType.getMercenaryPrice(),0,1,1,1
"net.sf.freecol.common.model.UnitType.getMinimumIndex(Colony, JList<BuildableType>, int)",4,4,2,4
net.sf.freecol.common.model.UnitType.getMovement(),0,1,1,1
net.sf.freecol.common.model.UnitType.getOffence(),0,1,1,1
net.sf.freecol.common.model.UnitType.getPrice(),0,1,1,1
net.sf.freecol.common.model.UnitType.getPriority(),0,1,1,1
net.sf.freecol.common.model.UnitType.getRecruitProbability(),0,1,1,1
net.sf.freecol.common.model.UnitType.getScoreValue(),0,1,1,1
net.sf.freecol.common.model.UnitType.getSkill(),0,1,1,1
net.sf.freecol.common.model.UnitType.getSkillTaught(),0,1,1,1
net.sf.freecol.common.model.UnitType.getSpace(),0,1,1,1
net.sf.freecol.common.model.UnitType.getSpaceTaken(),0,1,1,1
net.sf.freecol.common.model.UnitType.getTeachingType(UnitType),9,6,4,7
net.sf.freecol.common.model.UnitType.getWorkingAsKey(),0,1,1,1
net.sf.freecol.common.model.UnitType.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.UnitType.hasMaximumAttrition(),0,1,1,1
net.sf.freecol.common.model.UnitType.hasPrice(),0,1,1,1
net.sf.freecol.common.model.UnitType.hasSkill(),0,1,1,1
net.sf.freecol.common.model.UnitType.isDefaultUnitType(),0,1,1,1
net.sf.freecol.common.model.UnitType.isDefensive(),0,1,1,1
net.sf.freecol.common.model.UnitType.isNaval(),0,1,1,1
net.sf.freecol.common.model.UnitType.isOffensive(),0,1,1,1
net.sf.freecol.common.model.UnitType.isPerson(),0,1,1,1
net.sf.freecol.common.model.UnitType.isRecruitable(),0,1,1,1
net.sf.freecol.common.model.UnitType.readAttributes(FreeColXMLReader),21,1,12,12
net.sf.freecol.common.model.UnitType.readChild(FreeColXMLReader),6,1,6,6
net.sf.freecol.common.model.UnitType.readChildren(FreeColXMLReader),9,1,4,6
net.sf.freecol.common.model.UnitType.setAttackRange(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setConsumption(TypeCountMap<GoodsType>),0,1,1,1
net.sf.freecol.common.model.UnitType.setHitPoints(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setLineOfSight(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setMercenaryPrice(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setSkill(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setSpace(int),0,1,1,1
net.sf.freecol.common.model.UnitType.setSpaceTaken(int),0,1,1,1
net.sf.freecol.common.model.UnitType.toString(),0,1,1,1
net.sf.freecol.common.model.UnitType.writeAttributes(FreeColXMLWriter),5,1,6,6
net.sf.freecol.common.model.UnitType.writeChildren(FreeColXMLWriter),5,1,5,5
"net.sf.freecol.common.model.UnitTypeChange.UnitTypeChange(FreeColXMLReader, Specification)",0,1,1,1
"net.sf.freecol.common.model.UnitTypeChange.UnitTypeChange(String, Specification)",0,1,1,1
net.sf.freecol.common.model.UnitTypeChange.copyIn(T),2,2,2,3
net.sf.freecol.common.model.UnitTypeChange.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.UnitTypeChange.isAvailableTo(Player),0,1,1,1
net.sf.freecol.common.model.UnitTypeChange.readAttributes(FreeColXMLReader),2,1,3,3
net.sf.freecol.common.model.UnitTypeChange.toString(),1,1,2,2
net.sf.freecol.common.model.UnitTypeChange.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.UnitWas.UnitWas(Unit),1,1,2,2
net.sf.freecol.common.model.UnitWas.change(FreeColGameObject),15,1,1,6
net.sf.freecol.common.model.UnitWas.compareTo(UnitWas),1,1,2,2
net.sf.freecol.common.model.UnitWas.equals(Object),2,2,3,3
net.sf.freecol.common.model.UnitWas.fireChanges(),33,1,18,26
"net.sf.freecol.common.model.UnitWas.getAmount(Location, GoodsType)",2,3,2,3
net.sf.freecol.common.model.UnitWas.getLocation(),0,1,1,1
net.sf.freecol.common.model.UnitWas.getUnit(),0,1,1,1
net.sf.freecol.common.model.UnitWas.getWorkType(),0,1,1,1
net.sf.freecol.common.model.UnitWas.hashCode(),0,1,1,1
net.sf.freecol.common.model.UnitWas.toString(),27,1,13,16
"net.sf.freecol.common.model.WorkLocation.Suggestion.Suggestion(WorkLocation, UnitType, UnitType, GoodsType, int)",0,1,1,1
net.sf.freecol.common.model.WorkLocation.Suggestion.getAmount(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.Suggestion.getGoodsType(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.Suggestion.getNewUnitType(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.WorkLocation(Game),0,1,1,1
"net.sf.freecol.common.model.WorkLocation.WorkLocation(Game, String)",0,1,1,1
net.sf.freecol.common.model.WorkLocation.add(Locatable),2,3,1,4
net.sf.freecol.common.model.WorkLocation.canBeWorked(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.canTeach(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.copyIn(T),2,2,2,3
net.sf.freecol.common.model.WorkLocation.evaluateFor(Player),3,3,2,3
"net.sf.freecol.common.model.WorkLocation.getBestProductionType(boolean, GoodsType)",0,1,1,1
net.sf.freecol.common.model.WorkLocation.getClaimTemplate(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getColony(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getCurrentWorkType(),2,1,3,3
net.sf.freecol.common.model.WorkLocation.getExpertUnitType(),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getGenericPotential(GoodsType),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getInputs(),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getLocationLabelFor(Player),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getMaximumProductionOf(GoodsType),4,4,3,4
net.sf.freecol.common.model.WorkLocation.getNoAddReason(Locatable),4,2,4,5
"net.sf.freecol.common.model.WorkLocation.getOccupation(Unit, boolean)",6,3,4,6
net.sf.freecol.common.model.WorkLocation.getOccupation(UnitType),5,1,3,5
net.sf.freecol.common.model.WorkLocation.getOutputs(),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getOwner(),1,1,2,2
"net.sf.freecol.common.model.WorkLocation.getPotentialProduction(GoodsType, UnitType)",8,3,2,7
net.sf.freecol.common.model.WorkLocation.getProduction(),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getProductionDeficit(GoodsType),1,1,2,2
net.sf.freecol.common.model.WorkLocation.getProductionInfo(),0,1,1,1
"net.sf.freecol.common.model.WorkLocation.getProductionOf(Unit, GoodsType)",2,2,2,3
net.sf.freecol.common.model.WorkLocation.getProductionType(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getRank(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getSettlement(),0,1,1,1
"net.sf.freecol.common.model.WorkLocation.getSuggestion(Unit, ProductionType, GoodsType)",16,5,13,17
net.sf.freecol.common.model.WorkLocation.getSuggestions(),12,2,8,11
net.sf.freecol.common.model.WorkLocation.getTile(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.getTotalProductionOf(GoodsType),1,2,1,2
"net.sf.freecol.common.model.WorkLocation.getUnitProduction(Unit, GoodsType)",2,2,2,3
net.sf.freecol.common.model.WorkLocation.getWorkFor(Unit),1,1,1,2
"net.sf.freecol.common.model.WorkLocation.goodSuggestionCheck(UnitType, Unit, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.WorkLocation.goodSuggestionCheck(UnitType, Unit, GoodsType, WorkLocation)",0,1,1,1
net.sf.freecol.common.model.WorkLocation.hasInputs(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.hasOutputs(),1,1,2,2
net.sf.freecol.common.model.WorkLocation.produces(GoodsType),0,1,1,1
net.sf.freecol.common.model.WorkLocation.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.WorkLocation.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.model.WorkLocation.remove(Locatable),4,4,2,5
net.sf.freecol.common.model.WorkLocation.setColony(Colony),0,1,1,1
net.sf.freecol.common.model.WorkLocation.setOwner(Player),0,1,1,1
net.sf.freecol.common.model.WorkLocation.setProductionType(ProductionType),1,1,2,2
net.sf.freecol.common.model.WorkLocation.setWorkFor(Unit),1,1,2,2
net.sf.freecol.common.model.WorkLocation.updateProductionType(),0,1,1,1
net.sf.freecol.common.model.WorkLocation.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.WorkLocation.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game),0,1,1,1
"net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.mission.AbstractMission.AbstractMission(Game, String)",0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.getRepeatCount(),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.getTurnCount(),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.getUnit(),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.isValid(),1,1,3,3
net.sf.freecol.common.model.mission.AbstractMission.isValidFor(Unit),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.setRepeatCount(int),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.setTurnCount(int),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.setUnit(Unit),0,1,1,1
net.sf.freecol.common.model.mission.AbstractMission.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game),0,1,1,1
"net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.mission.CompoundMission.CompoundMission(Game, String)",0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.doMission(),14,6,4,6
net.sf.freecol.common.model.mission.CompoundMission.getIndex(),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.getMissions(),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.isValid(),2,1,3,3
net.sf.freecol.common.model.mission.CompoundMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.readChildren(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.model.mission.CompoundMission.setIndex(int),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.setMissions(List<Mission>),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.mission.CompoundMission.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game),0,1,1,1
"net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.mission.GoToMission.GoToMission(Game, String)",0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.doMission(),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.getBlockedCount(),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.getDestination(),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.isValid(),1,1,3,3
net.sf.freecol.common.model.mission.GoToMission.isValidFor(Unit),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.setBlockedCount(int),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.setDestination(Location),0,1,1,1
net.sf.freecol.common.model.mission.GoToMission.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game),0,1,1,1
"net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.model.mission.ImprovementMission.ImprovementMission(Game, String)",0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.doMission(),2,1,1,3
net.sf.freecol.common.model.mission.ImprovementMission.getImprovement(),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.getXMLTagName(),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.isValid(),1,1,3,3
net.sf.freecol.common.model.mission.ImprovementMission.isValidFor(Unit),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.setImprovement(TileImprovement),0,1,1,1
net.sf.freecol.common.model.mission.ImprovementMission.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.common.model.mission.MissionManager.getMission(Game, FreeColXMLReader)",4,2,3,3
net.sf.freecol.common.model.mission.MissionManager.isMissionTag(String),0,1,1,1
"net.sf.freecol.common.model.pathfinding.BaseCostDecider.adjust(Unit, Tile, Tile, int)",2,1,2,2
"net.sf.freecol.common.model.pathfinding.BaseCostDecider.getCost(Unit, Location, Location, int)",18,7,9,16
net.sf.freecol.common.model.pathfinding.BaseCostDecider.getMovesLeft(),0,1,1,1
net.sf.freecol.common.model.pathfinding.BaseCostDecider.getNewTurns(),0,1,1,1
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidNavalDangerCostDecider.getCost(Unit, Location, Location, int)",9,1,6,10
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsAndBlockingUnitsCostDecider.getCost(Unit, Location, Location, int)",7,4,5,8
"net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsCostDecider.getCost(Unit, Location, Location, int)",5,3,3,5
"net.sf.freecol.common.model.pathfinding.CostDeciders.ServerBaseCostDecider.getCost(Unit, Location, Location, int)",5,4,3,5
"net.sf.freecol.common.model.pathfinding.CostDeciders.TileCostDecider.getCost(Unit, Location, Location, int)",6,4,2,7
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidIllegal(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidNavalDanger(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidSettlements(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.avoidSettlementsAndBlockingUnits(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.defaultCostDeciderFor(Unit),7,1,5,5
net.sf.freecol.common.model.pathfinding.CostDeciders.getComposedCostDecider(CostDecider...),14,4,4,8
net.sf.freecol.common.model.pathfinding.CostDeciders.numberOfLegalTiles(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.numberOfTiles(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.serverAvoidIllegal(),0,1,1,1
net.sf.freecol.common.model.pathfinding.CostDeciders.tileCost(),0,1,1,1
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.MultipleAdjacentDecider(List<Location>),8,2,4,5
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.getGoalDecider(),0,1,1,1
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider.getResults(),0,1,1,1
net.sf.freecol.common.model.pathfinding.GoalDeciders.getAdjacentLocationGoalDecider(Location),4,3,2,4
"net.sf.freecol.common.model.pathfinding.GoalDeciders.getComposedGoalDecider(boolean, GoalDecider...)",39,13,3,15
net.sf.freecol.common.model.pathfinding.GoalDeciders.getCornerGoalDecider(),3,2,3,3
net.sf.freecol.common.model.pathfinding.GoalDeciders.getDisembarkGoalDecider(Tile),12,3,10,13
net.sf.freecol.common.model.pathfinding.GoalDeciders.getEnemySettlementGoalDecider(Collection<Player>),7,4,2,5
net.sf.freecol.common.model.pathfinding.GoalDeciders.getHighSeasGoalDecider(),8,3,7,8
net.sf.freecol.common.model.pathfinding.GoalDeciders.getLocationGoalDecider(Location),5,2,2,3
net.sf.freecol.common.model.pathfinding.GoalDeciders.getOurClosestSettlementGoalDecider(),9,3,3,5
net.sf.freecol.common.model.pathfinding.GoalDeciders.getReduceHighSeasCountGoalDecider(Unit),5,3,3,3
net.sf.freecol.common.model.pathfinding.GoalDeciders.getSimpleHighSeasGoalDecider(),3,2,2,3
net.sf.freecol.common.model.pathfinding.GoalDeciders.getStealthyGoalDecider(Player),2,2,1,2
"net.sf.freecol.common.model.production.BuildingProductionCalculator.BuildingProductionCalculator(Player, FeatureContainer, int)",0,1,1,1
"net.sf.freecol.common.model.production.BuildingProductionCalculator.determineProduction(BuildingType, List<WorkerAssignment>, Turn, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getAdjustedProductionInfo(BuildingType, Turn, List<WorkerAssignment>, List<AbstractGoods>, List<AbstractGoods>, int)",42,5,19,24
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getAvailable(GoodsType, List<AbstractGoods>)",0,1,1,1
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getBaseProduction(BuildingType, ProductionType, GoodsType, UnitType)",1,1,2,2
net.sf.freecol.common.model.production.BuildingProductionCalculator.getBestProductionType(BuildingType),0,1,1,1
net.sf.freecol.common.model.production.BuildingProductionCalculator.getExpertUnitType(BuildingType),1,1,2,2
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getInputs(BuildingType, List<WorkerAssignment>)",3,1,3,3
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getOutputs(BuildingType, List<WorkerAssignment>)",3,1,3,3
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getProductionModifiers(Turn, BuildingType, GoodsType, UnitType)",6,1,5,5
"net.sf.freecol.common.model.production.BuildingProductionCalculator.getUnitProduction(Turn, BuildingType, WorkerAssignment, GoodsType)",2,2,2,3
net.sf.freecol.common.model.production.ProductionUtils.ProductionUtils(),0,1,1,1
"net.sf.freecol.common.model.production.ProductionUtils.createRebelProductionModifierStream(int, GoodsType, int)",0,1,1,1
"net.sf.freecol.common.model.production.ProductionUtils.getRebelProductionModifiersForBuilding(BuildingType, int, GoodsType, UnitType)",2,2,3,3
"net.sf.freecol.common.model.production.ProductionUtils.getRebelProductionModifiersForTile(Tile, int, GoodsType, UnitType)",7,4,7,9
"net.sf.freecol.common.model.production.TileProductionCalculator.TileProductionCalculator(Player, int)",0,1,1,1
"net.sf.freecol.common.model.production.TileProductionCalculator.getBaseProduction(Tile, ProductionType, GoodsType, UnitType)",3,2,3,5
"net.sf.freecol.common.model.production.TileProductionCalculator.getBasicProductionInfo(Tile, Turn, WorkerAssignment, boolean)",9,2,4,5
"net.sf.freecol.common.model.production.TileProductionCalculator.getCenterTileProduction(Turn, Tile, GoodsType)",0,1,1,1
"net.sf.freecol.common.model.production.TileProductionCalculator.getCenterTileProductionModifiers(Turn, Tile, GoodsType)",1,2,2,2
"net.sf.freecol.common.model.production.TileProductionCalculator.getProductionModifiers(Turn, Tile, GoodsType, UnitType)",3,2,4,4
"net.sf.freecol.common.model.production.TileProductionCalculator.getUnitProduction(Turn, Tile, WorkerAssignment, GoodsType)",2,2,3,4
"net.sf.freecol.common.model.production.WorkerAssignment.WorkerAssignment(UnitType, ProductionType)",0,1,1,1
net.sf.freecol.common.model.production.WorkerAssignment.getProductionType(),0,1,1,1
net.sf.freecol.common.model.production.WorkerAssignment.getUnitType(),0,1,1,1
net.sf.freecol.common.networking.AbandonColonyMessage.AbandonColonyMessage(Colony),0,1,1,1
"net.sf.freecol.common.networking.AbandonColonyMessage.AbandonColonyMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.AbandonColonyMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AbandonColonyMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AbandonColonyMessage.serverHandler(FreeColServer, ServerPlayer)",2,2,3,3
"net.sf.freecol.common.networking.AddPlayerMessage.AddPlayerMessage(Game, FreeColXMLReader)",7,1,4,4
"net.sf.freecol.common.networking.AddPlayerMessage.AddPlayerMessage(Player, List<Player>)",0,1,1,1
"net.sf.freecol.common.networking.AddPlayerMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.AddPlayerMessage.clientHandler(FreeColClient),2,1,2,2
net.sf.freecol.common.networking.AddPlayerMessage.getPlayers(),0,1,1,1
net.sf.freecol.common.networking.AddPlayerMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.AddPlayerMessage.toXML(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.common.networking.AnimateAttackMessage.AnimateAttackMessage(Game, FreeColXMLReader)",7,1,4,4
"net.sf.freecol.common.networking.AnimateAttackMessage.AnimateAttackMessage(Unit, Unit, boolean, boolean, boolean)",6,1,5,5
"net.sf.freecol.common.networking.AnimateAttackMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.clientHandler(FreeColClient),4,3,5,5
net.sf.freecol.common.networking.AnimateAttackMessage.getAttacker(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.getAttackerTile(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.getDefender(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.getDefenderTile(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.AnimateAttackMessage.getResult(),0,1,1,1
"net.sf.freecol.common.networking.AnimateAttackMessage.getUnit(Game, String)",7,6,4,6
"net.sf.freecol.common.networking.AnimateMoveMessage.AnimateMoveMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.AnimateMoveMessage.AnimateMoveMessage(Unit, Tile, Tile, boolean)",3,1,3,3
"net.sf.freecol.common.networking.AnimateMoveMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.AnimateMoveMessage.clientHandler(FreeColClient),3,4,3,4
net.sf.freecol.common.networking.AnimateMoveMessage.getNewTile(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateMoveMessage.getOldTile(Game),0,1,1,1
net.sf.freecol.common.networking.AnimateMoveMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.AnimateMoveMessage.getUnit(Game),11,1,5,5
"net.sf.freecol.common.networking.AskSkillMessage.AskSkillMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.AskSkillMessage.AskSkillMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.AskSkillMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AskSkillMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AskSkillMessage.serverHandler(FreeColServer, ServerPlayer)",4,3,5,5
"net.sf.freecol.common.networking.AssignTeacherMessage.AssignTeacherMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.AssignTeacherMessage.AssignTeacherMessage(Unit, Unit)",0,1,1,1
net.sf.freecol.common.networking.AssignTeacherMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AssignTeacherMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AssignTeacherMessage.serverHandler(FreeColServer, ServerPlayer)",8,7,9,9
"net.sf.freecol.common.networking.AssignTradeRouteMessage.AssignTradeRouteMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.AssignTradeRouteMessage.AssignTradeRouteMessage(Unit, TradeRoute)",1,1,2,2
"net.sf.freecol.common.networking.AssignTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.AssignTradeRouteMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AssignTradeRouteMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AssignTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",5,2,4,4
"net.sf.freecol.common.networking.AttackMessage.AttackMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.AttackMessage.AttackMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.AttackMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AttackMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AttackMessage.serverHandler(FreeColServer, ServerPlayer)",7,4,8,8
"net.sf.freecol.common.networking.AttackRangedMessage.AttackRangedMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.AttackRangedMessage.AttackRangedMessage(Unit, Tile)",0,1,1,1
net.sf.freecol.common.networking.AttackRangedMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.AttackRangedMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.AttackRangedMessage.serverHandler(FreeColServer, ServerPlayer)",6,4,6,6
net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String),0,1,1,1
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, FreeColXMLReader, String...)",0,1,1,1
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, Map<String, String>)",0,1,1,1
"net.sf.freecol.common.networking.AttributeMessage.AttributeMessage(String, String...)",0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.canMerge(),0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.getStringAttribute(String),0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.getStringAttributeMap(),0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.hasAttribute(String),0,1,1,1
net.sf.freecol.common.networking.AttributeMessage.setMergeable(boolean),0,1,1,1
"net.sf.freecol.common.networking.AttributeMessage.setStringAttribute(String, String)",2,1,2,3
"net.sf.freecol.common.networking.BuildColonyMessage.BuildColonyMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.BuildColonyMessage.BuildColonyMessage(String, Unit)",0,1,1,1
net.sf.freecol.common.networking.BuildColonyMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.BuildColonyMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.BuildColonyMessage.serverHandler(FreeColServer, ServerPlayer)",6,6,7,7
"net.sf.freecol.common.networking.CashInTreasureTrainMessage.CashInTreasureTrainMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.CashInTreasureTrainMessage.CashInTreasureTrainMessage(Unit),0,1,1,1
net.sf.freecol.common.networking.CashInTreasureTrainMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.CashInTreasureTrainMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.CashInTreasureTrainMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,4,4
"net.sf.freecol.common.networking.ChangeSet.AttackChange.AttackChange(See, Unit, Unit, boolean)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.AttackChange.attackerVisible(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.AttackChange.defenderVisible(Player),2,1,3,3
net.sf.freecol.common.networking.ChangeSet.AttackChange.isNotifiable(Player),3,3,4,7
net.sf.freecol.common.networking.ChangeSet.AttackChange.toMessage(Player),3,2,3,4
net.sf.freecol.common.networking.ChangeSet.AttackChange.toString(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.AttributeChange.AttributeChange(See, String, String)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.AttributeChange.toMessage(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.AttributeChange.toString(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.Change.Change(See),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.Change.check(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.Change.consequence(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.Change.isNotifiable(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.Change.matches(FreeColGameObject),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.ChangeSet(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.ChangeSet(ChangeSet),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.FeatureChange.FeatureChange(See, FreeColGameObject, FreeColObject, boolean)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.FeatureChange.isNotifiable(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.FeatureChange.toMessage(Player),1,1,1,2
net.sf.freecol.common.networking.ChangeSet.FeatureChange.toString(),2,1,1,3
"net.sf.freecol.common.networking.ChangeSet.MessageChange.MessageChange(See, T)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.MessageChange.toMessage(Player),1,1,1,2
net.sf.freecol.common.networking.ChangeSet.MessageChange.toString(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.MoveChange.MoveChange(See, Unit, Location, Tile)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.MoveChange.consequence(Player),2,1,4,4
net.sf.freecol.common.networking.ChangeSet.MoveChange.isNotifiable(Player),3,4,2,6
net.sf.freecol.common.networking.ChangeSet.MoveChange.seeNew(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.MoveChange.seeOld(Player),3,1,5,5
net.sf.freecol.common.networking.ChangeSet.MoveChange.toMessage(Player),2,2,2,3
net.sf.freecol.common.networking.ChangeSet.MoveChange.toString(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.ObjectChange.ObjectChange(See, FreeColGameObject)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.ObjectChange.isNotifiable(Player),7,8,4,10
net.sf.freecol.common.networking.ChangeSet.ObjectChange.matches(FreeColGameObject),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.ObjectChange.toMessage(Player),1,1,2,2
net.sf.freecol.common.networking.ChangeSet.ObjectChange.toString(),1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.PartialObjectChange(See, T, Map<String, String>)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.toMessage(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange.toString(),1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.PlayerChange.PlayerChange(See, List<? extends Player>)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.PlayerChange.toMessage(Player),1,2,1,2
net.sf.freecol.common.networking.ChangeSet.PlayerChange.toString(),1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.RemoveChange.RemoveChange(See, Location, Stream<? extends FreeColGameObject>)",1,1,1,2
net.sf.freecol.common.networking.ChangeSet.RemoveChange.fullRemoval(Player),1,1,2,2
net.sf.freecol.common.networking.ChangeSet.RemoveChange.getMainObject(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.RemoveChange.isNotifiable(Player),3,3,5,8
net.sf.freecol.common.networking.ChangeSet.RemoveChange.toMessage(Player),2,1,3,3
net.sf.freecol.common.networking.ChangeSet.RemoveChange.toString(),2,1,3,3
net.sf.freecol.common.networking.ChangeSet.See.See(int),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.all(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.always(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.check(Player),18,1,1,9
net.sf.freecol.common.networking.ChangeSet.See.except(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.only(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.perhaps(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.perhapsOnly(Player),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.See.toString(),9,1,4,7
"net.sf.freecol.common.networking.ChangeSet.SpyChange.SpyChange(See, Unit, Settlement)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.SpyChange.toMessage(Player),1,1,1,2
net.sf.freecol.common.networking.ChangeSet.SpyChange.toString(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.StanceChange.StanceChange(See, Player, Stance, Player)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.StanceChange.toMessage(Player),1,1,1,2
net.sf.freecol.common.networking.ChangeSet.StanceChange.toString(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.add(See, Collection<? extends FreeColGameObject>)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.add(See, FreeColGameObject...)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.add(See, T)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addAbility(Player, FreeColGameObject, Ability, boolean)",2,1,2,2
"net.sf.freecol.common.networking.ChangeSet.addAttack(See, Unit, Unit, boolean)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addAttribute(See, String, String)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addDisappear(Player, Tile, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addGlobalHistory(Game, HistoryEvent)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.addGlobalMessage(Game, Player, ModelMessage)",3,3,2,3
"net.sf.freecol.common.networking.ChangeSet.addHistory(Player, HistoryEvent)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addMessage(Player, ModelMessage)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addModifier(Player, FreeColGameObject, Modifier, boolean)",2,1,2,2
"net.sf.freecol.common.networking.ChangeSet.addMove(See, Unit, Location, Tile)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.addNewPlayer(Player),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addPartial(See, T, String...)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.addPlayers(List<? extends Player>),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addRemove(See, Location, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addRemoves(See, Location, List<? extends FreeColGameObject>)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.addSale(Player, Settlement, GoodsType, int)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addSpy(Unit, Settlement)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.addStance(See, Player, Stance, Player)",0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.aiChange(Player, boolean)",0,1,1,1
net.sf.freecol.common.networking.ChangeSet.build(Player),18,4,7,11
net.sf.freecol.common.networking.ChangeSet.clear(),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.clientError(Player, String)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.clientError(Player, StringTemplate)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.clientError(See, String)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.clientError(See, StringTemplate)",1,1,2,2
net.sf.freecol.common.networking.ChangeSet.isEmpty(),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.merge(ChangeSet),0,1,1,1
net.sf.freecol.common.networking.ChangeSet.remove(FreeColGameObject),0,1,1,1
"net.sf.freecol.common.networking.ChangeSet.simpleChange(Player, Message)",1,1,2,2
"net.sf.freecol.common.networking.ChangeSet.simpleChange(See, Message)",1,1,2,2
net.sf.freecol.common.networking.ChangeSet.toString(),1,1,2,2
"net.sf.freecol.common.networking.ChangeStateMessage.ChangeStateMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ChangeStateMessage.ChangeStateMessage(Unit, UnitState)",0,1,1,1
net.sf.freecol.common.networking.ChangeStateMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ChangeStateMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ChangeStateMessage.serverHandler(FreeColServer, ServerPlayer)",3,2,4,4
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.ChangeWorkImprovementTypeMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.ChangeWorkImprovementTypeMessage(Unit, TileImprovementType)",0,1,1,1
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage.serverHandler(FreeColServer, ServerPlayer)",12,9,10,10
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.ChangeWorkTypeMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.ChangeWorkTypeMessage(Unit, GoodsType)",0,1,1,1
net.sf.freecol.common.networking.ChangeWorkTypeMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ChangeWorkTypeMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ChangeWorkTypeMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,4,4
"net.sf.freecol.common.networking.ChatMessage.ChatMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ChatMessage.ChatMessage(Player, String, boolean)",0,1,1,1
"net.sf.freecol.common.networking.ChatMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.ChatMessage.clientHandler(FreeColClient),4,2,2,4
net.sf.freecol.common.networking.ChatMessage.getColor(),1,1,1,2
net.sf.freecol.common.networking.ChatMessage.getMessage(),0,1,1,1
net.sf.freecol.common.networking.ChatMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.ChatMessage.getSender(),0,1,1,1
net.sf.freecol.common.networking.ChatMessage.isPrivate(),0,1,1,1
"net.sf.freecol.common.networking.ChatMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.ChooseFoundingFatherMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.ChooseFoundingFatherMessage(List<FoundingFather>, FoundingFather)",1,1,2,2
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getAttributeMap(FreeColXMLReader),2,1,3,3
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getFather(Game),1,1,2,2
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getFathers(Game),0,1,1,1
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ChooseFoundingFatherMessage.serverHandler(FreeColServer, ServerPlayer)",1,2,2,2
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.setFather(FoundingFather),1,1,2,2
net.sf.freecol.common.networking.ChooseFoundingFatherMessage.setFatherAttributes(List<FoundingFather>),0,1,1,1
"net.sf.freecol.common.networking.ClaimLandMessage.ClaimLandMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ClaimLandMessage.ClaimLandMessage(Tile, FreeColGameObject, int)",0,1,1,1
net.sf.freecol.common.networking.ClaimLandMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ClaimLandMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ClaimLandMessage.serverHandler(FreeColServer, ServerPlayer)",43,17,21,24
"net.sf.freecol.common.networking.ClearSpecialityMessage.ClearSpecialityMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.ClearSpecialityMessage.ClearSpecialityMessage(Unit),0,1,1,1
net.sf.freecol.common.networking.ClearSpecialityMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ClearSpecialityMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ClearSpecialityMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
"net.sf.freecol.common.networking.CloseMessage.CloseMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.CloseMessage.CloseMessage(String),0,1,1,1
"net.sf.freecol.common.networking.CloseMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.CloseMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.CloseMessage.getPanel(),0,1,1,1
net.sf.freecol.common.networking.CloseMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.Connection.Connection(Socket, String)",0,1,1,1
net.sf.freecol.common.networking.Connection.Connection(String),0,1,1,1
"net.sf.freecol.common.networking.Connection.Connection(String, int, String)",0,1,1,1
"net.sf.freecol.common.networking.Connection.askMessage(Message, long)",5,5,1,6
net.sf.freecol.common.networking.Connection.close(),1,1,2,2
net.sf.freecol.common.networking.Connection.closeInputStream(),3,1,3,3
net.sf.freecol.common.networking.Connection.closeOutputStream(),1,1,2,2
net.sf.freecol.common.networking.Connection.closeSocket(),3,1,3,3
"net.sf.freecol.common.networking.Connection.createSocket(String, int)",0,1,1,1
net.sf.freecol.common.networking.Connection.disconnect(),0,1,1,1
net.sf.freecol.common.networking.Connection.endListen(),0,1,1,1
net.sf.freecol.common.networking.Connection.getFreeColXMLReader(),0,1,1,1
net.sf.freecol.common.networking.Connection.getHostAddress(),1,1,2,2
net.sf.freecol.common.networking.Connection.getMessageHandler(),0,1,1,1
net.sf.freecol.common.networking.Connection.getName(),0,1,1,1
net.sf.freecol.common.networking.Connection.getPort(),1,1,2,2
net.sf.freecol.common.networking.Connection.getReplyId(),1,1,2,2
net.sf.freecol.common.networking.Connection.getSocket(),0,1,1,1
net.sf.freecol.common.networking.Connection.getSocketName(),1,1,2,2
net.sf.freecol.common.networking.Connection.handle(Message),2,2,2,3
net.sf.freecol.common.networking.Connection.isAlive(),0,1,1,1
"net.sf.freecol.common.networking.Connection.logMessage(Message, boolean)",4,2,1,5
net.sf.freecol.common.networking.Connection.reader(),2,3,2,3
net.sf.freecol.common.networking.Connection.request(Message),3,2,2,4
net.sf.freecol.common.networking.Connection.send(Message),1,1,2,2
net.sf.freecol.common.networking.Connection.sendDisconnect(),1,1,2,2
net.sf.freecol.common.networking.Connection.sendMessage(Message),2,3,1,3
net.sf.freecol.common.networking.Connection.sendReconnect(),1,1,2,2
net.sf.freecol.common.networking.Connection.setCommsLogging(boolean),3,1,3,3
net.sf.freecol.common.networking.Connection.setMessageHandler(MessageHandler),0,1,1,1
net.sf.freecol.common.networking.Connection.setSocket(Socket),0,1,1,1
net.sf.freecol.common.networking.Connection.setWriteScope(WriteScope),1,1,2,2
net.sf.freecol.common.networking.Connection.startListen(),3,2,1,4
net.sf.freecol.common.networking.Connection.startReceiving(),1,1,2,2
net.sf.freecol.common.networking.Connection.toString(),0,1,1,1
"net.sf.freecol.common.networking.ConnectionVerificationMessage.ConnectionVerificationMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.ConnectionVerificationMessage.ConnectionVerificationMessage(boolean),0,1,1,1
net.sf.freecol.common.networking.ConnectionVerificationMessage.isConnectable(),0,1,1,1
net.sf.freecol.common.networking.ContinueMessage.ContinueMessage(),0,1,1,1
"net.sf.freecol.common.networking.ContinueMessage.ContinueMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ContinueMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.DeclareIndependenceMessage.DeclareIndependenceMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.DeclareIndependenceMessage.DeclareIndependenceMessage(String, String)",0,1,1,1
net.sf.freecol.common.networking.DeclareIndependenceMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DeclareIndependenceMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DeclareIndependenceMessage.serverHandler(FreeColServer, ServerPlayer)",5,4,6,6
"net.sf.freecol.common.networking.DeclineMoundsMessage.DeclineMoundsMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.DeclineMoundsMessage.DeclineMoundsMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.DeclineMoundsMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DeclineMoundsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DeclineMoundsMessage.serverHandler(FreeColServer, ServerPlayer)",4,2,5,5
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.DeleteTradeRouteMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.DeleteTradeRouteMessage.DeleteTradeRouteMessage(TradeRoute),0,1,1,1
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.DeleteTradeRouteMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DeleteTradeRouteMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DeleteTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
"net.sf.freecol.common.networking.DeliverGiftMessage.DeliverGiftMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.DeliverGiftMessage.DeliverGiftMessage(Unit, IndianSettlement, Goods)",0,1,1,1
net.sf.freecol.common.networking.DeliverGiftMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DeliverGiftMessage.getGoods(),0,1,1,1
net.sf.freecol.common.networking.DeliverGiftMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DeliverGiftMessage.serverHandler(FreeColServer, ServerPlayer)",4,3,5,5
"net.sf.freecol.common.networking.DemandTributeMessage.DemandTributeMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.DemandTributeMessage.DemandTributeMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.DemandTributeMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DemandTributeMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DemandTributeMessage.serverHandler(FreeColServer, ServerPlayer)",8,4,7,8
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Colony, Unit, DiplomaticTrade)",0,1,1,1
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",0,1,1,1
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Game, FreeColXMLReader)",16,1,6,7
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Unit, Colony, DiplomaticTrade)",0,1,1,1
"net.sf.freecol.common.networking.DiplomacyMessage.DiplomacyMessage(Unit, Unit, DiplomaticTrade)",0,1,1,1
"net.sf.freecol.common.networking.DiplomacyMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.DiplomacyMessage.clientHandler(FreeColClient),3,3,4,4
net.sf.freecol.common.networking.DiplomacyMessage.getAgreement(),0,1,1,1
net.sf.freecol.common.networking.DiplomacyMessage.getExtraUnit(),0,1,1,1
net.sf.freecol.common.networking.DiplomacyMessage.getOtherFCGO(Game),0,1,1,1
net.sf.freecol.common.networking.DiplomacyMessage.getOurFCGO(Game),0,1,1,1
net.sf.freecol.common.networking.DiplomacyMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DiplomacyMessage.serverHandler(FreeColServer, ServerPlayer)",87,6,44,52
"net.sf.freecol.common.networking.DisbandUnitMessage.DisbandUnitMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.DisbandUnitMessage.DisbandUnitMessage(Unit),0,1,1,1
net.sf.freecol.common.networking.DisbandUnitMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DisbandUnitMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DisbandUnitMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
net.sf.freecol.common.networking.DisconnectMessage.DisconnectMessage(),0,1,1,1
"net.sf.freecol.common.networking.DisconnectMessage.DisconnectMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.DisconnectMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.DisconnectMessage.clientHandler(FreeColClient),0,1,1,1
"net.sf.freecol.common.networking.DisconnectMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.DisembarkMessage.DisembarkMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.DisembarkMessage.DisembarkMessage(Unit),0,1,1,1
net.sf.freecol.common.networking.DisembarkMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.DisembarkMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.DisembarkMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
"net.sf.freecol.common.networking.EmbarkMessage.EmbarkMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.EmbarkMessage.EmbarkMessage(Unit, Unit, Direction)",1,1,2,2
net.sf.freecol.common.networking.EmbarkMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.EmbarkMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.EmbarkMessage.serverHandler(FreeColServer, ServerPlayer)",12,5,8,8
"net.sf.freecol.common.networking.EmigrateUnitMessage.EmigrateUnitMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.EmigrateUnitMessage.EmigrateUnitMessage(int),0,1,1,1
net.sf.freecol.common.networking.EmigrateUnitMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.EmigrateUnitMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.EmigrateUnitMessage.serverHandler(FreeColServer, ServerPlayer)",13,8,10,10
net.sf.freecol.common.networking.EndTurnMessage.EndTurnMessage(),0,1,1,1
"net.sf.freecol.common.networking.EndTurnMessage.EndTurnMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.EndTurnMessage.currentPlayerMessage(),0,1,1,1
"net.sf.freecol.common.networking.EndTurnMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.EnterRevengeModeMessage.EnterRevengeModeMessage(),0,1,1,1
"net.sf.freecol.common.networking.EnterRevengeModeMessage.EnterRevengeModeMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.EnterRevengeModeMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.EquipForRoleMessage.EquipForRoleMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.EquipForRoleMessage.EquipForRoleMessage(Unit, Role, int)",0,1,1,1
net.sf.freecol.common.networking.EquipForRoleMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.EquipForRoleMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.EquipForRoleMessage.serverHandler(FreeColServer, ServerPlayer)",8,6,9,9
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(Exception),0,1,1,1
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(String),0,1,1,1
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(String, Exception)",0,1,1,1
net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(StringTemplate),0,1,1,1
"net.sf.freecol.common.networking.ErrorMessage.ErrorMessage(StringTemplate, String)",0,1,1,1
"net.sf.freecol.common.networking.ErrorMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.ErrorMessage.clientHandler(FreeColClient),2,1,2,2
net.sf.freecol.common.networking.ErrorMessage.getMessage(),0,1,1,1
net.sf.freecol.common.networking.ErrorMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.ErrorMessage.getTemplate(),0,1,1,1
"net.sf.freecol.common.networking.FeatureChangeMessage.FeatureChangeMessage(FreeColGameObject, FreeColObject, boolean)",0,1,1,1
"net.sf.freecol.common.networking.FeatureChangeMessage.FeatureChangeMessage(Game, FreeColXMLReader)",8,1,7,7
"net.sf.freecol.common.networking.FeatureChangeMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.FeatureChangeMessage.clientHandler(FreeColClient),2,3,3,3
net.sf.freecol.common.networking.FeatureChangeMessage.getAdd(),0,1,1,1
net.sf.freecol.common.networking.FeatureChangeMessage.getParent(Game),0,1,1,1
net.sf.freecol.common.networking.FeatureChangeMessage.getParentId(),0,1,1,1
net.sf.freecol.common.networking.FeatureChangeMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.FeatureChangeMessage.merge(Message),4,3,4,4
"net.sf.freecol.common.networking.FirstContactMessage.FirstContactMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.FirstContactMessage.FirstContactMessage(Player, Player, Tile)",2,1,3,3
"net.sf.freecol.common.networking.FirstContactMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.clientHandler(FreeColClient),6,4,8,8
net.sf.freecol.common.networking.FirstContactMessage.getOtherPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.getResult(),0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.getSettlementCount(),0,1,1,1
net.sf.freecol.common.networking.FirstContactMessage.getTile(Game),0,1,1,1
"net.sf.freecol.common.networking.FirstContactMessage.serverHandler(FreeColServer, ServerPlayer)",5,5,5,5
net.sf.freecol.common.networking.FirstContactMessage.setResult(boolean),0,1,1,1
"net.sf.freecol.common.networking.FountainOfYouthMessage.FountainOfYouthMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.FountainOfYouthMessage.FountainOfYouthMessage(int),0,1,1,1
"net.sf.freecol.common.networking.FountainOfYouthMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.FountainOfYouthMessage.clientHandler(FreeColClient),1,2,2,2
net.sf.freecol.common.networking.FountainOfYouthMessage.getMigrants(),0,1,1,1
net.sf.freecol.common.networking.FountainOfYouthMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.GameEndedMessage.GameEndedMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.GameEndedMessage.GameEndedMessage(Player, boolean)",0,1,1,1
"net.sf.freecol.common.networking.GameEndedMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.GameEndedMessage.clientHandler(FreeColClient),2,3,2,3
net.sf.freecol.common.networking.GameEndedMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.GameEndedMessage.getScore(),0,1,1,1
net.sf.freecol.common.networking.GameEndedMessage.getWinner(Game),0,1,1,1
net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(),0,1,1,1
"net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.GameStateMessage.GameStateMessage(ServerState),1,1,2,2
net.sf.freecol.common.networking.GameStateMessage.clientHandler(FreeColClient),1,1,2,2
net.sf.freecol.common.networking.GameStateMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.GameStateMessage.getState(),0,1,1,1
"net.sf.freecol.common.networking.GameStateMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.HighScoresMessage.HighScoresMessage(Game, FreeColXMLReader)",4,1,3,3
"net.sf.freecol.common.networking.HighScoresMessage.HighScoresMessage(String, List<HighScore>)",0,1,1,1
net.sf.freecol.common.networking.HighScoresMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.HighScoresMessage.getKey(),0,1,1,1
net.sf.freecol.common.networking.HighScoresMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.HighScoresMessage.getScores(),0,1,1,1
"net.sf.freecol.common.networking.HighScoresMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.InciteMessage.InciteMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.InciteMessage.InciteMessage(Unit, IndianSettlement, Player, int)",0,1,1,1
net.sf.freecol.common.networking.InciteMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.getEnemy(Game),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.getGold(),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.getSettlement(Unit),0,1,1,1
net.sf.freecol.common.networking.InciteMessage.getUnit(Player),0,1,1,1
"net.sf.freecol.common.networking.InciteMessage.serverHandler(FreeColServer, ServerPlayer)",6,5,7,7
"net.sf.freecol.common.networking.IndianDemandMessage.IndianDemandMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.IndianDemandMessage.IndianDemandMessage(Unit, Colony, GoodsType, int)",1,1,2,2
"net.sf.freecol.common.networking.IndianDemandMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.IndianDemandMessage.clientHandler(FreeColClient),3,4,3,4
net.sf.freecol.common.networking.IndianDemandMessage.getAmount(),0,1,1,1
net.sf.freecol.common.networking.IndianDemandMessage.getColony(Game),0,1,1,1
net.sf.freecol.common.networking.IndianDemandMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.IndianDemandMessage.getResult(),0,1,1,1
net.sf.freecol.common.networking.IndianDemandMessage.getType(Game),1,1,2,2
net.sf.freecol.common.networking.IndianDemandMessage.getUnit(Game),0,1,1,1
"net.sf.freecol.common.networking.IndianDemandMessage.serverHandler(FreeColServer, ServerPlayer)",12,7,8,8
net.sf.freecol.common.networking.IndianDemandMessage.setResult(IndianDemandAction),0,1,1,1
"net.sf.freecol.common.networking.JoinColonyMessage.JoinColonyMessage(Colony, Unit)",0,1,1,1
"net.sf.freecol.common.networking.JoinColonyMessage.JoinColonyMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.JoinColonyMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.JoinColonyMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.JoinColonyMessage.serverHandler(FreeColServer, ServerPlayer)",2,1,3,3
"net.sf.freecol.common.networking.LearnSkillMessage.LearnSkillMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.LearnSkillMessage.LearnSkillMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.LearnSkillMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.LearnSkillMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.LearnSkillMessage.serverHandler(FreeColServer, ServerPlayer)",4,3,5,5
"net.sf.freecol.common.networking.LoadGoodsMessage.LoadGoodsMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.LoadGoodsMessage.LoadGoodsMessage(Location, GoodsType, int, Unit)",0,1,1,1
net.sf.freecol.common.networking.LoadGoodsMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.LoadGoodsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.LoadGoodsMessage.serverHandler(FreeColServer, ServerPlayer)",7,6,8,8
"net.sf.freecol.common.networking.LoginMessage.LoginMessage(Game, FreeColXMLReader)",5,1,4,4
"net.sf.freecol.common.networking.LoginMessage.LoginMessage(Player, String, String, String, ServerState, boolean, boolean, ...)",1,1,2,2
net.sf.freecol.common.networking.LoginMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getCurrentPlayer(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getGame(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getNationId(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getPlayer(Game),1,2,1,2
net.sf.freecol.common.networking.LoginMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getSinglePlayer(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getState(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getUserName(),0,1,1,1
net.sf.freecol.common.networking.LoginMessage.getVersion(),0,1,1,1
"net.sf.freecol.common.networking.LoginMessage.inGameLogin(FreeColServer, Connection)",7,1,6,6
"net.sf.freecol.common.networking.LoginMessage.loadGameLogin(FreeColServer, Connection)",8,1,7,7
"net.sf.freecol.common.networking.LoginMessage.loginHandler(FreeColServer, Connection)",8,1,6,9
"net.sf.freecol.common.networking.LoginMessage.preGameLogin(FreeColServer, Connection)",6,1,5,5
net.sf.freecol.common.networking.LoginMessage.toXML(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.common.networking.LogoutMessage.LogoutMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.LogoutMessage.LogoutMessage(Player, LogoutReason)",0,1,1,1
"net.sf.freecol.common.networking.LogoutMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.LogoutMessage.clientHandler(FreeColClient),3,2,2,3
net.sf.freecol.common.networking.LogoutMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.LogoutMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.LogoutMessage.getReason(),0,1,1,1
"net.sf.freecol.common.networking.LogoutMessage.serverHandler(FreeColServer, ServerPlayer)",13,3,5,14
"net.sf.freecol.common.networking.LootCargoMessage.LootCargoMessage(Game, FreeColXMLReader)",7,1,4,4
"net.sf.freecol.common.networking.LootCargoMessage.LootCargoMessage(Unit, String, List<Goods>)",0,1,1,1
"net.sf.freecol.common.networking.LootCargoMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.LootCargoMessage.clientHandler(FreeColClient),1,2,1,2
net.sf.freecol.common.networking.LootCargoMessage.getGoods(),0,1,1,1
net.sf.freecol.common.networking.LootCargoMessage.getLoserId(),0,1,1,1
net.sf.freecol.common.networking.LootCargoMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.LootCargoMessage.getWinner(Game),0,1,1,1
"net.sf.freecol.common.networking.LootCargoMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
net.sf.freecol.common.networking.Message.Message(),0,1,1,1
net.sf.freecol.common.networking.Message.MessagePriority.MessagePriority(int),0,1,1,1
net.sf.freecol.common.networking.Message.MessagePriority.getValue(),0,1,1,1
net.sf.freecol.common.networking.Message.canMerge(),0,1,1,1
net.sf.freecol.common.networking.Message.clientGeneric(FreeColClient),12,1,5,6
"net.sf.freecol.common.networking.Message.expected(String, String)",0,1,1,1
net.sf.freecol.common.networking.Message.getArrayAttributes(),3,3,2,3
"net.sf.freecol.common.networking.Message.getBooleanAttribute(String, Boolean)",3,2,2,3
"net.sf.freecol.common.networking.Message.getChild(int, Class<T>)",2,2,2,3
net.sf.freecol.common.networking.Message.getChildren(Class<T>),3,1,2,3
"net.sf.freecol.common.networking.Message.getEnumAttribute(String, Class<T>, T)",3,1,3,3
"net.sf.freecol.common.networking.Message.getIntegerAttribute(String, int)",3,2,2,3
net.sf.freecol.common.networking.Message.getPriorityLevel(),0,1,1,1
net.sf.freecol.common.networking.Message.igc(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.Message.igc(FreeColServer),0,1,1,1
"net.sf.freecol.common.networking.Message.invokeAndWait(FreeColClient, Runnable)",0,1,1,1
"net.sf.freecol.common.networking.Message.invokeLater(FreeColClient, Runnable)",0,1,1,1
net.sf.freecol.common.networking.Message.isEmpty(),1,1,2,2
net.sf.freecol.common.networking.Message.isType(String),0,1,1,1
net.sf.freecol.common.networking.Message.merge(Message),1,2,1,2
net.sf.freecol.common.networking.Message.pgc(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.Message.pgc(FreeColServer),0,1,1,1
"net.sf.freecol.common.networking.Message.pretty(StringBuilder, String, Map<String, String>, List<FreeColObject>)",6,1,5,5
"net.sf.freecol.common.networking.Message.read(Game, FreeColXMLReader)",6,4,4,5
net.sf.freecol.common.networking.Message.setArrayAttributes(List<String>),3,1,3,3
net.sf.freecol.common.networking.Message.setArrayAttributes(String[]),3,1,3,3
"net.sf.freecol.common.networking.Message.setBooleanAttribute(String, Boolean)",1,1,2,2
"net.sf.freecol.common.networking.Message.setEnumAttribute(String, Enum<?>)",1,1,2,2
"net.sf.freecol.common.networking.Message.setIntegerAttribute(String, int)",0,1,1,1
"net.sf.freecol.common.networking.Message.setStringAttributeMap(Map<String, String>)",0,1,1,1
net.sf.freecol.common.networking.Message.setStringAttributes(List<String>),4,1,3,4
net.sf.freecol.common.networking.Message.setStringAttributes(String[]),3,1,3,3
net.sf.freecol.common.networking.Message.toString(),0,1,1,1
net.sf.freecol.common.networking.Message.toXML(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.networking.Message.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.networking.Message.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.networking.MissionaryMessage.MissionaryMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.MissionaryMessage.MissionaryMessage(Unit, Direction, boolean)",0,1,1,1
net.sf.freecol.common.networking.MissionaryMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.MissionaryMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.MissionaryMessage.serverHandler(FreeColServer, ServerPlayer)",14,9,12,12
"net.sf.freecol.common.networking.MonarchActionMessage.MonarchActionMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.MonarchActionMessage.MonarchActionMessage(MonarchAction, StringTemplate, String)",0,1,1,1
"net.sf.freecol.common.networking.MonarchActionMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.getAction(),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.getMonarchKey(),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.getPriority(),2,2,1,5
net.sf.freecol.common.networking.MonarchActionMessage.getResult(),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.getTax(),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.getTemplate(),0,1,1,1
"net.sf.freecol.common.networking.MonarchActionMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.setResult(boolean),0,1,1,1
net.sf.freecol.common.networking.MonarchActionMessage.setTax(int),0,1,1,1
"net.sf.freecol.common.networking.MoveMessage.MoveMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.MoveMessage.MoveMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.MoveMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.MoveMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.MoveMessage.serverHandler(FreeColServer, ServerPlayer)",3,2,4,4
"net.sf.freecol.common.networking.MoveToMessage.MoveToMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.MoveToMessage.MoveToMessage(Unit, Location)",0,1,1,1
net.sf.freecol.common.networking.MoveToMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.MoveToMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.MoveToMessage.serverHandler(FreeColServer, ServerPlayer)",2,2,3,3
net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(),0,1,1,1
"net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(Game, FreeColXMLReader)",3,1,3,3
net.sf.freecol.common.networking.MultipleMessage.MultipleMessage(List<Message>),1,1,2,2
"net.sf.freecol.common.networking.MultipleMessage.aiHandler(FreeColServer, AIPlayer)",4,2,3,4
net.sf.freecol.common.networking.MultipleMessage.clientHandler(FreeColClient),4,2,3,4
net.sf.freecol.common.networking.MultipleMessage.isEmpty(),1,1,2,2
"net.sf.freecol.common.networking.MultipleMessage.serverHandler(FreeColServer, ServerPlayer)",12,3,5,7
net.sf.freecol.common.networking.MultipleMessage.simplify(),7,1,3,6
net.sf.freecol.common.networking.MultipleMessage.toString(),1,1,2,2
net.sf.freecol.common.networking.MultipleMessage.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.networking.NationSummaryMessage.NationSummaryMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.NationSummaryMessage.NationSummaryMessage(Player, NationSummary)",0,1,1,1
"net.sf.freecol.common.networking.NationSummaryMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NationSummaryMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.NationSummaryMessage.getNationSummary(),0,1,1,1
net.sf.freecol.common.networking.NationSummaryMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.NationSummaryMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.NationSummaryMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,3,4
"net.sf.freecol.common.networking.NativeGiftMessage.NativeGiftMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.NativeGiftMessage.NativeGiftMessage(Unit, Colony)",0,1,1,1
"net.sf.freecol.common.networking.NativeGiftMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NativeGiftMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.NativeGiftMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.NativeGiftMessage.serverHandler(FreeColServer, ServerPlayer)",2,1,3,3
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(NativeTradeAction, NativeTrade)",0,1,1,1
"net.sf.freecol.common.networking.NativeTradeMessage.NativeTradeMessage(Unit, IndianSettlement)",0,1,1,1
"net.sf.freecol.common.networking.NativeTradeMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NativeTradeMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.NativeTradeMessage.getAction(),0,1,1,1
net.sf.freecol.common.networking.NativeTradeMessage.getNativeTrade(),0,1,1,1
net.sf.freecol.common.networking.NativeTradeMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.NativeTradeMessage.serverHandler(FreeColServer, ServerPlayer)",5,6,6,6
net.sf.freecol.common.networking.NetworkReplyObject.NetworkReplyObject(int),0,1,1,1
net.sf.freecol.common.networking.NetworkReplyObject.getNetworkReplyId(),0,1,1,1
net.sf.freecol.common.networking.NetworkReplyObject.getResponse(long),5,3,2,4
net.sf.freecol.common.networking.NetworkReplyObject.interrupt(),0,1,1,1
net.sf.freecol.common.networking.NetworkReplyObject.setResponse(Object),1,1,2,2
"net.sf.freecol.common.networking.NewLandNameMessage.NewLandNameMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.NewLandNameMessage.NewLandNameMessage(Unit, String)",0,1,1,1
"net.sf.freecol.common.networking.NewLandNameMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NewLandNameMessage.clientHandler(FreeColClient),2,2,2,3
net.sf.freecol.common.networking.NewLandNameMessage.getNewLandName(),0,1,1,1
net.sf.freecol.common.networking.NewLandNameMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.NewLandNameMessage.getUnit(Player),0,1,1,1
"net.sf.freecol.common.networking.NewLandNameMessage.serverHandler(FreeColServer, ServerPlayer)",5,4,6,6
"net.sf.freecol.common.networking.NewRegionNameMessage.NewRegionNameMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.NewRegionNameMessage.NewRegionNameMessage(Region, Tile, Unit, String)",0,1,1,1
"net.sf.freecol.common.networking.NewRegionNameMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NewRegionNameMessage.clientHandler(FreeColClient),2,2,1,3
net.sf.freecol.common.networking.NewRegionNameMessage.getNewRegionName(),0,1,1,1
net.sf.freecol.common.networking.NewRegionNameMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.NewRegionNameMessage.getRegion(Game),0,1,1,1
net.sf.freecol.common.networking.NewRegionNameMessage.getTile(Game),0,1,1,1
net.sf.freecol.common.networking.NewRegionNameMessage.getUnit(Player),0,1,1,1
"net.sf.freecol.common.networking.NewRegionNameMessage.serverHandler(FreeColServer, ServerPlayer)",4,4,5,5
"net.sf.freecol.common.networking.NewTradeRouteMessage.NewTradeRouteMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.NewTradeRouteMessage.NewTradeRouteMessage(TradeRoute),0,1,1,1
"net.sf.freecol.common.networking.NewTradeRouteMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NewTradeRouteMessage.clientHandler(FreeColClient),1,2,1,2
net.sf.freecol.common.networking.NewTradeRouteMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.NewTradeRouteMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.NewTradeRouteMessage.getTradeRoute(),0,1,1,1
"net.sf.freecol.common.networking.NewTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.NewTurnMessage.NewTurnMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.NewTurnMessage.NewTurnMessage(Turn),0,1,1,1
"net.sf.freecol.common.networking.NewTurnMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.NewTurnMessage.clientHandler(FreeColClient),1,2,2,2
net.sf.freecol.common.networking.NewTurnMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.NewTurnMessage.getTurnNumber(),0,1,1,1
net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String),0,1,1,1
"net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String, FreeColXMLReader, String...)",0,1,1,1
"net.sf.freecol.common.networking.ObjectMessage.ObjectMessage(String, String...)",0,1,1,1
net.sf.freecol.common.networking.ObjectMessage.appendChild(T),1,1,2,2
net.sf.freecol.common.networking.ObjectMessage.appendChildren(Collection<T>),1,1,2,2
net.sf.freecol.common.networking.ObjectMessage.getChildCount(),0,1,1,1
net.sf.freecol.common.networking.ObjectMessage.getChildren(),0,1,1,1
net.sf.freecol.common.networking.ObjectMessage.setChildren(List<? extends FreeColObject>),0,1,1,1
"net.sf.freecol.common.networking.PartialMessage.PartialMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.PartialMessage.PartialMessage(Map<String, String>)",0,1,1,1
"net.sf.freecol.common.networking.PartialMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.PartialMessage.clientHandler(FreeColClient),4,3,4,4
net.sf.freecol.common.networking.PartialMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.PayArrearsMessage.PayArrearsMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.PayArrearsMessage.PayArrearsMessage(GoodsType),0,1,1,1
net.sf.freecol.common.networking.PayArrearsMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.PayArrearsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.PayArrearsMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.PayForBuildingMessage.PayForBuildingMessage(Colony),0,1,1,1
"net.sf.freecol.common.networking.PayForBuildingMessage.PayForBuildingMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.PayForBuildingMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.PayForBuildingMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.PayForBuildingMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
"net.sf.freecol.common.networking.PutOutsideColonyMessage.PutOutsideColonyMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.PutOutsideColonyMessage.PutOutsideColonyMessage(Unit),0,1,1,1
net.sf.freecol.common.networking.PutOutsideColonyMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.PutOutsideColonyMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.PutOutsideColonyMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,4,4
"net.sf.freecol.common.networking.QuestionMessage.QuestionMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.QuestionMessage.QuestionMessage(int, Message)",0,1,1,1
"net.sf.freecol.common.networking.ReadyMessage.ReadyMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ReadyMessage.ReadyMessage(Player, boolean)",1,1,2,2
net.sf.freecol.common.networking.ReadyMessage.clientHandler(FreeColClient),1,2,1,2
net.sf.freecol.common.networking.ReadyMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.ReadyMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.ReadyMessage.getValue(),0,1,1,1
"net.sf.freecol.common.networking.ReadyMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(),0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(Game, String, String, String, String, String)",0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.Arrangement(Unit, Location, GoodsType, Role, int)",0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.getArrangements(Colony, List<Unit>, Colony)",4,3,5,6
"net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.init(Game, String, String, String, String, String)",3,1,3,4
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.locKey(int),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleComparison(Arrangement),1,1,1,2
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleCountKey(int),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.roleKey(int),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.toString(),1,1,2,2
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.unitKey(int),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement.workKey(int),0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.RearrangeColonyMessage(Colony, List<Unit>, Colony)",0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.RearrangeColonyMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.getArrangements(Game),1,1,2,2
net.sf.freecol.common.networking.RearrangeColonyMessage.getAttributeMap(FreeColXMLReader),1,1,2,2
net.sf.freecol.common.networking.RearrangeColonyMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.RearrangeColonyMessage.isEmpty(),0,1,1,1
"net.sf.freecol.common.networking.RearrangeColonyMessage.serverHandler(FreeColServer, ServerPlayer)",11,7,8,8
net.sf.freecol.common.networking.RearrangeColonyMessage.setArrangementAttributes(List<Arrangement>),3,1,3,3
"net.sf.freecol.common.networking.ReceivingThread.QuestionThread.QuestionThread(String, Connection, Message, int)",0,1,1,1
net.sf.freecol.common.networking.ReceivingThread.QuestionThread.run(),3,1,4,4
"net.sf.freecol.common.networking.ReceivingThread.ReceivingThread(Connection, String)",0,1,1,1
"net.sf.freecol.common.networking.ReceivingThread.UpdateThread.UpdateThread(String, Connection, Message)",0,1,1,1
net.sf.freecol.common.networking.ReceivingThread.UpdateThread.run(),3,1,4,4
net.sf.freecol.common.networking.ReceivingThread.askToStop(String),1,1,2,2
net.sf.freecol.common.networking.ReceivingThread.disconnect(),0,1,1,1
net.sf.freecol.common.networking.ReceivingThread.getNextNetworkReplyId(),0,1,1,1
net.sf.freecol.common.networking.ReceivingThread.listen(),14,2,7,11
"net.sf.freecol.common.networking.ReceivingThread.messageQuestion(QuestionMessage, int)",1,1,2,2
net.sf.freecol.common.networking.ReceivingThread.messageUpdate(Message),1,2,1,2
net.sf.freecol.common.networking.ReceivingThread.run(),14,4,5,7
net.sf.freecol.common.networking.ReceivingThread.shouldRun(),0,1,1,1
net.sf.freecol.common.networking.ReceivingThread.stopRun(),1,2,1,2
net.sf.freecol.common.networking.ReceivingThread.stopThread(),2,2,2,3
net.sf.freecol.common.networking.ReceivingThread.waitForNetworkReply(int),0,1,1,1
net.sf.freecol.common.networking.ReconnectMessage.ReconnectMessage(),0,1,1,1
"net.sf.freecol.common.networking.ReconnectMessage.ReconnectMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ReconnectMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.ReconnectMessage.clientHandler(FreeColClient),0,1,1,1
"net.sf.freecol.common.networking.RegisterServerMessage.RegisterServerMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.RegisterServerMessage.RegisterServerMessage(ServerInfo),0,1,1,1
"net.sf.freecol.common.networking.RemoveMessage.RemoveMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.RemoveMessage.RemoveMessage(String, List<? extends FreeColGameObject>)",0,1,1,1
"net.sf.freecol.common.networking.RemoveMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.RemoveMessage.clientHandler(FreeColClient),1,2,1,2
net.sf.freecol.common.networking.RemoveMessage.getAttributeMap(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.networking.RemoveMessage.getDivertObject(Game),0,1,1,1
net.sf.freecol.common.networking.RemoveMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.RemoveMessage.getRemovals(Game),3,1,3,3
"net.sf.freecol.common.networking.RemoveServerMessage.RemoveServerMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.RemoveServerMessage.RemoveServerMessage(ServerInfo),0,1,1,1
"net.sf.freecol.common.networking.RenameMessage.RenameMessage(FreeColGameObject, String)",0,1,1,1
"net.sf.freecol.common.networking.RenameMessage.RenameMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.RenameMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.RenameMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.RenameMessage.serverHandler(FreeColServer, ServerPlayer)",2,2,3,3
"net.sf.freecol.common.networking.ReplyMessage.ReplyMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ReplyMessage.ReplyMessage(int, Message)",0,1,1,1
net.sf.freecol.common.networking.RequestLaunchMessage.RequestLaunchMessage(),0,1,1,1
"net.sf.freecol.common.networking.RequestLaunchMessage.RequestLaunchMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.RequestLaunchMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.RetireMessage.RetireMessage(),0,1,1,1
"net.sf.freecol.common.networking.RetireMessage.RetireMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.RetireMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.ScoutIndianSettlementMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.ScoutIndianSettlementMessage(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.ScoutIndianSettlementMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ScoutIndianSettlementMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.ScoutIndianSettlementMessage.serverHandler(FreeColServer, ServerPlayer)",5,4,6,6
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.ScoutSpeakToChiefMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.ScoutSpeakToChiefMessage(Unit, IndianSettlement, String)",0,1,1,1
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getResult(),1,1,1,2
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getSettlement(Game),0,1,1,1
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.getUnit(Game),0,1,1,1
"net.sf.freecol.common.networking.ScoutSpeakToChiefMessage.serverHandler(FreeColServer, ServerPlayer)",4,3,5,5
net.sf.freecol.common.networking.ServerAPI.ServerAPI(),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.abandonColony(Colony),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.answerMonarch(MonarchAction, boolean)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.ask(Message),4,3,3,4
"net.sf.freecol.common.networking.ServerAPI.askSkill(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.assignTeacher(Unit, Unit)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.assignTradeRoute(Unit, TradeRoute)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.attack(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.attackRanged(Unit, Tile)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.buildColony(String, Unit)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.cashInTreasureTrain(Unit),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.changeState(Unit, UnitState)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.changeWorkImprovementType(Unit, TileImprovementType)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.changeWorkType(Unit, GoodsType)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.chat(Player, String)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.check(String, String)",1,1,2,2
"net.sf.freecol.common.networking.ServerAPI.chooseFoundingFather(List<FoundingFather>, FoundingFather)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.claimTile(Tile, FreeColGameObject, int)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.clearSpeciality(Unit),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.continuePlaying(),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.declareIndependence(String, String)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.declineMounds(Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.deleteTradeRoute(TradeRoute),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.deliverGiftToSettlement(Unit, IndianSettlement, Goods)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.demandTribute(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.diplomacy(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.disbandUnit(Unit),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.disembark(Unit),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.embark(Unit, Unit, Direction)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.emigrate(int),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.endTurn(),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.enterRevengeMode(),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.equipUnitForRole(Unit, Role, int)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.firstContact(Player, Player, Tile, boolean)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.getHighScores(String),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.incite(Unit, IndianSettlement, Player, int)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.isConnected(),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.joinColony(Unit, Colony)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.learnSkill(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.loadGoods(Location, GoodsType, int, Unit)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.login(String, String, String, boolean, boolean)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.logout(Player, LogoutReason)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.loot(Unit, String, List<Goods>)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.missionary(Unit, Direction, boolean)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.move(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.moveTo(Unit, Location)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.nationSummary(Player, Player)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.nativeGift(Unit, Colony)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.nativeTrade(NativeTradeAction, NativeTrade)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.newLandName(Unit, String)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.newNativeTradeSession(Unit, IndianSettlement)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.newRegionName(Region, Tile, Unit, String)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.newTradeRoute(),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.payArrears(GoodsType),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.payForBuilding(Colony),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.putOutsideColony(Unit),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.rearrangeColony(Colony, List<Unit>, Colony)",1,1,2,2
"net.sf.freecol.common.networking.ServerAPI.rename(FreeColGameObject, String)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.requestLaunch(),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.retire(),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.scoutSettlement(Unit, Direction)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.scoutSpeakToChief(Unit, IndianSettlement)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.send(Message),4,3,3,4
"net.sf.freecol.common.networking.ServerAPI.setAvailable(Nation, NationState)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.setBuildQueue(Colony, List<BuildableType>)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.setColor(Nation, Color)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.setCurrentStop(Unit, int)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.setDestination(Unit, Location)",0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.setGoodsLevels(Colony, ExportData)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.setMessageHandler(MessageHandler),1,1,2,2
net.sf.freecol.common.networking.ServerAPI.setNation(Nation),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.setNationType(NationType),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.setReady(boolean),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.spy(Unit, Settlement)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.startSkipping(),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.trainUnitInEurope(UnitType),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.unloadGoods(GoodsType, int, Unit)",0,1,1,1
net.sf.freecol.common.networking.ServerAPI.updateGameOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.updateMapGeneratorOptions(OptionGroup),0,1,1,1
net.sf.freecol.common.networking.ServerAPI.updateTradeRoute(TradeRoute),0,1,1,1
"net.sf.freecol.common.networking.ServerAPI.work(Unit, WorkLocation)",0,1,1,1
"net.sf.freecol.common.networking.ServerInfoMessage.ServerInfoMessage(String, Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.ServerInfoMessage.ServerInfoMessage(String, ServerInfo)",0,1,1,1
net.sf.freecol.common.networking.ServerInfoMessage.getAddress(),0,1,1,1
net.sf.freecol.common.networking.ServerInfoMessage.getPort(),0,1,1,1
net.sf.freecol.common.networking.ServerInfoMessage.getServerInfo(),0,1,1,1
net.sf.freecol.common.networking.ServerInfoMessage.setAddress(String),0,1,1,1
net.sf.freecol.common.networking.ServerListMessage.ServerListMessage(),0,1,1,1
"net.sf.freecol.common.networking.ServerListMessage.ServerListMessage(Game, FreeColXMLReader)",4,1,3,3
net.sf.freecol.common.networking.ServerListMessage.addServer(ServerInfo),0,1,1,1
net.sf.freecol.common.networking.ServerListMessage.addServers(List<ServerInfo>),0,1,1,1
net.sf.freecol.common.networking.ServerListMessage.getServers(),0,1,1,1
net.sf.freecol.common.networking.ServerListMessage.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.common.networking.SetAIMessage.SetAIMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetAIMessage.SetAIMessage(Player, boolean)",0,1,1,1
"net.sf.freecol.common.networking.SetAIMessage.aiHandler(FreeColServer, AIPlayer)",1,2,1,2
net.sf.freecol.common.networking.SetAIMessage.clientHandler(FreeColClient),1,2,1,2
net.sf.freecol.common.networking.SetAIMessage.getAI(),0,1,1,1
net.sf.freecol.common.networking.SetAIMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetAIMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetAvailableMessage.SetAvailableMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetAvailableMessage.SetAvailableMessage(Nation, NationState)",0,1,1,1
net.sf.freecol.common.networking.SetAvailableMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.SetAvailableMessage.getNation(Specification),0,1,1,1
net.sf.freecol.common.networking.SetAvailableMessage.getNationState(),0,1,1,1
net.sf.freecol.common.networking.SetAvailableMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetAvailableMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
"net.sf.freecol.common.networking.SetBuildQueueMessage.SetBuildQueueMessage(Colony, List<BuildableType>)",0,1,1,1
"net.sf.freecol.common.networking.SetBuildQueueMessage.SetBuildQueueMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.SetBuildQueueMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.SetBuildQueueMessage.getAttributeMap(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.networking.SetBuildQueueMessage.getColony(Player),0,1,1,1
net.sf.freecol.common.networking.SetBuildQueueMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.SetBuildQueueMessage.getQueue(Specification),0,1,1,1
"net.sf.freecol.common.networking.SetBuildQueueMessage.serverHandler(FreeColServer, ServerPlayer)",2,1,3,3
"net.sf.freecol.common.networking.SetColorMessage.SetColorMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetColorMessage.SetColorMessage(Nation, Color)",0,1,1,1
net.sf.freecol.common.networking.SetColorMessage.clientHandler(FreeColClient),2,3,3,3
net.sf.freecol.common.networking.SetColorMessage.getColor(),1,1,1,2
net.sf.freecol.common.networking.SetColorMessage.getNation(Specification),0,1,1,1
net.sf.freecol.common.networking.SetColorMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetColorMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,4,4
"net.sf.freecol.common.networking.SetCurrentPlayerMessage.SetCurrentPlayerMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.SetCurrentPlayerMessage.SetCurrentPlayerMessage(Player),0,1,1,1
"net.sf.freecol.common.networking.SetCurrentPlayerMessage.aiHandler(FreeColServer, AIPlayer)",1,2,1,2
net.sf.freecol.common.networking.SetCurrentPlayerMessage.clientHandler(FreeColClient),1,2,2,2
net.sf.freecol.common.networking.SetCurrentPlayerMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetCurrentPlayerMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetCurrentStopMessage.SetCurrentStopMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetCurrentStopMessage.SetCurrentStopMessage(Unit, int)",0,1,1,1
net.sf.freecol.common.networking.SetCurrentStopMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetCurrentStopMessage.serverHandler(FreeColServer, ServerPlayer)",5,3,6,6
"net.sf.freecol.common.networking.SetDeadMessage.SetDeadMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.SetDeadMessage.SetDeadMessage(Player),0,1,1,1
"net.sf.freecol.common.networking.SetDeadMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.SetDeadMessage.clientHandler(FreeColClient),1,2,2,2
net.sf.freecol.common.networking.SetDeadMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetDeadMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetDestinationMessage.SetDestinationMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetDestinationMessage.SetDestinationMessage(Unit, Location)",1,1,2,2
net.sf.freecol.common.networking.SetDestinationMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetDestinationMessage.serverHandler(FreeColServer, ServerPlayer)",2,1,3,3
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.SetGoodsLevelsMessage(Colony, ExportData)",0,1,1,1
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.SetGoodsLevelsMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.SetGoodsLevelsMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.SetGoodsLevelsMessage.getExportData(),0,1,1,1
net.sf.freecol.common.networking.SetGoodsLevelsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.SetGoodsLevelsMessage.serverHandler(FreeColServer, ServerPlayer)",2,2,3,3
"net.sf.freecol.common.networking.SetNationMessage.SetNationMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetNationMessage.SetNationMessage(Player, Nation)",2,1,3,3
net.sf.freecol.common.networking.SetNationMessage.clientHandler(FreeColClient),4,1,3,4
net.sf.freecol.common.networking.SetNationMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetNationMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.SetNationMessage.getValue(Specification),0,1,1,1
"net.sf.freecol.common.networking.SetNationMessage.serverHandler(FreeColServer, ServerPlayer)",7,3,6,7
"net.sf.freecol.common.networking.SetNationTypeMessage.SetNationTypeMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetNationTypeMessage.SetNationTypeMessage(Player, NationType)",1,1,2,2
net.sf.freecol.common.networking.SetNationTypeMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.SetNationTypeMessage.getPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetNationTypeMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.SetNationTypeMessage.getValue(Specification),0,1,1,1
"net.sf.freecol.common.networking.SetNationTypeMessage.serverHandler(FreeColServer, ServerPlayer)",3,3,3,6
"net.sf.freecol.common.networking.SetStanceMessage.SetStanceMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.SetStanceMessage.SetStanceMessage(Stance, Player, Player)",0,1,1,1
"net.sf.freecol.common.networking.SetStanceMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.SetStanceMessage.clientHandler(FreeColClient),2,3,3,3
net.sf.freecol.common.networking.SetStanceMessage.getFirstPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetStanceMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.SetStanceMessage.getSecondPlayer(Game),0,1,1,1
net.sf.freecol.common.networking.SetStanceMessage.getStance(),0,1,1,1
"net.sf.freecol.common.networking.SpySettlementMessage.SpySettlementMessage(Game, FreeColXMLReader)",8,1,4,4
"net.sf.freecol.common.networking.SpySettlementMessage.SpySettlementMessage(Unit, Settlement)",0,1,1,1
net.sf.freecol.common.networking.SpySettlementMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.SpySettlementMessage.getColony(Game),0,1,1,1
net.sf.freecol.common.networking.SpySettlementMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.SpySettlementMessage.getSpyTile(),0,1,1,1
net.sf.freecol.common.networking.SpySettlementMessage.getUnit(Player),0,1,1,1
"net.sf.freecol.common.networking.SpySettlementMessage.serverHandler(FreeColServer, ServerPlayer)",5,5,6,6
net.sf.freecol.common.networking.SpySettlementMessage.writeChildren(FreeColXMLWriter),3,1,3,3
net.sf.freecol.common.networking.StartGameMessage.StartGameMessage(),0,1,1,1
"net.sf.freecol.common.networking.StartGameMessage.StartGameMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.StartGameMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.StartGameMessage.clientHandler(FreeColClient),0,1,1,1
"net.sf.freecol.common.networking.TrainUnitInEuropeMessage.TrainUnitInEuropeMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.TrainUnitInEuropeMessage(UnitType),0,1,1,1
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.TrainUnitInEuropeMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.TrainUnitInEuropeMessage.serverHandler(FreeColServer, ServerPlayer)",1,2,2,2
net.sf.freecol.common.networking.TrivialMessage.TrivialMessage(String),0,1,1,1
"net.sf.freecol.common.networking.TrivialMessage.TrivialMessage(String, Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.TrivialMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.appendChild(T),2,2,2,2
net.sf.freecol.common.networking.TrivialMessage.appendChildren(Collection<T>),2,2,2,2
net.sf.freecol.common.networking.TrivialMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getChildCount(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getChildren(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getStringAttribute(String),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getStringAttributeMap(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.getType(),0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.hasAttribute(String),0,1,1,1
"net.sf.freecol.common.networking.TrivialMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.TrivialMessage.setChildren(List<? extends FreeColObject>),3,2,3,3
"net.sf.freecol.common.networking.TrivialMessage.setStringAttribute(String, String)",3,2,2,3
net.sf.freecol.common.networking.TrivialMessage.setType(String),0,1,1,1
"net.sf.freecol.common.networking.UnloadGoodsMessage.UnloadGoodsMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.UnloadGoodsMessage.UnloadGoodsMessage(GoodsType, int, Unit)",0,1,1,1
net.sf.freecol.common.networking.UnloadGoodsMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.UnloadGoodsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.UnloadGoodsMessage.serverHandler(FreeColServer, ServerPlayer)",5,5,6,6
"net.sf.freecol.common.networking.UpdateGameOptionsMessage.UpdateGameOptionsMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.UpdateGameOptionsMessage.UpdateGameOptionsMessage(OptionGroup),0,1,1,1
net.sf.freecol.common.networking.UpdateGameOptionsMessage.clientHandler(FreeColClient),2,1,2,2
net.sf.freecol.common.networking.UpdateGameOptionsMessage.getGameOptions(),0,1,1,1
net.sf.freecol.common.networking.UpdateGameOptionsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.UpdateGameOptionsMessage.serverHandler(FreeColServer, ServerPlayer)",4,5,5,5
"net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.UpdateMapGeneratorOptionsMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.UpdateMapGeneratorOptionsMessage(OptionGroup),0,1,1,1
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.clientHandler(FreeColClient),2,1,2,2
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.getMapGeneratorOptions(),0,1,1,1
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage.serverHandler(FreeColServer, ServerPlayer)",4,5,5,5
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Game, FreeColXMLReader)",1,1,2,2
net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player),0,1,1,1
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player, FreeColGameObject)",0,1,1,1
"net.sf.freecol.common.networking.UpdateMessage.UpdateMessage(Player, List<FreeColGameObject>)",0,1,1,1
"net.sf.freecol.common.networking.UpdateMessage.aiHandler(FreeColServer, AIPlayer)",0,1,1,1
net.sf.freecol.common.networking.UpdateMessage.clientHandler(FreeColClient),2,1,2,2
net.sf.freecol.common.networking.UpdateMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.UpdateMessage.merge(Message),1,2,2,2
net.sf.freecol.common.networking.UpdateMessage.toXML(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.common.networking.UpdateServerMessage.UpdateServerMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.UpdateServerMessage.UpdateServerMessage(ServerInfo),0,1,1,1
"net.sf.freecol.common.networking.UpdateTradeRouteMessage.UpdateTradeRouteMessage(Game, FreeColXMLReader)",8,1,4,4
net.sf.freecol.common.networking.UpdateTradeRouteMessage.UpdateTradeRouteMessage(TradeRoute),0,1,1,1
net.sf.freecol.common.networking.UpdateTradeRouteMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.UpdateTradeRouteMessage.getTradeRoute(),0,1,1,1
"net.sf.freecol.common.networking.UpdateTradeRouteMessage.serverHandler(FreeColServer, ServerPlayer)",1,2,2,2
net.sf.freecol.common.networking.VacantPlayersMessage.VacantPlayersMessage(),0,1,1,1
"net.sf.freecol.common.networking.VacantPlayersMessage.VacantPlayersMessage(Game, FreeColXMLReader)",0,1,1,1
net.sf.freecol.common.networking.VacantPlayersMessage.clientHandler(FreeColClient),0,1,1,1
net.sf.freecol.common.networking.VacantPlayersMessage.getPriority(),0,1,1,1
net.sf.freecol.common.networking.VacantPlayersMessage.getVacantPlayers(),0,1,1,1
"net.sf.freecol.common.networking.VacantPlayersMessage.serverHandler(FreeColServer, ServerPlayer)",0,1,1,1
net.sf.freecol.common.networking.VacantPlayersMessage.setVacantPlayers(Game),3,2,3,4
"net.sf.freecol.common.networking.WorkMessage.WorkMessage(Game, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.common.networking.WorkMessage.WorkMessage(Unit, WorkLocation)",0,1,1,1
net.sf.freecol.common.networking.WorkMessage.currentPlayerMessage(),0,1,1,1
net.sf.freecol.common.networking.WorkMessage.getPriority(),0,1,1,1
"net.sf.freecol.common.networking.WorkMessage.serverHandler(FreeColServer, ServerPlayer)",6,6,7,7
"net.sf.freecol.common.networking.WrapperMessage.WrapperMessage(String, Game, FreeColXMLReader)",4,1,3,3
"net.sf.freecol.common.networking.WrapperMessage.WrapperMessage(String, int, Message)",0,1,1,1
net.sf.freecol.common.networking.WrapperMessage.clientHandler(FreeColClient),1,1,2,2
net.sf.freecol.common.networking.WrapperMessage.getMessage(),0,1,1,1
net.sf.freecol.common.networking.WrapperMessage.getSubType(),1,1,2,2
net.sf.freecol.common.networking.WrapperMessage.isEmpty(),1,1,2,2
"net.sf.freecol.common.networking.WrapperMessage.serverHandler(FreeColServer, ServerPlayer)",1,1,2,2
net.sf.freecol.common.networking.WrapperMessage.toString(),1,1,2,2
net.sf.freecol.common.networking.WrapperMessage.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.AbstractOption.AbstractOption(Specification),0,1,1,1
net.sf.freecol.common.option.AbstractOption.AbstractOption(String),0,1,1,1
"net.sf.freecol.common.option.AbstractOption.AbstractOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.AbstractOption.generateChoices(),0,1,1,1
net.sf.freecol.common.option.AbstractOption.getEnabledBy(),0,1,1,1
net.sf.freecol.common.option.AbstractOption.getGroup(),0,1,1,1
net.sf.freecol.common.option.AbstractOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.AbstractOption.readAttributes(FreeColXMLReader),5,3,3,4
net.sf.freecol.common.option.AbstractOption.readOption(FreeColXMLReader),19,1,19,19
net.sf.freecol.common.option.AbstractOption.setGroup(String),1,1,1,2
"net.sf.freecol.common.option.AbstractOption.setValue(String, String)",0,1,1,1
net.sf.freecol.common.option.AbstractOption.setValues(AbstractOption<T>),0,1,1,1
net.sf.freecol.common.option.AbstractOption.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.AbstractUnitOption.AbstractUnitOption(Specification),0,1,1,1
"net.sf.freecol.common.option.AbstractUnitOption.AbstractUnitOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.cloneOption(),4,1,5,5
net.sf.freecol.common.option.AbstractUnitOption.generateChoices(),2,1,3,3
net.sf.freecol.common.option.AbstractUnitOption.getNationType(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.getNumber(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.getRole(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.getUnitType(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.getValue(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.AbstractUnitOption.readChild(FreeColXMLReader),3,1,2,5
net.sf.freecol.common.option.AbstractUnitOption.readChildren(FreeColXMLReader),2,1,2,4
net.sf.freecol.common.option.AbstractUnitOption.requireNumberOption(),1,1,2,2
net.sf.freecol.common.option.AbstractUnitOption.requireRoleOption(),1,1,2,2
net.sf.freecol.common.option.AbstractUnitOption.requireUnitTypeOption(),1,1,2,2
net.sf.freecol.common.option.AbstractUnitOption.setValue(AbstractUnit),6,1,6,6
net.sf.freecol.common.option.AbstractUnitOption.toString(),3,1,4,4
net.sf.freecol.common.option.AbstractUnitOption.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.AbstractUnitOption.writeChildren(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.AllTests.suite(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.AudioMixerOption(Specification),0,1,1,1
"net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.MixerWrapper(String, Info)",0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.compareTo(MixerWrapper),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.equals(Object),2,3,2,3
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.getKey(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.getMixerInfo(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.hashCode(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper.toString(),1,1,2,2
net.sf.freecol.common.option.AudioMixerOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.getChoices(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.getMixerWrapperByName(String),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.getValue(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.setValue(MixerWrapper),2,1,2,3
"net.sf.freecol.common.option.AudioMixerOption.setValue(String, String)",5,1,3,6
net.sf.freecol.common.option.AudioMixerOption.toString(),0,1,1,1
net.sf.freecol.common.option.AudioMixerOption.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.BooleanOption.BooleanOption(Specification),0,1,1,1
"net.sf.freecol.common.option.BooleanOption.BooleanOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.BooleanOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.BooleanOption.getValue(),0,1,1,1
net.sf.freecol.common.option.BooleanOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.BooleanOption.setValue(Boolean),2,1,2,3
"net.sf.freecol.common.option.BooleanOption.setValue(String, String)",1,1,1,2
net.sf.freecol.common.option.BooleanOption.toString(),0,1,1,1
net.sf.freecol.common.option.BooleanOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.FileOption.FileOption(Specification),0,1,1,1
net.sf.freecol.common.option.FileOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.FileOption.getType(),0,1,1,1
net.sf.freecol.common.option.FileOption.getValue(),0,1,1,1
net.sf.freecol.common.option.FileOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.FileOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.FileOption.readAttributes(FreeColXMLReader),4,1,3,4
net.sf.freecol.common.option.FileOption.setType(String),0,1,1,1
net.sf.freecol.common.option.FileOption.setValue(File),1,1,2,2
"net.sf.freecol.common.option.FileOption.setValue(String, String)",3,1,1,3
net.sf.freecol.common.option.FileOption.toString(),2,1,2,3
net.sf.freecol.common.option.FileOption.writeAttributes(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.option.GameOptions.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.IntegerOption(Specification),0,1,1,1
"net.sf.freecol.common.option.IntegerOption.IntegerOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.IntegerOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.getMaximumValue(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.getMinimumValue(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.getStepSize(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.getValue(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.isPreviewEnabled(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.limitValue(int),0,1,1,1
net.sf.freecol.common.option.IntegerOption.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.IntegerOption.resetValue(),0,1,1,1
net.sf.freecol.common.option.IntegerOption.setMaximumValue(int),0,1,1,1
net.sf.freecol.common.option.IntegerOption.setMinimumValue(int),0,1,1,1
net.sf.freecol.common.option.IntegerOption.setPreviewEnabled(boolean),0,1,1,1
net.sf.freecol.common.option.IntegerOption.setValue(Integer),2,1,2,3
"net.sf.freecol.common.option.IntegerOption.setValue(String, String)",2,1,2,3
net.sf.freecol.common.option.IntegerOption.toString(),2,1,3,3
net.sf.freecol.common.option.IntegerOption.writeAttributes(FreeColXMLWriter),4,1,5,5
"net.sf.freecol.common.option.LanguageOption.Language.Language(String, Locale)",0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.compareTo(Language),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.equals(Object),3,3,3,4
net.sf.freecol.common.option.LanguageOption.Language.getKey(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.getLocale(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.hashCode(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.setKey(String),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.setLocale(Locale),0,1,1,1
net.sf.freecol.common.option.LanguageOption.Language.toString(),3,2,4,4
net.sf.freecol.common.option.LanguageOption.LanguageOption(Specification),0,1,1,1
net.sf.freecol.common.option.LanguageOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.getChoices(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.getLanguage(String),0,1,1,1
net.sf.freecol.common.option.LanguageOption.getValue(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.LanguageOption.initializeLanguages(),6,4,3,5
net.sf.freecol.common.option.LanguageOption.setValue(Language),1,1,2,2
"net.sf.freecol.common.option.LanguageOption.setValue(String, String)",5,1,4,6
net.sf.freecol.common.option.LanguageOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.ListOption.ListOption(Specification),0,1,1,1
"net.sf.freecol.common.option.ListOption.ListOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.ListOption.addMember(AbstractOption<T>),1,1,2,2
net.sf.freecol.common.option.ListOption.canAdd(AbstractOption<T>),1,1,2,2
net.sf.freecol.common.option.ListOption.getAllowDuplicates(),0,1,1,1
net.sf.freecol.common.option.ListOption.getMaximumNumber(),0,1,1,1
net.sf.freecol.common.option.ListOption.getOptionValues(),0,1,1,1
net.sf.freecol.common.option.ListOption.getTemplate(),0,1,1,1
net.sf.freecol.common.option.ListOption.getValue(),0,1,1,1
net.sf.freecol.common.option.ListOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.ListOption.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.ListOption.readChild(FreeColXMLReader),5,1,3,4
net.sf.freecol.common.option.ListOption.readChildOption(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.ListOption.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.ListOption.setAllowDuplicates(boolean),0,1,1,1
net.sf.freecol.common.option.ListOption.setListValues(ListOption<T>),0,1,1,1
net.sf.freecol.common.option.ListOption.setMaximumNumber(int),0,1,1,1
net.sf.freecol.common.option.ListOption.setTemplate(AbstractOption<T>),0,1,1,1
net.sf.freecol.common.option.ListOption.setValue(List<AbstractOption<T>>),4,2,4,5
net.sf.freecol.common.option.ListOption.toString(),4,1,4,4
net.sf.freecol.common.option.ListOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.ListOption.writeChildren(FreeColXMLWriter),2,1,3,3
net.sf.freecol.common.option.MapGeneratorOptions.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.ModListOption.ModListOption(Specification),0,1,1,1
"net.sf.freecol.common.option.ModListOption.ModListOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.ModListOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.ModListOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.ModOption.ModOption(Specification),0,1,1,1
net.sf.freecol.common.option.ModOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.ModOption.equals(Object),2,3,2,3
net.sf.freecol.common.option.ModOption.getChoices(),0,1,1,1
net.sf.freecol.common.option.ModOption.getValue(),0,1,1,1
net.sf.freecol.common.option.ModOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.ModOption.hashCode(),0,1,1,1
net.sf.freecol.common.option.ModOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.ModOption.setValue(FreeColModFile),2,1,2,3
"net.sf.freecol.common.option.ModOption.setValue(String, String)",2,2,1,3
net.sf.freecol.common.option.ModOption.toString(),0,1,1,1
net.sf.freecol.common.option.ModOption.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.OptionContainer.getBoolean(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getFile(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getInteger(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getIntegerMinimum(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getModList(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getOptionGroup(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getPercentage(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getPercentageMultiplier(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getRange(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getSelection(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getSelectionName(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getString(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getText(String),0,1,1,1
net.sf.freecol.common.option.OptionContainer.getUnitList(String),0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setBoolean(String, boolean)",0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setFile(String, File)",0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setInteger(String, int)",0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setIntegerMinimum(String, Integer)",0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setString(String, String)",0,1,1,1
"net.sf.freecol.common.option.OptionContainer.setText(String, String)",0,1,1,1
"net.sf.freecol.common.option.OptionGroup.OptionGroup(FreeColXMLReader, Specification)",0,1,1,1
net.sf.freecol.common.option.OptionGroup.OptionGroup(Specification),0,1,1,1
net.sf.freecol.common.option.OptionGroup.OptionGroup(String),0,1,1,1
"net.sf.freecol.common.option.OptionGroup.OptionGroup(String, Specification)",0,1,1,1
net.sf.freecol.common.option.OptionGroup.add(Option),9,4,6,6
net.sf.freecol.common.option.OptionGroup.addOptionGroup(OptionGroup),4,1,3,3
net.sf.freecol.common.option.OptionGroup.cloneOption(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.generateChoices(),4,1,4,4
net.sf.freecol.common.option.OptionGroup.getName(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.getOption(String),0,1,1,1
"net.sf.freecol.common.option.OptionGroup.getOption(String, Class<T>)",5,3,4,4
net.sf.freecol.common.option.OptionGroup.getOptions(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.getShortDescription(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.getValue(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.getXMLTagName(),0,1,1,1
"net.sf.freecol.common.option.OptionGroup.hasOption(String, Class<T>)",2,2,2,3
net.sf.freecol.common.option.OptionGroup.hasOptionGroup(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.isEditable(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.isVisible(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.load(File),3,2,2,4
net.sf.freecol.common.option.OptionGroup.load(FreeColXMLReader),1,2,1,2
"net.sf.freecol.common.option.OptionGroup.loadOptionGroup(File, String, Specification)",7,1,3,4
"net.sf.freecol.common.option.OptionGroup.merge(Option, LogBuilder)",26,10,14,15
net.sf.freecol.common.option.OptionGroup.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.OptionGroup.readChild(FreeColXMLReader),4,1,3,3
net.sf.freecol.common.option.OptionGroup.readChildren(FreeColXMLReader),3,1,3,3
net.sf.freecol.common.option.OptionGroup.remove(String),1,1,2,2
net.sf.freecol.common.option.OptionGroup.removeAll(),0,1,1,1
net.sf.freecol.common.option.OptionGroup.save(File),2,1,2,3
net.sf.freecol.common.option.OptionGroup.setEditable(boolean),0,1,1,1
net.sf.freecol.common.option.OptionGroup.setValue(OptionGroup),6,1,4,4
"net.sf.freecol.common.option.OptionGroup.setValue(String, String)",0,1,1,1
net.sf.freecol.common.option.OptionGroup.toString(),1,1,2,2
net.sf.freecol.common.option.OptionGroup.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.OptionGroup.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.OptionTest.testCloneIntegerOption(),0,1,1,1
net.sf.freecol.common.option.OptionTest.testGameOptions(),0,1,1,1
net.sf.freecol.common.option.OptionTest.testInheritsEditable(),4,1,4,4
net.sf.freecol.common.option.OptionTest.testUnitListOption(),1,1,2,2
net.sf.freecol.common.option.PercentageOption.PercentageOption(Specification),0,1,1,1
"net.sf.freecol.common.option.PercentageOption.PercentageOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.PercentageOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.PercentageOption.toString(),0,1,1,1
net.sf.freecol.common.option.RangeOption.RangeOption(Specification),0,1,1,1
"net.sf.freecol.common.option.RangeOption.RangeOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.RangeOption.getValueRank(),3,3,2,3
net.sf.freecol.common.option.RangeOption.getXMLItemElementTagName(),0,1,1,1
net.sf.freecol.common.option.RangeOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.RangeOption.setValueRank(int),3,3,2,3
net.sf.freecol.common.option.SelectOption.SelectOption(Specification),0,1,1,1
"net.sf.freecol.common.option.SelectOption.SelectOption(String, Specification)",0,1,1,1
"net.sf.freecol.common.option.SelectOption.addItemValue(Integer, String)",0,1,1,1
net.sf.freecol.common.option.SelectOption.clearItemValues(),0,1,1,1
net.sf.freecol.common.option.SelectOption.getItemValues(),0,1,1,1
net.sf.freecol.common.option.SelectOption.getName(),0,1,1,1
net.sf.freecol.common.option.SelectOption.getXMLItemElementTagName(),0,1,1,1
net.sf.freecol.common.option.SelectOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.SelectOption.localizeLabels(),0,1,1,1
net.sf.freecol.common.option.SelectOption.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.SelectOption.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.option.SelectOption.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.SelectOption.setValue(Integer),6,4,3,5
net.sf.freecol.common.option.SelectOption.toString(),0,1,1,1
net.sf.freecol.common.option.SelectOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.SelectOption.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.StringOption.StringOption(Specification),0,1,1,1
"net.sf.freecol.common.option.StringOption.StringOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.StringOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.StringOption.getChoices(),0,1,1,1
net.sf.freecol.common.option.StringOption.getValue(),0,1,1,1
net.sf.freecol.common.option.StringOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.StringOption.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.option.StringOption.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.StringOption.setChoices(List<String>),0,1,1,1
net.sf.freecol.common.option.StringOption.setValue(String),2,1,3,3
"net.sf.freecol.common.option.StringOption.setValue(String, String)",1,1,1,2
net.sf.freecol.common.option.StringOption.toString(),3,1,3,3
net.sf.freecol.common.option.StringOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.StringOption.writeChildren(FreeColXMLWriter),1,1,2,2
net.sf.freecol.common.option.TextOption.TextOption(Specification),0,1,1,1
"net.sf.freecol.common.option.TextOption.TextOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.TextOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.TextOption.getValue(),0,1,1,1
net.sf.freecol.common.option.TextOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.TextOption.setValue(String),2,1,3,3
"net.sf.freecol.common.option.TextOption.setValue(String, String)",1,1,1,2
net.sf.freecol.common.option.TextOption.toString(),0,1,1,1
net.sf.freecol.common.option.TextOption.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.common.option.UnitListOption.UnitListOption(Specification),0,1,1,1
"net.sf.freecol.common.option.UnitListOption.UnitListOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.UnitListOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.UnitListOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.UnitTypeOption(Specification),0,1,1,1
"net.sf.freecol.common.option.UnitTypeOption.UnitTypeOption(String, Specification)",0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.addNone(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.cloneOption(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.generateChoices(),9,1,5,9
net.sf.freecol.common.option.UnitTypeOption.getChoices(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.getSelector(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.getValue(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.getXMLTagName(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.isNullValueOK(),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.common.option.UnitTypeOption.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.common.option.UnitTypeOption.readChildren(FreeColXMLReader),0,1,1,1
"net.sf.freecol.common.option.UnitTypeOption.setValue(String, String)",3,1,3,3
net.sf.freecol.common.option.UnitTypeOption.setValue(UnitType),2,1,2,3
net.sf.freecol.common.option.UnitTypeOption.toString(),1,1,2,2
net.sf.freecol.common.option.UnitTypeOption.writeAttributes(FreeColXMLWriter),3,1,4,4
net.sf.freecol.common.option.UnitTypeOption.writeChildren(FreeColXMLWriter),4,1,4,4
"net.sf.freecol.common.resources.AudioResource.AudioResource(String, URI)",5,1,4,4
net.sf.freecol.common.resources.AudioResource.getAllAudio(),0,1,1,1
net.sf.freecol.common.resources.AudioResource.getAudio(),1,2,1,2
net.sf.freecol.common.resources.AudioResource.preload(),0,1,1,1
"net.sf.freecol.common.resources.ColorResource.ColorResource(String, Color)",0,1,1,1
"net.sf.freecol.common.resources.ColorResource.ColorResource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.ColorResource.createColor(String),6,2,4,4
net.sf.freecol.common.resources.ColorResource.getColor(),0,1,1,1
net.sf.freecol.common.resources.ColorResource.isHexString(String),6,4,5,7
net.sf.freecol.common.resources.ColorResource.preload(),0,1,1,1
net.sf.freecol.common.resources.FAFile.CREatingInputStream.CREatingInputStream(InputStream),0,1,1,1
net.sf.freecol.common.resources.FAFile.CREatingInputStream.read(),1,1,2,2
net.sf.freecol.common.resources.FAFile.FAFile(InputStream),0,1,1,1
net.sf.freecol.common.resources.FAFile.getDimension(String),8,2,2,7
net.sf.freecol.common.resources.FAFile.getFAName(String),0,1,1,1
net.sf.freecol.common.resources.FAFile.getLetter(char),0,1,1,1
net.sf.freecol.common.resources.FAFile.getPoints(String),4,2,3,4
net.sf.freecol.common.resources.FAFile.load(InputStream),28,10,9,18
"net.sf.freecol.common.resources.FAFileResource.FAFileResource(String, FAFile)",0,1,1,1
"net.sf.freecol.common.resources.FAFileResource.FAFileResource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.FAFileResource.getFAFile(),0,1,1,1
net.sf.freecol.common.resources.FAFileResource.preload(),0,1,1,1
"net.sf.freecol.common.resources.FontResource.FontResource(String, Font)",0,1,1,1
"net.sf.freecol.common.resources.FontResource.FontResource(String, URI)",4,1,4,4
net.sf.freecol.common.resources.FontResource.getEmergencyFont(),0,1,1,1
net.sf.freecol.common.resources.FontResource.getFont(),1,1,2,2
net.sf.freecol.common.resources.FontResource.preload(),0,1,1,1
net.sf.freecol.common.resources.ImageCache.ImageCache(),0,1,1,1
net.sf.freecol.common.resources.ImageCache.clear(),0,1,1,1
net.sf.freecol.common.resources.ImageCache.clearLowPriorityCache(),0,1,1,1
net.sf.freecol.common.resources.ImageCache.debugPrintCacheSizes(),1,1,2,2
"net.sf.freecol.common.resources.ImageCache.getCachedImage(ImageResource, Dimension, boolean, int)",1,2,1,2
"net.sf.freecol.common.resources.ImageCache.getCachedImageOrGenerate(String, Dimension, boolean, int, Callable<BufferedImage>)",2,2,2,3
net.sf.freecol.common.resources.ImageCache.getImageResource(String),3,1,3,3
"net.sf.freecol.common.resources.ImageCache.getScaledImage(String, float, boolean)",1,2,1,2
"net.sf.freecol.common.resources.ImageCache.getSizedImage(String, Dimension, boolean)",0,1,1,1
"net.sf.freecol.common.resources.ImageCache.getSizedImage(String, Dimension, boolean, int)",0,1,1,1
"net.sf.freecol.common.resources.ImageCache.imageHash(String, Dimension, boolean, int)",4,4,1,5
"net.sf.freecol.common.resources.ImageCache.placeImageInCache(long, BufferedImage)",1,1,2,2
"net.sf.freecol.common.resources.ImageCache.placeImageInLowPriorityCache(long, BufferedImage)",1,1,2,2
net.sf.freecol.common.resources.ImageCache.searchCaches(long),2,3,1,3
"net.sf.freecol.common.resources.ImageResource.ImageResource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.ImageResource.addAlternativeResourceLocator(URI),1,1,1,2
net.sf.freecol.common.resources.ImageResource.addAlternativeResourceLocators(List<URI>),1,1,1,2
net.sf.freecol.common.resources.ImageResource.addVariation(ImageResource),0,1,1,1
net.sf.freecol.common.resources.ImageResource.canUseBitmask(URI),2,1,3,3
net.sf.freecol.common.resources.ImageResource.clean(),2,1,3,3
net.sf.freecol.common.resources.ImageResource.findLoadedImage(Predicate<BufferedImage>),1,1,2,2
net.sf.freecol.common.resources.ImageResource.forceLowestQuality(boolean),0,1,1,1
net.sf.freecol.common.resources.ImageResource.getColorImage(Dimension),10,5,4,10
net.sf.freecol.common.resources.ImageResource.getGrayscaleImage(Dimension),0,1,1,1
net.sf.freecol.common.resources.ImageResource.getImage(),1,1,2,2
"net.sf.freecol.common.resources.ImageResource.getImage(Dimension, boolean)",1,1,2,2
"net.sf.freecol.common.resources.ImageResource.getImage(int, Dimension, boolean)",1,1,2,2
net.sf.freecol.common.resources.ImageResource.getNumberOfVariations(),0,1,1,1
net.sf.freecol.common.resources.ImageResource.getVariation(int),2,3,1,3
net.sf.freecol.common.resources.ImageResource.getVariationNumberForSeed(int),0,1,1,1
net.sf.freecol.common.resources.ImageResource.getVariationNumberForTick(long),0,1,1,1
net.sf.freecol.common.resources.ImageResource.haveAlternatives(),0,1,1,1
net.sf.freecol.common.resources.ImageResource.isForceLowestQuality(),0,1,1,1
net.sf.freecol.common.resources.ImageResource.loadImage(URI),4,3,4,4
net.sf.freecol.common.resources.ImageResource.preload(),19,1,9,9
net.sf.freecol.common.resources.PropertyList.PropertyList(String),1,1,2,2
net.sf.freecol.common.resources.PropertyList.getInt(String),1,2,1,2
"net.sf.freecol.common.resources.PropertyList.getInt(String, int)",1,2,2,2
net.sf.freecol.common.resources.PropertyList.getString(String),0,1,1,1
net.sf.freecol.common.resources.Resource.Resource(String),0,1,1,1
"net.sf.freecol.common.resources.Resource.Resource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.Resource.getCachingKey(),0,1,1,1
net.sf.freecol.common.resources.Resource.getResourceLocator(),0,1,1,1
"net.sf.freecol.common.resources.ResourceFactory.createResource(String, String, URI)",22,5,14,17
net.sf.freecol.common.resources.ResourceManager.finishPreloading(),0,1,1,1
net.sf.freecol.common.resources.ResourceManager.getAudio(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getAudioResource(String, boolean)",2,1,2,3
"net.sf.freecol.common.resources.ResourceManager.getColor(String, Color)",3,1,2,3
"net.sf.freecol.common.resources.ResourceManager.getColorResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getFAFile(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getFAFileResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getFont(String),1,2,2,2
"net.sf.freecol.common.resources.ResourceManager.getFontResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getImage(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getImage(String, Dimension, boolean)",1,1,2,2
net.sf.freecol.common.resources.ResourceManager.getImageKeys(String),0,1,1,1
"net.sf.freecol.common.resources.ResourceManager.getImageResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getPropertyList(String),1,2,1,2
net.sf.freecol.common.resources.ResourceManager.getSZA(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getSZA(String, float)",1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getSZAResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getString(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getString(String, String)",1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getStringResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.getVideo(String),1,1,2,2
"net.sf.freecol.common.resources.ResourceManager.getVideoResource(String, boolean)",2,1,2,3
net.sf.freecol.common.resources.ResourceManager.prepare(),1,1,2,2
net.sf.freecol.common.resources.ResourceManager.reload(),2,1,3,3
net.sf.freecol.common.resources.ResourceManager.setBaseData(FreeColDataFile),0,1,1,1
net.sf.freecol.common.resources.ResourceManager.setMods(List<T>),0,1,1,1
net.sf.freecol.common.resources.ResourceManager.setSavegameFile(FreeColSavegameFile),1,1,2,2
net.sf.freecol.common.resources.ResourceManager.setTcData(FreeColDataFile),1,1,2,2
net.sf.freecol.common.resources.ResourceManager.startPreloading(Runnable),2,3,1,3
net.sf.freecol.common.resources.ResourceManager.summarizeImageResources(StringBuilder),0,1,1,1
net.sf.freecol.common.resources.ResourceManager.waitForPreloadingToStop(),2,1,3,3
net.sf.freecol.common.resources.ResourceMapping.ResourceMapping(),0,1,1,1
"net.sf.freecol.common.resources.ResourceMapping.ResourceType.ResourceType(Class<T>, String, Map<String, T>)",0,1,1,1
"net.sf.freecol.common.resources.ResourceMapping.ResourceType.put(String, Object)",2,2,3,3
"net.sf.freecol.common.resources.ResourceMapping.add(String, Resource)",0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.addAll(ResourceMapping),1,2,1,2
net.sf.freecol.common.resources.ResourceMapping.clearCaches(),0,1,1,1
"net.sf.freecol.common.resources.ResourceMapping.duplicateResource(String, String)",8,9,9,9
net.sf.freecol.common.resources.ResourceMapping.getAudioResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getColorResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getFAFileResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getFontResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getImageKeySet(),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getImageResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getSZAResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getStringResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.getVideoResource(String),0,1,1,1
net.sf.freecol.common.resources.ResourceMapping.mapFrom(ResourceType<?>...),1,1,2,2
net.sf.freecol.common.resources.ResourceMapping.preload(PreloadController),24,17,9,17
"net.sf.freecol.common.resources.SZAResource.SZAResource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.SZAResource.getSimpleZippedAnimation(),0,1,1,1
net.sf.freecol.common.resources.SZAResource.getSimpleZippedAnimation(float),1,2,1,2
net.sf.freecol.common.resources.SZAResource.preload(),2,2,2,3
"net.sf.freecol.common.resources.StringResource.StringResource(String, URI)",2,1,3,3
net.sf.freecol.common.resources.StringResource.getString(),0,1,1,1
net.sf.freecol.common.resources.StringResource.preload(),0,1,1,1
net.sf.freecol.common.resources.Video.Video(URL),0,1,1,1
net.sf.freecol.common.resources.Video.getURL(),0,1,1,1
"net.sf.freecol.common.resources.VideoResource.VideoResource(String, URI)",0,1,1,1
net.sf.freecol.common.resources.VideoResource.getVideo(),0,1,1,1
net.sf.freecol.common.resources.VideoResource.preload(),0,1,1,1
net.sf.freecol.common.sound.AllTests.suite(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.OggStream(InputStream),1,2,1,2
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.available(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.close(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.decodePacket(int),8,1,1,6
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getBody(InputStream),20,5,5,9
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getFormat(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getHeader(),21,8,3,12
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getInput(),3,1,3,4
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.getPage(),6,3,2,5
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(),1,1,1,2
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(byte[]),0,1,1,1
"net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.read(byte[], int)",12,5,3,7
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.reset(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream.skip(long),11,5,3,6
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.OggVorbisAudioInputStream(OggStream),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.available(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.close(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.getFormat(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.mark(int),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.markSupported(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(byte[]),0,1,1,1
"net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.read(byte[], int)",0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.reset(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream.skip(long),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisDecoderFactory(),0,1,1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory.getOggStream(File),0,1,1,1
"net.sf.freecol.common.sound.SoundPlayer.SoundPlayer(AudioMixerOption, PercentageOption)",0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.SoundPlayerThread(),0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.add(File),0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.playSound(File),5,2,5,6
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.remove(),1,1,2,2
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.run(),12,1,6,6
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread.stopPlaying(),0,1,1,1
"net.sf.freecol.common.sound.SoundPlayer.changeVolume(SourceDataLine, int)",9,2,6,8
net.sf.freecol.common.sound.SoundPlayer.getAudioInputStream(File),4,2,2,3
net.sf.freecol.common.sound.SoundPlayer.getMixer(),0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.getVolume(),0,1,1,1
"net.sf.freecol.common.sound.SoundPlayer.openLine(AudioFormat, Mixer, int)",3,3,4,4
net.sf.freecol.common.sound.SoundPlayer.playOnce(File),1,2,1,2
net.sf.freecol.common.sound.SoundPlayer.setDefaultPlaylist(File...),0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.setMixer(MixerWrapper),1,1,2,2
net.sf.freecol.common.sound.SoundPlayer.setVolume(int),0,1,1,1
net.sf.freecol.common.sound.SoundPlayer.stop(),0,1,1,1
net.sf.freecol.common.sound.SoundTest.playSound(String),1,1,2,2
net.sf.freecol.common.sound.SoundTest.setUp(),2,1,3,3
net.sf.freecol.common.sound.SoundTest.tearDown(),0,1,1,1
net.sf.freecol.common.sound.SoundTest.testClassic(),0,1,1,1
net.sf.freecol.common.sound.SoundTest.testSound(),0,1,1,1
"net.sf.freecol.common.util.CachingFunction.CachingFunction(Function<T, R>)",0,1,1,1
net.sf.freecol.common.util.CachingFunction.apply(T),2,1,2,2
"net.sf.freecol.common.util.CollectionUtils.accumulateMap(Map<K, V>, Map<K, V>, BinaryOperator<V>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.accumulateToMap(Map<K, V>, K, V, BinaryOperator<V>)",2,1,2,2
"net.sf.freecol.common.util.CollectionUtils.all(Collection<T>, Predicate<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.all(Stream<T>, Predicate<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.all(T[], Predicate<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.allSame(Collection<T>),4,4,1,4
"net.sf.freecol.common.util.CollectionUtils.all_internal(Stream<T>, Predicate<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.alwaysTrue(),0,1,1,1
net.sf.freecol.common.util.CollectionUtils.any(Collection<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.any(Collection<T>, Predicate<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.any(Stream<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.any(Stream<T>, Predicate<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.any(T[]),1,1,1,2
"net.sf.freecol.common.util.CollectionUtils.any(T[], Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.any_internal(Stream<T>, Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.appendToMapList(Map<K, List<T>>, K, T)",2,1,3,3
net.sf.freecol.common.util.CollectionUtils.asMap(T...),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.cacheDouble(Function<T, Double>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.cacheInt(Function<T, Integer>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.cachingDoubleComparator(Function<T, Double>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.cachingIntComparator(Function<T, Integer>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.concat(Stream<T>, Stream<T>...)",4,1,4,4
net.sf.freecol.common.util.CollectionUtils.count(Collection<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.count(Collection<T>, Predicate<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.count(Stream<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.count(Stream<T>, Predicate<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.count(T[]),1,1,1,2
"net.sf.freecol.common.util.CollectionUtils.count(T[], Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.count_internal(Stream<T>, Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.dump(String, Collection<?>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.dump(String, Map<?, ?>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.dump(String, Stream<?>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.dump(String, T[])",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.dump_internal(String, Stream<?>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.fileStream(File),2,1,4,4
"net.sf.freecol.common.util.CollectionUtils.fileStream(File, Predicate<? super File>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.find(Collection<T>, Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.find(Collection<T>, Predicate<? super T>, T)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.find(Stream<T>, Predicate<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.find(Stream<T>, Predicate<? super T>, T)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.find(T[], Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.find(T[], Predicate<? super T>, T)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.find_internal(Stream<T>, Predicate<? super T>, T)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.first(Collection<T>),2,1,3,3
net.sf.freecol.common.util.CollectionUtils.first(Stream<T>),1,1,2,2
net.sf.freecol.common.util.CollectionUtils.first(T[]),2,1,2,3
"net.sf.freecol.common.util.CollectionUtils.first_internal(Stream<T>, T)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.flatten(Collection<T>, Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.flatten(Collection<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.flatten(Stream<T>, Function<? super T, ? extends Stream<? extends R>>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.flatten(Stream<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.flatten(T[], Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.flatten(T[], Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.flatten_internal(Stream<T>, Predicate<? super T>, Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.forEach(Collection<T>, Consumer<? super T>)",2,1,4,4
"net.sf.freecol.common.util.CollectionUtils.forEach(Collection<T>, Predicate<? super T>, Consumer<? super T>)",2,1,4,4
"net.sf.freecol.common.util.CollectionUtils.forEach(Stream<T>, Consumer<? super T>)",2,1,2,3
"net.sf.freecol.common.util.CollectionUtils.forEach(Stream<T>, Predicate<? super T>, Consumer<? super T>)",2,1,2,3
"net.sf.freecol.common.util.CollectionUtils.forEach(T[], Consumer<? super T>)",2,1,2,3
"net.sf.freecol.common.util.CollectionUtils.forEach(T[], Predicate<? super T>, Consumer<? super T>)",2,1,2,3
"net.sf.freecol.common.util.CollectionUtils.forEachMapEntry(Map<K, V>, Consumer<Entry<K, V>>)",2,1,4,4
"net.sf.freecol.common.util.CollectionUtils.forEachMapEntry(Map<K, V>, Predicate<Entry<K, V>>, Consumer<Entry<K, V>>)",2,1,4,4
"net.sf.freecol.common.util.CollectionUtils.forEach_internal(Stream<T>, Predicate<? super T>, Consumer<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.getPermutations(List<T>),10,3,2,5
"net.sf.freecol.common.util.CollectionUtils.incrementMapCount(Map<K, Integer>, K)",2,1,1,2
net.sf.freecol.common.util.CollectionUtils.isNotNull(),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.isNotNull(Function<? super T, V>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.isNull(),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.isNull(Function<? super T, V>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.iterable(Stream<T>),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.listEquals(List<T>, List<T>)",14,7,4,7
net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableList(T...),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableMap(K[], V[])",2,2,2,3
net.sf.freecol.common.util.CollectionUtils.makeUnmodifiableSet(T...),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.map(Collection<T>, Function<? super T, ? extends R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.map(Stream<T>, Function<? super T, ? extends R>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.map(T[], Function<? super T, ? extends R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByKey(Map<K, V>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByKey(Map<K, V>, Comparator<K>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByValue(Map<K, V>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.mapEntriesByValue(Map<K, V>, Comparator<V>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.map_internal(Stream<T>, Function<? super T, ? extends R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.matchKey(K, Function<T, K>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.matchKey(T),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.matchKeyEquals(K, Function<T, K>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.matchKeyEquals(T),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.max(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.max(Collection<T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.max(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.max(Stream<T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.max(T[], Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.max(T[], ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.max_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.maximize(Collection<T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.maximize(Collection<T>, Predicate<? super T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.maximize(Stream<T>, Comparator<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.maximize(Stream<T>, Predicate<? super T>, Comparator<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.maximize(T[], Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.maximize(T[], Predicate<? super T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.maximize_internal(Stream<T>, Predicate<? super T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.min(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.min(Collection<T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.min(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.min(Stream<T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.min(T[], Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.min(T[], ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.min_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.minimize(Collection<T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.minimize(Collection<T>, Predicate<? super T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.minimize(Stream<T>, Comparator<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.minimize(Stream<T>, Predicate<? super T>, Comparator<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.minimize(T[], Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.minimize(T[], Predicate<? super T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.minimize_internal(Stream<T>, Predicate<? super T>, Comparator<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.none(Collection<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.none(Collection<T>, Predicate<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.none(Stream<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.none(Stream<T>, Predicate<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.none(T[]),1,1,1,2
"net.sf.freecol.common.util.CollectionUtils.none(T[], Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.none_internal(Stream<T>, Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.product(Collection<T>, Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.product(Collection<T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.product(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.product(Stream<T>, ToDoubleFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.product(T[], Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.product(T[], ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.product_internal(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.removeInPlace(Collection<T>, Predicate<? super T>)",3,1,3,3
"net.sf.freecol.common.util.CollectionUtils.removeInPlace(Map<K, V>, Predicate<Entry<K, V>>)",3,1,3,3
net.sf.freecol.common.util.CollectionUtils.reverse(List<T>),2,2,2,3
"net.sf.freecol.common.util.CollectionUtils.rotate(List<T>, int)",8,2,4,6
net.sf.freecol.common.util.CollectionUtils.sort(Collection<T>),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sort(Collection<T>, Comparator<? super T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.sort(Stream<T>),1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.sort(Stream<T>, Comparator<? super T>)",1,1,2,2
net.sf.freecol.common.util.CollectionUtils.sort(T[]),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sort(T[], Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sort_internal(Stream<T>, Comparator<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sum(Collection<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sum(Collection<T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sum(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.sum(Stream<T>, ToIntFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.sum(T[], Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sum(T[], ToIntFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Collection<T>, Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Collection<T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.sumDouble(Stream<T>, ToDoubleFunction<T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.sumDouble(T[], Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sumDouble(T[], ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sumDouble_internal(Stream<T>, Predicate<? super T>, ToDoubleFunction<T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.sum_internal(Stream<T>, Predicate<? super T>, ToIntFunction<T>)",0,1,1,1
net.sf.freecol.common.util.CollectionUtils.toAppendedList(),5,1,2,3
net.sf.freecol.common.util.CollectionUtils.toList(Collection<T>),0,1,1,1
net.sf.freecol.common.util.CollectionUtils.toList(Stream<T>),1,1,2,2
net.sf.freecol.common.util.CollectionUtils.toList(T[]),0,1,1,1
net.sf.freecol.common.util.CollectionUtils.toListNoNulls(),2,1,2,2
net.sf.freecol.common.util.CollectionUtils.toList_internal(Stream<T>),0,1,1,1
net.sf.freecol.common.util.CollectionUtils.toStream(Iterable<T>),0,1,1,1
net.sf.freecol.common.util.CollectionUtils.toStream(Iterator<T>),0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(Collection<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.transform(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",1,1,2,2
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>, Collector<R, ?, C>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform(T[], Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>)",0,1,1,1
"net.sf.freecol.common.util.CollectionUtils.transform_internal(Stream<T>, Predicate<? super T>, Function<? super T, ? extends R>, Comparator<? super R>, Collector<R, ?, C>)",1,1,2,2
net.sf.freecol.common.util.ImageUtils.createBufferedImage(Image),1,2,1,2
"net.sf.freecol.common.util.ImageUtils.createBufferedImage(int, int)",2,2,2,2
"net.sf.freecol.common.util.ImageUtils.createCenteredImage(BufferedImage, Dimension)",0,1,1,1
"net.sf.freecol.common.util.ImageUtils.createCenteredImage(BufferedImage, int, int)",0,1,1,1
net.sf.freecol.common.util.ImageUtils.createGrayscaleImage(Image),1,2,1,2
net.sf.freecol.common.util.ImageUtils.createHalvedImage(Image),1,2,1,2
net.sf.freecol.common.util.ImageUtils.createMirroredImage(Image),1,2,1,2
"net.sf.freecol.common.util.ImageUtils.createResizedImage(Image, int, int)",0,1,1,1
"net.sf.freecol.common.util.ImageUtils.createResizedImage(Image, int, int, boolean)",1,1,2,2
"net.sf.freecol.common.util.ImageUtils.drawTiledImage(BufferedImage, Graphics, JComponent, Insets)",9,1,4,5
"net.sf.freecol.common.util.ImageUtils.fadeImage(Image, float, float)",0,1,1,1
"net.sf.freecol.common.util.ImageUtils.fillTexture(Graphics2D, BufferedImage, int, int, int, int)",0,1,1,1
"net.sf.freecol.common.util.ImageUtils.imageWithAlphaFromMask(BufferedImage, BufferedImage)",0,1,1,1
"net.sf.freecol.common.util.ImageUtils.wildcardDimension(Dimension, Dimension)",7,2,1,8
"net.sf.freecol.common.util.Introspector.Introspector(Class<?>, String)",2,2,2,3
"net.sf.freecol.common.util.Introspector.IntrospectorException.IntrospectorException(String, Throwable)",0,1,1,1
net.sf.freecol.common.util.Introspector.IntrospectorException.IntrospectorException(Throwable),0,1,1,1
"net.sf.freecol.common.util.Introspector.construct(Constructor<T>, Object[])",2,1,1,3
net.sf.freecol.common.util.Introspector.fromSnakeCase(String),1,1,2,2
net.sf.freecol.common.util.Introspector.getClassByName(String),1,1,1,2
"net.sf.freecol.common.util.Introspector.getConstructor(Class<T>, Class[])",1,1,1,2
net.sf.freecol.common.util.Introspector.getFromStringConverter(Class<?>),16,8,9,10
net.sf.freecol.common.util.Introspector.getGetMethod(),1,1,2,2
net.sf.freecol.common.util.Introspector.getMethodReturnType(Method),1,1,2,2
net.sf.freecol.common.util.Introspector.getSetMethod(Class<?>),1,1,2,2
net.sf.freecol.common.util.Introspector.getToStringConverter(Class<?>),1,1,2,2
net.sf.freecol.common.util.Introspector.getter(Object),17,3,7,8
"net.sf.freecol.common.util.Introspector.instantiate(Class<T>, Class[], Object[])",2,1,3,3
"net.sf.freecol.common.util.Introspector.instantiate(String, Class[], Object[])",1,1,1,2
"net.sf.freecol.common.util.Introspector.invokeMethod(Object, String, Class<T>)",0,1,1,1
"net.sf.freecol.common.util.Introspector.invokeVoidMethod(Object, String)",0,1,1,1
"net.sf.freecol.common.util.Introspector.setter(Object, String)",15,3,7,7
net.sf.freecol.common.util.LogBuilder.LogBuilder(int),1,1,1,2
net.sf.freecol.common.util.LogBuilder.add(Object...),1,1,2,2
"net.sf.freecol.common.util.LogBuilder.addCollection(String, Collection<T>)",5,1,4,4
"net.sf.freecol.common.util.LogBuilder.addInternal(StringBuilder, Object...)",7,1,4,4
net.sf.freecol.common.util.LogBuilder.addStackTrace(),1,1,2,2
net.sf.freecol.common.util.LogBuilder.grew(Object...),2,3,1,3
"net.sf.freecol.common.util.LogBuilder.log(Logger, Level)",2,1,5,5
net.sf.freecol.common.util.LogBuilder.mark(),1,1,2,2
net.sf.freecol.common.util.LogBuilder.o2s(Object),10,1,5,5
net.sf.freecol.common.util.LogBuilder.shrink(String),5,1,4,5
net.sf.freecol.common.util.LogBuilder.size(),1,1,2,2
net.sf.freecol.common.util.LogBuilder.toString(),1,1,2,2
net.sf.freecol.common.util.LogBuilder.truncate(int),2,1,3,3
"net.sf.freecol.common.util.LogBuilder.wide(int, Object...)",9,2,5,7
net.sf.freecol.common.util.OSUtils.getBrowserExecString(String),4,4,3,4
net.sf.freecol.common.util.OSUtils.getOperatingSystem(),0,1,1,1
net.sf.freecol.common.util.OSUtils.launchBrowser(String),3,1,3,3
net.sf.freecol.common.util.OSUtils.onMacOSX(),0,1,1,1
net.sf.freecol.common.util.OSUtils.onUnix(),0,1,1,1
net.sf.freecol.common.util.OSUtils.onWindows(),0,1,1,1
"net.sf.freecol.common.util.RandomChoice.RandomChoice(T, int)",0,1,1,1
net.sf.freecol.common.util.RandomChoice.getObject(),0,1,1,1
net.sf.freecol.common.util.RandomChoice.getProbability(),0,1,1,1
net.sf.freecol.common.util.RandomChoice.getTotalProbability(Collection<RandomChoice<T>>),0,1,1,1
"net.sf.freecol.common.util.RandomChoice.getWeightedRandom(Logger, String, Collection<RandomChoice<T>>, Random)",4,1,5,5
"net.sf.freecol.common.util.RandomChoice.getWeightedRandom(Logger, String, Stream<RandomChoice<T>>, Random)",1,1,2,2
"net.sf.freecol.common.util.RandomChoice.normalize(Collection<RandomChoice<T>>, int)",3,2,4,5
"net.sf.freecol.common.util.RandomChoice.select(Collection<RandomChoice<T>>, int)",4,4,3,4
"net.sf.freecol.common.util.RandomUtils.RandomIntCache.RandomIntCache(Logger, String, Random, int, int)",0,1,1,1
net.sf.freecol.common.util.RandomUtils.RandomIntCache.nextInt(),1,1,2,2
net.sf.freecol.common.util.RandomUtils.RandomIntCache.nextInt(int),0,1,1,1
net.sf.freecol.common.util.RandomUtils.RandomIntCache.refill(),0,1,1,1
"net.sf.freecol.common.util.RandomUtils.getRandomMember(Logger, String, List<T>, Random)",1,3,2,3
"net.sf.freecol.common.util.RandomUtils.getRandomMember(Logger, String, Stream<T>, Random)",1,1,2,2
"net.sf.freecol.common.util.RandomUtils.logArray(Logger, String, int[])",4,1,4,4
"net.sf.freecol.common.util.RandomUtils.randomDouble(Logger, String, Random)",2,1,3,3
"net.sf.freecol.common.util.RandomUtils.randomFloat(Logger, String, Random)",2,1,3,3
"net.sf.freecol.common.util.RandomUtils.randomInt(Logger, String, Random, int)",1,1,2,2
"net.sf.freecol.common.util.RandomUtils.randomInts(Logger, String, Random, int, int)",0,1,1,1
"net.sf.freecol.common.util.RandomUtils.randomShuffle(Logger, String, List<?>, Random)",4,2,4,5
net.sf.freecol.common.util.StringUtils.capitalize(String),0,1,1,1
"net.sf.freecol.common.util.StringUtils.capitalize(String, Locale)",2,1,3,3
"net.sf.freecol.common.util.StringUtils.chop(String, int)",1,1,2,2
net.sf.freecol.common.util.StringUtils.downCase(String),0,1,1,1
"net.sf.freecol.common.util.StringUtils.downCase(String, Locale)",2,1,3,3
"net.sf.freecol.common.util.StringUtils.firstPart(String, String)",2,1,3,3
net.sf.freecol.common.util.StringUtils.getBreakingPoint(String),0,1,1,1
"net.sf.freecol.common.util.StringUtils.getBreakingPoint(String, String)",4,4,3,4
net.sf.freecol.common.util.StringUtils.getEnumKey(Enum<?>),7,4,4,5
"net.sf.freecol.common.util.StringUtils.join(String, Collection<String>)",0,1,1,1
"net.sf.freecol.common.util.StringUtils.join(String, String...)",5,2,3,4
"net.sf.freecol.common.util.StringUtils.lastPart(String, String)",2,1,3,3
"net.sf.freecol.common.util.StringUtils.splitText(String, String, FontMetrics, int)",27,8,8,12
net.sf.freecol.common.util.StringUtils.upCase(String),0,1,1,1
"net.sf.freecol.common.util.StringUtils.upCase(String, Locale)",2,1,3,3
"net.sf.freecol.common.util.Utils.delay(long, String)",4,1,3,3
net.sf.freecol.common.util.Utils.deleteFile(File),2,1,3,3
net.sf.freecol.common.util.Utils.deleteFiles(List<File>),1,1,2,2
net.sf.freecol.common.util.Utils.determineDpi(GraphicsDevice),1,2,1,2
"net.sf.freecol.common.util.Utils.directoryAllPresent(File, String...)",5,4,4,6
"net.sf.freecol.common.util.Utils.equals(T, T)",1,1,2,2
"net.sf.freecol.common.util.Utils.fileAnySuffix(File, String...)",5,4,4,6
net.sf.freecol.common.util.Utils.garbageCollect(),0,1,1,1
"net.sf.freecol.common.util.Utils.getF8W(File, boolean)",2,1,3,3
net.sf.freecol.common.util.Utils.getFileUTF8AppendWriter(File),0,1,1,1
net.sf.freecol.common.util.Utils.getFileUTF8Reader(File),1,1,2,2
net.sf.freecol.common.util.Utils.getFileUTF8Writer(File),0,1,1,1
net.sf.freecol.common.util.Utils.getGoodGraphicsDevice(),2,1,1,3
net.sf.freecol.common.util.Utils.getRandomState(Random),1,1,2,2
net.sf.freecol.common.util.Utils.getUTF8Contents(File),5,1,4,4
net.sf.freecol.common.util.Utils.getUTF8Writer(OutputStream),0,1,1,1
net.sf.freecol.common.util.Utils.hashCode(Object),1,1,2,2
net.sf.freecol.common.util.Utils.isHeadless(),0,1,1,1
"net.sf.freecol.common.util.Utils.makeTransformer(boolean, boolean)",3,1,4,4
net.sf.freecol.common.util.Utils.now(),0,1,1,1
net.sf.freecol.common.util.Utils.restoreRandomState(String),4,2,4,5
net.sf.freecol.common.utils.AllTests.suite(),0,1,1,1
net.sf.freecol.common.utils.UtilsTest.makeList(int...),1,1,2,2
net.sf.freecol.common.utils.UtilsTest.testComparator(),0,1,1,1
net.sf.freecol.common.utils.UtilsTest.testGetPermutations(),1,1,2,2
net.sf.freecol.metaserver.MetaRegister.MetaRegister(),0,1,1,1
net.sf.freecol.metaserver.MetaRegister.addServer(ServerInfo),2,3,3,3
net.sf.freecol.metaserver.MetaRegister.canConnectToServer(ServerInfo),1,1,1,2
"net.sf.freecol.metaserver.MetaRegister.getServer(String, int)",2,2,2,2
net.sf.freecol.metaserver.MetaRegister.getServers(),0,1,1,1
"net.sf.freecol.metaserver.MetaRegister.indexOf(String, int)",4,3,3,4
net.sf.freecol.metaserver.MetaRegister.removeDeadServers(),3,1,3,3
"net.sf.freecol.metaserver.MetaRegister.removeServer(String, int)",2,1,2,2
net.sf.freecol.metaserver.MetaRegister.startCleanupTimer(),2,1,2,2
net.sf.freecol.metaserver.MetaRegister.updateServer(ServerInfo),2,1,2,2
net.sf.freecol.metaserver.MetaServer.MetaServer(int),0,1,1,1
net.sf.freecol.metaserver.MetaServer.getConnection(Socket),0,1,1,1
net.sf.freecol.metaserver.MetaServer.getMetaServerHandler(),0,1,1,1
net.sf.freecol.metaserver.MetaServer.getPort(),0,1,1,1
net.sf.freecol.metaserver.MetaServer.main(String[]),2,1,3,3
net.sf.freecol.metaserver.MetaServer.removeConnection(Connection),0,1,1,1
net.sf.freecol.metaserver.MetaServer.run(),3,1,3,3
net.sf.freecol.metaserver.MetaServer.shutdown(),2,1,3,3
"net.sf.freecol.metaserver.MetaServerHandler.MetaServerHandler(MetaServer, MetaRegister)",0,1,1,1
net.sf.freecol.metaserver.MetaServerHandler.disconnect(Connection),0,1,1,1
"net.sf.freecol.metaserver.MetaServerHandler.handle(Connection, Message)",2,2,1,7
net.sf.freecol.metaserver.MetaServerHandler.read(Connection),0,1,1,1
net.sf.freecol.metaserver.MetaServerHandler.register(RegisterServerMessage),0,1,1,1
net.sf.freecol.metaserver.MetaServerHandler.remove(RemoveServerMessage),0,1,1,1
net.sf.freecol.metaserver.MetaServerHandler.serverList(),0,1,1,1
net.sf.freecol.metaserver.MetaServerHandler.update(UpdateServerMessage),0,1,1,1
net.sf.freecol.server.AllTests.suite(),0,1,1,1
"net.sf.freecol.server.FreeColServer.FreeColServer(FreeColSavegameFile, Specification, InetAddress, int, String)",1,1,2,2
"net.sf.freecol.server.FreeColServer.FreeColServer(String, InetAddress, int)",0,1,1,1
"net.sf.freecol.server.FreeColServer.FreeColServer(boolean, boolean, Specification, InetAddress, int, String)",0,1,1,1
net.sf.freecol.server.FreeColServer.ServerState.ServerState(int),0,1,1,1
net.sf.freecol.server.FreeColServer.ServerState.getMetaServerState(),0,1,1,1
net.sf.freecol.server.FreeColServer.addAIConnection(Player),0,1,1,1
net.sf.freecol.server.FreeColServer.addNewUserConnection(Socket),1,1,2,2
net.sf.freecol.server.FreeColServer.addPlayerConnection(Connection),1,1,1,2
net.sf.freecol.server.FreeColServer.buildGame(),17,1,8,8
net.sf.freecol.server.FreeColServer.changeServerState(ServerState),1,1,1,2
"net.sf.freecol.server.FreeColServer.createServer(InetAddress, int)",11,3,6,7
net.sf.freecol.server.FreeColServer.endGame(),3,3,2,3
net.sf.freecol.server.FreeColServer.exploreMapForAllPlayers(boolean),4,1,4,4
"net.sf.freecol.server.FreeColServer.generateEmptyMap(int, int)",0,1,1,1
net.sf.freecol.server.FreeColServer.generateMap(boolean),3,1,3,3
net.sf.freecol.server.FreeColServer.getAIMain(),0,1,1,1
net.sf.freecol.server.FreeColServer.getAIPlayer(Player),0,1,1,1
net.sf.freecol.server.FreeColServer.getController(),1,1,1,2
net.sf.freecol.server.FreeColServer.getGame(),0,1,1,1
net.sf.freecol.server.FreeColServer.getHost(),1,1,2,2
net.sf.freecol.server.FreeColServer.getInGameController(),0,1,1,1
net.sf.freecol.server.FreeColServer.getInputHandler(),1,2,1,2
net.sf.freecol.server.FreeColServer.getIntegrity(),0,1,1,1
net.sf.freecol.server.FreeColServer.getMapGenerator(),0,1,1,1
net.sf.freecol.server.FreeColServer.getName(),0,1,1,1
net.sf.freecol.server.FreeColServer.getPlayer(Connection),0,1,1,1
net.sf.freecol.server.FreeColServer.getPort(),1,1,2,2
net.sf.freecol.server.FreeColServer.getPreGameController(),0,1,1,1
net.sf.freecol.server.FreeColServer.getPublicServer(),0,1,1,1
net.sf.freecol.server.FreeColServer.getServer(),0,1,1,1
net.sf.freecol.server.FreeColServer.getServerInfo(),2,1,4,4
net.sf.freecol.server.FreeColServer.getServerRandom(),0,1,1,1
net.sf.freecol.server.FreeColServer.getServerState(),0,1,1,1
net.sf.freecol.server.FreeColServer.getSinglePlayer(),0,1,1,1
net.sf.freecol.server.FreeColServer.getSpecification(),1,1,2,2
net.sf.freecol.server.FreeColServer.getUserConnectionHandler(),0,1,1,1
net.sf.freecol.server.FreeColServer.loadGame(FreeColSavegameFile),0,1,1,1
"net.sf.freecol.server.FreeColServer.loadGame(FreeColSavegameFile, Specification)",9,1,5,9
net.sf.freecol.server.FreeColServer.makeAIPlayer(Nation),0,1,1,1
"net.sf.freecol.server.FreeColServer.readGame(File, Specification, FreeColServer)",2,1,3,3
"net.sf.freecol.server.FreeColServer.readGame(FreeColSavegameFile, Specification, FreeColServer)",20,8,11,13
"net.sf.freecol.server.FreeColServer.readMap(File, Specification)",1,1,2,2
net.sf.freecol.server.FreeColServer.registerWithMetaServer(),1,2,1,2
net.sf.freecol.server.FreeColServer.removeFromMetaServer(),1,2,1,2
net.sf.freecol.server.FreeColServer.removePlayerConnection(Player),1,1,2,2
"net.sf.freecol.server.FreeColServer.saveGame(File, OptionGroup, Unit)",0,1,1,1
"net.sf.freecol.server.FreeColServer.saveGame(File, String, OptionGroup, Unit, BufferedImage)",6,1,7,7
"net.sf.freecol.server.FreeColServer.saveMapEditorGame(File, BufferedImage)",0,1,1,1
"net.sf.freecol.server.FreeColServer.sendToAll(Message, Connection)",0,1,1,1
"net.sf.freecol.server.FreeColServer.sendToAll(Message, Player)",1,1,2,2
net.sf.freecol.server.FreeColServer.setAIMain(AIMain),0,1,1,1
net.sf.freecol.server.FreeColServer.setGame(ServerGame),0,1,1,1
net.sf.freecol.server.FreeColServer.setMapGenerator(MapGenerator),0,1,1,1
net.sf.freecol.server.FreeColServer.setName(String),0,1,1,1
net.sf.freecol.server.FreeColServer.setPublicServer(boolean),0,1,1,1
net.sf.freecol.server.FreeColServer.setServerRandom(Random),0,1,1,1
net.sf.freecol.server.FreeColServer.setSinglePlayer(boolean),0,1,1,1
net.sf.freecol.server.FreeColServer.shutdown(),0,1,1,1
net.sf.freecol.server.FreeColServer.startGame(),3,1,2,4
net.sf.freecol.server.FreeColServer.updateMetaServer(),1,2,1,2
net.sf.freecol.server.FreeColServer.waitForGame(),3,3,2,3
net.sf.freecol.server.SaveLoadTest.tearDown(),0,1,1,1
net.sf.freecol.server.SaveLoadTest.testDelayedLoading(),1,1,2,2
net.sf.freecol.server.SaveLoadTest.testImmediateLoading(),0,1,1,1
net.sf.freecol.server.SaveLoadTest.testImport(),1,1,2,2
net.sf.freecol.server.ServerTestHelper.createRandomSaveGame(),2,1,3,3
net.sf.freecol.server.ServerTestHelper.getInGameController(),0,1,1,1
net.sf.freecol.server.ServerTestHelper.getServer(),0,1,1,1
net.sf.freecol.server.ServerTestHelper.newTurn(),0,1,1,1
net.sf.freecol.server.ServerTestHelper.setRandom(Random),0,1,1,1
net.sf.freecol.server.ServerTestHelper.setServer(FreeColServer),0,1,1,1
"net.sf.freecol.server.ServerTestHelper.startServer(File, boolean, boolean)",0,1,1,1
"net.sf.freecol.server.ServerTestHelper.startServer(File, boolean, boolean, int, String)",1,1,2,2
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean)",0,1,1,1
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean, Specification)",0,1,1,1
"net.sf.freecol.server.ServerTestHelper.startServer(boolean, boolean, Specification, int, String)",1,1,2,2
net.sf.freecol.server.ServerTestHelper.startServerGame(Map),0,1,1,1
"net.sf.freecol.server.ServerTestHelper.startServerGame(Map, Specification)",2,1,3,3
net.sf.freecol.server.ServerTestHelper.stopServer(),1,1,2,2
net.sf.freecol.server.ServerTestHelper.stopServerGame(),0,1,1,1
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, Colony)",0,1,1,1
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIColony.AIColony(AIMain, String)",0,1,1,1
net.sf.freecol.server.ai.AIColony.addExportGoods(AIGoods),0,1,1,1
net.sf.freecol.server.ai.AIColony.addTileImprovementPlan(TileImprovementPlan),0,1,1,1
net.sf.freecol.server.ai.AIColony.addWish(Wish),0,1,1,1
net.sf.freecol.server.ai.AIColony.avertAutoDestruction(),13,5,8,8
net.sf.freecol.server.ai.AIColony.baseInitialize(),1,2,1,2
"net.sf.freecol.server.ai.AIColony.checkIntegrity(boolean, LogBuilder)",2,1,3,3
net.sf.freecol.server.ai.AIColony.clearExportGoods(),0,1,1,1
net.sf.freecol.server.ai.AIColony.clearTileImprovementPlans(),0,1,1,1
net.sf.freecol.server.ai.AIColony.clearWishes(),0,1,1,1
"net.sf.freecol.server.ai.AIColony.completeWish(Goods, LogBuilder)",1,1,2,2
"net.sf.freecol.server.ai.AIColony.completeWish(TransportableAIObject, LogBuilder)",4,4,4,4
"net.sf.freecol.server.ai.AIColony.completeWish(Unit, LogBuilder)",1,1,2,2
"net.sf.freecol.server.ai.AIColony.completeWish(Wish, String, LogBuilder)",1,2,2,2
net.sf.freecol.server.ai.AIColony.dispose(),2,1,4,4
net.sf.freecol.server.ai.AIColony.dropExportGoods(AIGoods),1,1,2,2
net.sf.freecol.server.ai.AIColony.exploreLCRs(),15,6,7,9
net.sf.freecol.server.ai.AIColony.getAIOwner(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getAIUnit(Unit),0,1,1,1
net.sf.freecol.server.ai.AIColony.getColony(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getExportGoods(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getGoodsWishes(),0,1,1,1
"net.sf.freecol.server.ai.AIColony.getPlanFor(Tile, List<TileImprovementPlan>)",0,1,1,1
net.sf.freecol.server.ai.AIColony.getPlannedBuildableTypes(),1,1,2,2
net.sf.freecol.server.ai.AIColony.getTileImprovementPlans(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getWishes(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getWorkerWishes(),0,1,1,1
net.sf.freecol.server.ai.AIColony.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.AIColony.goodsLog(AIGoods, String, LogBuilder)",5,1,6,6
net.sf.freecol.server.ai.AIColony.isBadlyDefended(),0,1,1,1
net.sf.freecol.server.ai.AIColony.planToString(),4,2,4,5
net.sf.freecol.server.ai.AIColony.propertyChange(PropertyChangeEvent),17,4,9,9
net.sf.freecol.server.ai.AIColony.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.AIColony.readChild(FreeColXMLReader),6,1,6,6
net.sf.freecol.server.ai.AIColony.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.AIColony.rearrangeColony(LogBuilder),59,14,33,42
net.sf.freecol.server.ai.AIColony.removeExportGoods(AIGoods),1,1,1,2
net.sf.freecol.server.ai.AIColony.removeTileImprovementPlan(TileImprovementPlan),0,1,1,1
net.sf.freecol.server.ai.AIColony.requestRearrange(),0,1,1,1
"net.sf.freecol.server.ai.AIColony.requireGoodsWish(GoodsType, int, int, LogBuilder)",3,1,3,3
"net.sf.freecol.server.ai.AIColony.requireWorkerWish(UnitType, boolean, int, LogBuilder)",3,1,3,3
net.sf.freecol.server.ai.AIColony.resetExports(),20,1,14,14
net.sf.freecol.server.ai.AIColony.setExportGoods(List<AIGoods>),0,1,1,1
net.sf.freecol.server.ai.AIColony.setInitialized(),0,1,1,1
net.sf.freecol.server.ai.AIColony.sortExportGoods(),1,2,1,2
net.sf.freecol.server.ai.AIColony.stealTiles(LogBuilder),20,4,12,15
net.sf.freecol.server.ai.AIColony.stopUsing(WorkLocation),2,1,3,3
net.sf.freecol.server.ai.AIColony.update(LogBuilder),0,1,1,1
net.sf.freecol.server.ai.AIColony.updateExportGoods(LogBuilder),58,6,15,21
net.sf.freecol.server.ai.AIColony.updateGoodsWishes(LogBuilder),31,8,13,17
net.sf.freecol.server.ai.AIColony.updateTileImprovementPlans(LogBuilder),33,6,15,20
net.sf.freecol.server.ai.AIColony.updateWishes(LogBuilder),0,1,1,1
net.sf.freecol.server.ai.AIColony.updateWorkerWishes(LogBuilder),17,4,11,12
net.sf.freecol.server.ai.AIColony.writeChildren(FreeColXMLWriter),15,7,6,11
"net.sf.freecol.server.ai.AIColonyTest.decorateMap(Game, boolean)",1,1,2,2
net.sf.freecol.server.ai.AIColonyTest.getToolsBuilder(AIColony),7,3,5,6
net.sf.freecol.server.ai.AIColonyTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.AIColonyTest.testBestDefender(),0,1,1,1
net.sf.freecol.server.ai.AIColonyTest.testBuildersAllocNoRawMatTiles(),1,1,2,2
net.sf.freecol.server.ai.AIColonyTest.testBuildersAllocation(),3,3,2,3
net.sf.freecol.server.ai.AIColonyTest.testExpertAllocColonyHasEnoughRawMat(),0,1,1,1
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, Location, GoodsType, int, Location)",0,1,1,1
"net.sf.freecol.server.ai.AIGoods.AIGoods(AIMain, String)",0,1,1,1
net.sf.freecol.server.ai.AIGoods.canMove(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.carriableBy(Unit),0,1,1,1
"net.sf.freecol.server.ai.AIGoods.checkIntegrity(boolean, LogBuilder)",27,1,10,11
net.sf.freecol.server.ai.AIGoods.dispose(),8,1,5,5
net.sf.freecol.server.ai.AIGoods.equals(Object),2,2,3,4
"net.sf.freecol.server.ai.AIGoods.getDeliveryPath(Unit, Location)",5,1,5,5
net.sf.freecol.server.ai.AIGoods.getGoods(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.getGoodsAmount(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.getGoodsType(),0,1,1,1
"net.sf.freecol.server.ai.AIGoods.getIntermediatePath(Unit, Location)",0,1,1,1
net.sf.freecol.server.ai.AIGoods.getTransportDestination(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.getTransportLocatable(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.getTransportSource(),1,1,2,2
net.sf.freecol.server.ai.AIGoods.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.hashCode(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.invalidReason(),4,1,5,5
"net.sf.freecol.server.ai.AIGoods.joinTransport(Unit, Direction)",5,3,3,5
net.sf.freecol.server.ai.AIGoods.leaveTransport(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.leaveTransport(Direction),1,2,1,2
net.sf.freecol.server.ai.AIGoods.leaveTransport(int),5,3,3,5
net.sf.freecol.server.ai.AIGoods.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.AIGoods.readChild(FreeColXMLReader),5,1,3,3
net.sf.freecol.server.ai.AIGoods.setGoods(Goods),0,1,1,1
net.sf.freecol.server.ai.AIGoods.setGoodsAmount(int),0,1,1,1
net.sf.freecol.server.ai.AIGoods.setInitialized(),0,1,1,1
net.sf.freecol.server.ai.AIGoods.setTransportDestination(Location),0,1,1,1
net.sf.freecol.server.ai.AIGoods.toString(),2,1,3,3
net.sf.freecol.server.ai.AIGoods.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.AIGoods.writeChildren(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.AIInGameInputHandler.AIInGameInputHandler(FreeColServer, Player, AIMain)",3,4,2,4
net.sf.freecol.server.ai.AIInGameInputHandler.getMyAIPlayer(),0,1,1,1
"net.sf.freecol.server.ai.AIInGameInputHandler.handle(Connection, Message)",0,1,1,1
net.sf.freecol.server.ai.AIInGameInputHandler.read(Connection),0,1,1,1
net.sf.freecol.server.ai.AIMain.AIMain(FreeColServer),0,1,1,1
"net.sf.freecol.server.ai.AIMain.AIMain(FreeColServer, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIMain.addAIObject(String, AIObject)",3,3,2,4
"net.sf.freecol.server.ai.AIMain.checkIntegrity(boolean, LogBuilder)",15,1,8,8
net.sf.freecol.server.ai.AIMain.checkSortConsistency(),16,6,4,10
net.sf.freecol.server.ai.AIMain.copyIn(T),2,2,2,3
net.sf.freecol.server.ai.AIMain.findNewObjects(boolean),6,3,4,5
net.sf.freecol.server.ai.AIMain.getAIColony(Colony),0,1,1,1
net.sf.freecol.server.ai.AIMain.getAIObject(FreeColGameObject),0,1,1,1
net.sf.freecol.server.ai.AIMain.getAIObject(String),0,1,1,1
"net.sf.freecol.server.ai.AIMain.getAIObject(String, Class<T>)",1,1,1,2
net.sf.freecol.server.ai.AIMain.getAIObjects(),0,1,1,1
net.sf.freecol.server.ai.AIMain.getAIPlayer(Player),0,1,1,1
net.sf.freecol.server.ai.AIMain.getAIStatistics(),4,1,3,3
net.sf.freecol.server.ai.AIMain.getAIUnit(Unit),0,1,1,1
net.sf.freecol.server.ai.AIMain.getFreeColServer(),0,1,1,1
net.sf.freecol.server.ai.AIMain.getGame(),0,1,1,1
net.sf.freecol.server.ai.AIMain.getNextId(),0,1,1,1
net.sf.freecol.server.ai.AIMain.getRandomSeed(String),0,1,1,1
net.sf.freecol.server.ai.AIMain.getSpecification(),0,1,1,1
net.sf.freecol.server.ai.AIMain.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.AIMain.ownerChanged(FreeColGameObject, Player, Player)",2,2,2,3
net.sf.freecol.server.ai.AIMain.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.AIMain.readChild(FreeColXMLReader),28,10,18,23
net.sf.freecol.server.ai.AIMain.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.AIMain.removeAIObject(String),1,1,2,2
net.sf.freecol.server.ai.AIMain.removeFreeColGameObject(String),1,1,2,2
"net.sf.freecol.server.ai.AIMain.setFreeColGameObject(String, FreeColGameObject)",13,10,7,12
net.sf.freecol.server.ai.AIMain.shouldHaveAIObject(FreeColGameObject),6,1,3,4
net.sf.freecol.server.ai.AIMain.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.server.ai.AIMain.writeChildren(FreeColXMLWriter),13,5,6,7
"net.sf.freecol.server.ai.AIMessage.askAttack(AIUnit, Direction)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askAttackRanged(AIUnit, Tile)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askBuildColony(AIUnit, String)",0,1,1,1
net.sf.freecol.server.ai.AIMessage.askCashInTreasureTrain(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askChangeState(AIUnit, UnitState)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askChangeWorkImprovementType(AIUnit, TileImprovementType)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askChangeWorkType(AIUnit, GoodsType)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askChooseFoundingFather(AIPlayer, List<FoundingFather>, FoundingFather)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askClaimLand(Tile, AIColony, int)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askClaimLand(Tile, AIUnit, int)",0,1,1,1
net.sf.freecol.server.ai.AIMessage.askClearSpeciality(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askDiplomacy(AIPlayer, FreeColGameObject, FreeColGameObject, DiplomaticTrade)",0,1,1,1
net.sf.freecol.server.ai.AIMessage.askDisband(AIUnit),0,1,1,1
net.sf.freecol.server.ai.AIMessage.askDisembark(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askEmbark(AIUnit, Unit, Direction)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askEmigrate(AIPlayer, int)",0,1,1,1
net.sf.freecol.server.ai.AIMessage.askEndTurn(AIPlayer),0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askEquipForRole(AIUnit, Role, int)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askEstablishMission(AIUnit, Direction, boolean)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askFirstContact(AIPlayer, Player, Player, Tile, boolean)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askIndianDemand(AIPlayer, Unit, Colony, GoodsType, int, IndianDemandAction)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askLoadGoods(Location, GoodsType, int, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askLoot(AIUnit, String, List<Goods>)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askMonarchAction(AIPlayer, MonarchAction, boolean)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askMove(AIUnit, Direction)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askMoveTo(AIUnit, Location)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askNationSummary(AIPlayer, Player)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askNativeGift(AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askNativeTrade(AIPlayer, NativeTradeAction, NativeTrade)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askNewLandName(AIPlayer, Unit, String)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askNewRegionName(AIPlayer, Region, Tile, Unit, String)",0,1,1,1
net.sf.freecol.server.ai.AIMessage.askPutOutsideColony(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askRearrangeColony(AIColony, List<Unit>, Colony)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askScoutSpeakToChief(AIUnit, IndianSettlement)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askSetBuildQueue(AIColony, List<BuildableType>)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askTrainUnitInEurope(AIPlayer, UnitType)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askUnloadGoods(GoodsType, int, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.AIMessage.askWork(AIUnit, WorkLocation)",0,1,1,1
net.sf.freecol.server.ai.AIObject.AIObject(AIMain),0,1,1,1
"net.sf.freecol.server.ai.AIObject.AIObject(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIObject.AIObject(AIMain, String)",1,1,2,2
net.sf.freecol.server.ai.AIObject.addAIObjectWithId(),1,1,2,2
net.sf.freecol.server.ai.AIObject.checkIntegrity(boolean),0,1,1,1
"net.sf.freecol.server.ai.AIObject.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.server.ai.AIObject.copyIn(T),2,2,2,3
net.sf.freecol.server.ai.AIObject.dispose(),0,1,1,1
net.sf.freecol.server.ai.AIObject.getAIMain(),0,1,1,1
net.sf.freecol.server.ai.AIObject.getGame(),0,1,1,1
net.sf.freecol.server.ai.AIObject.getSpecification(),0,1,1,1
net.sf.freecol.server.ai.AIObject.isDisposed(),0,1,1,1
net.sf.freecol.server.ai.AIObject.isInitialized(),0,1,1,1
net.sf.freecol.server.ai.AIObject.setGame(Game),0,1,1,1
net.sf.freecol.server.ai.AIObject.setSpecification(Specification),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.AIPlayer(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.AIPlayer(AIMain, Player)",0,1,1,1
net.sf.freecol.server.ai.AIPlayer.acceptDiplomaticTrade(DiplomaticTrade),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.acceptMercenaries(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.acceptTax(int),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.askServer(),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.checkIntegrity(boolean, LogBuilder)",3,1,4,4
net.sf.freecol.server.ai.AIPlayer.chooseFoundingFatherHandler(List<FoundingFather>),1,2,1,2
net.sf.freecol.server.ai.AIPlayer.determineStance(Player),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.diplomacyHandler(FreeColGameObject, FreeColGameObject, DiplomaticTrade)",1,1,1,2
"net.sf.freecol.server.ai.AIPlayer.firstContactHandler(Player, Player, Tile)",0,1,1,1
net.sf.freecol.server.ai.AIPlayer.fountainOfYouthHandler(int),2,1,2,2
net.sf.freecol.server.ai.AIPlayer.getAIAdvantage(),3,1,4,4
net.sf.freecol.server.ai.AIPlayer.getAIColonies(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getAIColony(Colony),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getAIRandom(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getAIUnit(Unit),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getAIUnits(),9,5,4,5
net.sf.freecol.server.ai.AIPlayer.getConnection(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getPlayer(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.indianDemandHandler(Unit, Colony, GoodsType, int, IndianDemandAction)",1,1,2,2
net.sf.freecol.server.ai.AIPlayer.invoke(Runnable),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.lootCargoHandler(Unit, List<Goods>, String)",4,3,3,4
"net.sf.freecol.server.ai.AIPlayer.monarchActionHandler(MonarchAction, int)",1,1,1,3
"net.sf.freecol.server.ai.AIPlayer.nationSummaryHandler(Player, NationSummary)",0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.nativeTradeHandler(NativeTradeAction, NativeTrade)",0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.newLandNameHandler(Unit, String)",0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.newRegionNameHandler(Region, Tile, Unit, String)",0,1,1,1
net.sf.freecol.server.ai.AIPlayer.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.server.ai.AIPlayer.reconnectHandler(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.removeAIObject(AIObject),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.selectFoundingFather(List<FoundingFather>),0,1,1,1
"net.sf.freecol.server.ai.AIPlayer.setAIHandler(Player, boolean)",0,1,1,1
net.sf.freecol.server.ai.AIPlayer.setCurrentPlayerHandler(Player),4,1,3,3
net.sf.freecol.server.ai.AIPlayer.setInitialized(),0,1,1,1
net.sf.freecol.server.ai.AIPlayer.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.AIServerAPI.AIServerAPI(AIPlayer),0,1,1,1
"net.sf.freecol.server.ai.AIServerAPI.connect(String, String, int)",0,1,1,1
net.sf.freecol.server.ai.AIServerAPI.disconnect(),0,1,1,1
net.sf.freecol.server.ai.AIServerAPI.getConnection(),1,1,2,2
net.sf.freecol.server.ai.AIServerAPI.reconnect(),0,1,1,1
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, String)",0,1,1,1
"net.sf.freecol.server.ai.AIUnit.AIUnit(AIMain, Unit)",0,1,1,1
net.sf.freecol.server.ai.AIUnit.canMove(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.carriableBy(Unit),0,1,1,1
net.sf.freecol.server.ai.AIUnit.changeMission(Mission),2,2,2,3
"net.sf.freecol.server.ai.AIUnit.checkIntegrity(boolean, LogBuilder)",2,1,3,3
net.sf.freecol.server.ai.AIUnit.dispose(),2,1,3,3
net.sf.freecol.server.ai.AIUnit.doMission(LogBuilder),1,1,2,2
net.sf.freecol.server.ai.AIUnit.equals(Object),2,2,3,4
net.sf.freecol.server.ai.AIUnit.equipForRole(Role),13,6,5,9
net.sf.freecol.server.ai.AIUnit.getAIOwner(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getAIRandom(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getBuilderScore(),6,2,4,6
"net.sf.freecol.server.ai.AIUnit.getDeliveryPath(Unit, Location)",13,5,9,10
"net.sf.freecol.server.ai.AIUnit.getIntermediatePath(Unit, Location)",0,1,1,1
net.sf.freecol.server.ai.AIUnit.getMission(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.getMission(Class<T>),1,1,1,2
net.sf.freecol.server.ai.AIUnit.getOwner(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getPioneerScore(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getScoutScore(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getTransportDestination(),2,1,4,4
net.sf.freecol.server.ai.AIUnit.getTransportLocatable(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.getTransportPriority(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.getTransportSource(),2,1,3,3
net.sf.freecol.server.ai.AIUnit.getTrivialTarget(),2,1,3,3
net.sf.freecol.server.ai.AIUnit.getUnit(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.hasCargo(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.hasDefendSettlementMission(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.hasMission(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.hasMission(Class<T>),0,1,1,1
net.sf.freecol.server.ai.AIUnit.hashCode(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.invalidReason(),3,1,3,3
net.sf.freecol.server.ai.AIUnit.isAvailableForWork(Colony),3,1,7,7
net.sf.freecol.server.ai.AIUnit.isCompleteWishRealizationMission(Colony),1,1,2,2
"net.sf.freecol.server.ai.AIUnit.joinTransport(Unit, Direction)",3,2,3,4
net.sf.freecol.server.ai.AIUnit.leaveTransport(),37,13,19,25
net.sf.freecol.server.ai.AIUnit.leaveTransport(Direction),4,2,4,5
net.sf.freecol.server.ai.AIUnit.move(Direction),1,1,3,3
net.sf.freecol.server.ai.AIUnit.moveToAmerica(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.moveToEurope(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.readAttributes(FreeColXMLReader),2,2,2,2
net.sf.freecol.server.ai.AIUnit.readChild(FreeColXMLReader),18,1,18,18
net.sf.freecol.server.ai.AIUnit.removeMission(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.removeTransportable(AIGoods),1,1,2,2
net.sf.freecol.server.ai.AIUnit.requestLocalRearrange(),2,1,5,5
net.sf.freecol.server.ai.AIUnit.setInitialized(),0,1,1,1
net.sf.freecol.server.ai.AIUnit.setMission(Mission),0,1,1,1
net.sf.freecol.server.ai.AIUnit.setTransportDestination(Location),0,1,1,1
net.sf.freecol.server.ai.AIUnit.setUnit(Unit),2,2,2,3
net.sf.freecol.server.ai.AIUnit.takeTransport(),4,1,4,4
net.sf.freecol.server.ai.AIUnit.toString(),1,1,2,2
net.sf.freecol.server.ai.AIUnit.tryPioneeringMission(LogBuilder),4,3,4,4
"net.sf.freecol.server.ai.AIUnit.trySomeUsefulMission(Colony, LogBuilder)",11,6,9,15
"net.sf.freecol.server.ai.AIUnit.tryWorkInsideColonyMission(AIColony, LogBuilder)",4,3,3,4
net.sf.freecol.server.ai.AIUnit.writeChildren(FreeColXMLWriter),2,1,4,4
net.sf.freecol.server.ai.AllTests.suite(),0,1,1,1
"net.sf.freecol.server.ai.Cargo.Cargo(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.Cargo.Cargo(TransportableAIObject, Unit, CargoPlan)",0,1,1,1
net.sf.freecol.server.ai.Cargo.CargoMode.isCollection(),1,1,1,2
"net.sf.freecol.server.ai.Cargo.CargoPlan.initialize(TransportableAIObject, Unit, Location, boolean)",25,9,11,21
"net.sf.freecol.server.ai.Cargo.canQueueAt(Unit, int, List<Cargo>)",6,3,3,5
net.sf.freecol.server.ai.Cargo.check(AIUnit),7,6,4,8
net.sf.freecol.server.ai.Cargo.clear(),0,1,1,1
net.sf.freecol.server.ai.Cargo.couldWrap(Cargo),1,1,3,3
net.sf.freecol.server.ai.Cargo.dump(),3,4,1,4
net.sf.freecol.server.ai.Cargo.getCarrier(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getCarrierTarget(),1,1,1,2
net.sf.freecol.server.ai.Cargo.getJoinDirection(),2,1,3,3
net.sf.freecol.server.ai.Cargo.getLeaveDirection(),4,2,3,5
net.sf.freecol.server.ai.Cargo.getMode(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getModeString(),1,1,2,2
net.sf.freecol.server.ai.Cargo.getNewSpace(),3,2,3,4
net.sf.freecol.server.ai.Cargo.getSpaceLeft(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getTransportTarget(),1,1,1,2
net.sf.freecol.server.ai.Cargo.getTransportable(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getTries(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getTurns(),0,1,1,1
net.sf.freecol.server.ai.Cargo.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.Cargo.hasPath(),0,1,1,1
net.sf.freecol.server.ai.Cargo.hasWrapped(),0,1,1,1
"net.sf.freecol.server.ai.Cargo.initialize(Location, boolean)",0,1,1,1
net.sf.freecol.server.ai.Cargo.isCarried(),1,1,2,2
net.sf.freecol.server.ai.Cargo.isCollectable(),3,2,3,4
net.sf.freecol.server.ai.Cargo.isDeliverable(),2,2,2,3
net.sf.freecol.server.ai.Cargo.isDelivered(),1,1,2,2
net.sf.freecol.server.ai.Cargo.isEuropeanTrade(GoodsType),1,1,3,3
net.sf.freecol.server.ai.Cargo.isFallback(),0,1,1,1
net.sf.freecol.server.ai.Cargo.isValid(),1,1,1,2
"net.sf.freecol.server.ai.Cargo.newCargo(TransportableAIObject, Unit)",0,1,1,1
"net.sf.freecol.server.ai.Cargo.newCargo(TransportableAIObject, Unit, Location, boolean)",1,2,1,2
"net.sf.freecol.server.ai.Cargo.readFromXML(AIMain, FreeColXMLReader)",9,2,4,6
net.sf.freecol.server.ai.Cargo.resetTries(),0,1,1,1
net.sf.freecol.server.ai.Cargo.retry(),0,1,1,1
net.sf.freecol.server.ai.Cargo.setSpaceLeft(int),0,1,1,1
net.sf.freecol.server.ai.Cargo.toShortString(),4,1,4,4
net.sf.freecol.server.ai.Cargo.toString(),5,1,3,6
net.sf.freecol.server.ai.Cargo.toXML(FreeColXMLWriter),4,1,5,5
net.sf.freecol.server.ai.Cargo.unwrap(),1,2,1,2
net.sf.freecol.server.ai.Cargo.update(),0,1,1,1
net.sf.freecol.server.ai.Cargo.wrap(Cargo),2,2,1,3
"net.sf.freecol.server.ai.ColonyPlan.BuildPlan.BuildPlan(BuildableType, double, double)",0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.BuildPlan.getValue(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.BuildPlan.toString(),0,1,1,1
"net.sf.freecol.server.ai.ColonyPlan.ColonyPlan(AIMain, Colony)",2,3,1,3
net.sf.freecol.server.ai.ColonyPlan.ProfileType.getProfileTypeFromSize(int),10,1,1,5
"net.sf.freecol.server.ai.ColonyPlan.assignWorkers(List<Unit>, boolean, LogBuilder)",154,32,59,66
net.sf.freecol.server.ai.ColonyPlan.createProductionMap(),10,1,5,5
net.sf.freecol.server.ai.ColonyPlan.findBuildPlan(BuildableType),0,1,1,1
"net.sf.freecol.server.ai.ColonyPlan.findPlan(GoodsType, List<WorkLocationPlan>)",0,1,1,1
"net.sf.freecol.server.ai.ColonyPlan.fullEquipUnit(Specification, Unit, Role, Colony)",0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.getAIMain(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.getBestBuildableType(),1,1,1,2
"net.sf.freecol.server.ai.ColonyPlan.getBestWorker(WorkLocation, GoodsType, List<Unit>)",36,8,19,28
net.sf.freecol.server.ai.ColonyPlan.getBuildableReport(),1,1,2,2
net.sf.freecol.server.ai.ColonyPlan.getBuildableTypes(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.getFoodPlans(),1,1,2,2
net.sf.freecol.server.ai.ColonyPlan.getPreferredProduction(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.getWorkPlans(),1,1,2,2
net.sf.freecol.server.ai.ColonyPlan.locationDescription(Location),1,1,2,2
"net.sf.freecol.server.ai.ColonyPlan.prioritize(BuildableType, double, double)",2,3,2,3
"net.sf.freecol.server.ai.ColonyPlan.prioritizeProduction(BuildableType, GoodsType)",17,5,7,13
"net.sf.freecol.server.ai.ColonyPlan.refine(BuildableType, LogBuilder)",27,7,11,14
net.sf.freecol.server.ai.ColonyPlan.spec(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.toString(),2,1,3,3
net.sf.freecol.server.ai.ColonyPlan.update(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlan.updateBuildableTypes(),116,3,30,48
"net.sf.freecol.server.ai.ColonyPlan.updateGoodsTypeLists(Map<GoodsType, Map<WorkLocation, Integer>>)",20,1,15,15
"net.sf.freecol.server.ai.ColonyPlan.updatePlans(Map<GoodsType, Map<WorkLocation, Integer>>)",7,1,6,7
"net.sf.freecol.server.ai.ColonyPlan.updateProductionList(Map<GoodsType, Map<WorkLocation, Integer>>)",12,1,8,8
"net.sf.freecol.server.ai.ColonyPlan.updateRawMaterials(Map<GoodsType, Map<WorkLocation, Integer>>)",29,3,12,16
net.sf.freecol.server.ai.ColonyPlanTest.buildMap(boolean),1,1,2,2
"net.sf.freecol.server.ai.ColonyPlanTest.shouldProduce(ColonyPlan, GoodsType)",4,3,3,4
net.sf.freecol.server.ai.ColonyPlanTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlanTest.testBestImprovements(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlanTest.testGetBestWorker(),3,3,2,3
net.sf.freecol.server.ai.ColonyPlanTest.testNoBuildRawMatTiles(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlanTest.testReqLumberAndHammersForBuild(),0,1,1,1
net.sf.freecol.server.ai.ColonyPlanTest.testReqOreAndToolsWithEnoughHammersForBuild(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testEuropeanMeetsIndianSettlement(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testEuropeanMeetsNative(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testNativeMeetsColony(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testNativeMeetsEuropean(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testNativeMeetsIndianSettlement(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testNativeMeetsNative(),0,1,1,1
net.sf.freecol.server.ai.ContactTest.testShipMeetsShip(),0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.EuropeanAIPlayer(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.EuropeanAIPlayer(AIMain, Player)",0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptDiplomaticTrade(DiplomaticTrade),78,5,20,29
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptMercenaries(),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.acceptTax(int),19,1,11,15
"net.sf.freecol.server.ai.EuropeanAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",14,4,5,6
"net.sf.freecol.server.ai.EuropeanAIPlayer.allocateTransportables(List<TransportableAIObject>, List<TransportMission>, LogBuilder)",40,8,9,15
net.sf.freecol.server.ai.EuropeanAIPlayer.bringGifts(LogBuilder),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.buildTipMap(LogBuilder),20,1,12,12
net.sf.freecol.server.ai.EuropeanAIPlayer.buildTransportMaps(LogBuilder),40,3,20,22
net.sf.freecol.server.ai.EuropeanAIPlayer.buildWishMaps(LogBuilder),34,1,16,16
net.sf.freecol.server.ai.EuropeanAIPlayer.buildersNeeded(),10,6,2,9
net.sf.freecol.server.ai.EuropeanAIPlayer.buyArtillery(),4,4,2,5
net.sf.freecol.server.ai.EuropeanAIPlayer.buyDragoon(),8,6,3,9
net.sf.freecol.server.ai.EuropeanAIPlayer.buyShip(),5,4,4,8
net.sf.freecol.server.ai.EuropeanAIPlayer.buyUnitsInEurope(LogBuilder),42,20,15,27
"net.sf.freecol.server.ai.EuropeanAIPlayer.changeNeedWagon(Tile, int)",8,2,4,5
net.sf.freecol.server.ai.EuropeanAIPlayer.cheat(LogBuilder),114,14,52,62
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatGold(int, LogBuilder)",1,1,2,2
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatUnit(List<RandomChoice<UnitType>>, String, LogBuilder)",1,1,2,2
"net.sf.freecol.server.ai.EuropeanAIPlayer.cheatUnit(UnitType, String, LogBuilder)",2,2,1,3
net.sf.freecol.server.ai.EuropeanAIPlayer.checkTransport(TransportableAIObject),3,3,2,4
net.sf.freecol.server.ai.EuropeanAIPlayer.claimTransportable(TransportableAIObject),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.completeWish(Wish),7,3,5,5
"net.sf.freecol.server.ai.EuropeanAIPlayer.consumeGoodsWish(AIGoods, GoodsWish)",1,1,2,2
"net.sf.freecol.server.ai.EuropeanAIPlayer.consumeWorkerWish(AIUnit, WorkerWish)",1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.demandTribute(LogBuilder),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.determineStance(Player),9,1,4,5
net.sf.freecol.server.ai.EuropeanAIPlayer.determineStances(LogBuilder),9,1,6,6
"net.sf.freecol.server.ai.EuropeanAIPlayer.doMissions(List<AIUnit>, LogBuilder)",22,6,15,16
net.sf.freecol.server.ai.EuropeanAIPlayer.getBadlyDefended(),0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBestGoodsWish(AIUnit, GoodsType)",3,1,3,3
net.sf.freecol.server.ai.EuropeanAIPlayer.getBestPlan(Tile),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.getBestPlanTile(Colony),1,1,2,2
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBestWorkerWish(AIUnit, UnitType)",16,4,5,9
"net.sf.freecol.server.ai.EuropeanAIPlayer.getBuildColonyMission(AIUnit, Location)",3,2,3,4
net.sf.freecol.server.ai.EuropeanAIPlayer.getCashInTreasureTrainMission(AIUnit),2,2,2,3
"net.sf.freecol.server.ai.EuropeanAIPlayer.getDefendSettlementMission(AIUnit, boolean, boolean)",18,6,6,10
"net.sf.freecol.server.ai.EuropeanAIPlayer.getGoodsWishesAt(Location, GoodsType)",2,1,3,3
net.sf.freecol.server.ai.EuropeanAIPlayer.getMissionaryMission(AIUnit),2,3,2,3
net.sf.freecol.server.ai.EuropeanAIPlayer.getNationSummary(Player),1,2,1,2
net.sf.freecol.server.ai.EuropeanAIPlayer.getNavalStrengthRatio(),12,4,3,8
net.sf.freecol.server.ai.EuropeanAIPlayer.getNeededWagons(Tile),6,4,3,4
"net.sf.freecol.server.ai.EuropeanAIPlayer.getPioneeringMission(AIUnit, Location)",6,3,5,6
"net.sf.freecol.server.ai.EuropeanAIPlayer.getPrivateerMission(AIUnit, Location)",3,2,3,4
net.sf.freecol.server.ai.EuropeanAIPlayer.getScoutingMission(AIUnit),5,3,4,5
net.sf.freecol.server.ai.EuropeanAIPlayer.getSimpleMission(AIUnit),316,1,41,43
net.sf.freecol.server.ai.EuropeanAIPlayer.getStrengthRatio(Player),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.getTransportMission(AIUnit),1,2,1,2
net.sf.freecol.server.ai.EuropeanAIPlayer.getTransportables(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.getUrgentTransportables(),0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWishRealizationMission(AIUnit, WorkerWish)",3,3,2,4
net.sf.freecol.server.ai.EuropeanAIPlayer.getWishes(),0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWorkInsideColonyMission(AIUnit, AIColony)",3,2,3,4
"net.sf.freecol.server.ai.EuropeanAIPlayer.getWorkerWishesAt(Location, UnitType)",2,1,3,3
"net.sf.freecol.server.ai.EuropeanAIPlayer.giveNormalMissions(LogBuilder, List<AIUnit>)",165,39,73,86
"net.sf.freecol.server.ai.EuropeanAIPlayer.handleTrade(NativeTradeAction, NativeTrade)",0,1,1,1
"net.sf.freecol.server.ai.EuropeanAIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",1,1,1,2
net.sf.freecol.server.ai.EuropeanAIPlayer.initializeFromSpecification(Specification),1,2,1,2
net.sf.freecol.server.ai.EuropeanAIPlayer.initializeMissions(LogBuilder),35,13,10,16
net.sf.freecol.server.ai.EuropeanAIPlayer.isAggressive(),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.isLikesAttackingNatives(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.needsMoreArtillery(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.needsMoreDragoons(),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.peaceHolds(Player),9,2,5,8
net.sf.freecol.server.ai.EuropeanAIPlayer.pioneersNeeded(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.reallyNeedsMoreArtillery(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.reallyNeedsMoreDragoons(),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.rearrangeColonies(LogBuilder),1,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.recruitAIUnitInEurope(int),8,2,6,7
"net.sf.freecol.server.ai.EuropeanAIPlayer.rejectAgreement(TradeItem, DiplomaticTrade)",1,2,1,2
net.sf.freecol.server.ai.EuropeanAIPlayer.removeAIColony(AIColony),17,4,10,10
net.sf.freecol.server.ai.EuropeanAIPlayer.removeAIObject(AIObject),2,1,2,2
net.sf.freecol.server.ai.EuropeanAIPlayer.removeTileImprovementPlan(TileImprovementPlan),5,4,3,5
net.sf.freecol.server.ai.EuropeanAIPlayer.requestsTransport(TransportableAIObject),1,1,4,4
net.sf.freecol.server.ai.EuropeanAIPlayer.scoutsNeeded(),0,1,1,1
net.sf.freecol.server.ai.EuropeanAIPlayer.selectFoundingFather(List<FoundingFather>),7,4,2,5
net.sf.freecol.server.ai.EuropeanAIPlayer.startWorking(),20,7,10,13
"net.sf.freecol.server.ai.EuropeanAIPlayer.suppressEuropeanTrade(GoodsType, LogBuilder)",20,1,14,14
net.sf.freecol.server.ai.EuropeanAIPlayer.trainAIUnitInEurope(UnitType),6,3,4,6
net.sf.freecol.server.ai.EuropeanAIPlayer.updateTipMap(AIColony),1,1,2,2
"net.sf.freecol.server.ai.EuropeanAIPlayer.updateTransport(AIUnit, Location, LogBuilder)",7,1,7,7
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, Location, int, int, GoodsType)",1,2,1,2
"net.sf.freecol.server.ai.GoodsWish.GoodsWish(AIMain, String)",0,1,1,1
"net.sf.freecol.server.ai.GoodsWish.checkIntegrity(boolean, LogBuilder)",2,1,3,3
net.sf.freecol.server.ai.GoodsWish.equals(Object),2,2,3,4
net.sf.freecol.server.ai.GoodsWish.getGoodsAmount(),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.getGoodsType(),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.hashCode(),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.server.ai.GoodsWish.satisfiedBy(T),1,1,2,2
net.sf.freecol.server.ai.GoodsWish.satisfiedBy(Unit),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.setGoodsAmount(int),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.setInitialized(),1,1,2,2
net.sf.freecol.server.ai.GoodsWish.shouldBeStored(),0,1,1,1
net.sf.freecol.server.ai.GoodsWish.toString(),1,1,2,2
"net.sf.freecol.server.ai.GoodsWish.update(GoodsType, int, int)",1,1,2,2
net.sf.freecol.server.ai.GoodsWish.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.server.ai.MissionAIPlayer.MissionAIPlayer(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.MissionAIPlayer.MissionAIPlayer(AIMain, Player)",0,1,1,1
net.sf.freecol.server.ai.MissionAIPlayer.addAIUnit(AIUnit),0,1,1,1
net.sf.freecol.server.ai.MissionAIPlayer.clearAIUnits(),0,1,1,1
"net.sf.freecol.server.ai.MissionAIPlayer.doMissions(List<AIUnit>, LogBuilder)",9,3,6,7
net.sf.freecol.server.ai.MissionAIPlayer.getAIUnits(),1,1,2,2
net.sf.freecol.server.ai.MissionAIPlayer.getDefendCurrentSettlementMission(AIUnit),4,2,4,5
"net.sf.freecol.server.ai.MissionAIPlayer.getDefendSettlementMission(AIUnit, Settlement)",1,1,2,2
net.sf.freecol.server.ai.MissionAIPlayer.getIdleAtSettlementMission(AIUnit),1,1,2,2
"net.sf.freecol.server.ai.MissionAIPlayer.getSeekAndDestroyMission(AIUnit, Location)",2,1,3,3
"net.sf.freecol.server.ai.MissionAIPlayer.getSeekAndDestroyMission(AIUnit, int)",2,1,3,3
net.sf.freecol.server.ai.MissionAIPlayer.getSettlementDefenders(Settlement),4,1,4,5
net.sf.freecol.server.ai.MissionAIPlayer.getWanderHostileMission(AIUnit),1,1,2,2
"net.sf.freecol.server.ai.MissionAIPlayer.isTargetValidForSeekAndDestroy(Unit, Tile)",13,8,6,11
"net.sf.freecol.server.ai.MissionAIPlayer.logMissions(Map<Unit, String>, LogBuilder)",7,1,4,5
net.sf.freecol.server.ai.MissionAIPlayer.removeAIObject(AIObject),2,1,2,2
net.sf.freecol.server.ai.MissionAIPlayer.removeAIUnit(AIUnit),0,1,1,1
net.sf.freecol.server.ai.MissionAssignmentTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.MissionAssignmentTest.testAssignDefendSettlementMission(),0,1,1,1
net.sf.freecol.server.ai.MissionAssignmentTest.testImpossibleConditionsForTargetSelection(),0,1,1,1
net.sf.freecol.server.ai.MissionAssignmentTest.testIsTargetValidForSeekAndDestroy(),0,1,1,1
net.sf.freecol.server.ai.MissionAssignmentTest.testSecureIndianSettlementMission(),6,3,4,6
net.sf.freecol.server.ai.MissionAssignmentTest.testSecureIndianSettlementMissionIgnoreNavalThreat(),5,3,4,5
"net.sf.freecol.server.ai.NativeAIPlayer.NativeAIPlayer(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.NativeAIPlayer.NativeAIPlayer(AIMain, Player)",0,1,1,1
net.sf.freecol.server.ai.NativeAIPlayer.abortInvalidMissions(),5,1,4,4
"net.sf.freecol.server.ai.NativeAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",7,1,7,7
"net.sf.freecol.server.ai.NativeAIPlayer.bringGifts(int[], LogBuilder)",35,13,18,23
net.sf.freecol.server.ai.NativeAIPlayer.completeWish(Wish),0,1,1,1
"net.sf.freecol.server.ai.NativeAIPlayer.demandTribute(int[], LogBuilder)",39,10,19,22
net.sf.freecol.server.ai.NativeAIPlayer.determineStances(LogBuilder),4,1,4,4
"net.sf.freecol.server.ai.NativeAIPlayer.equipBraves(IndianSettlement, LogBuilder)",7,1,5,5
net.sf.freecol.server.ai.NativeAIPlayer.getNeededWagons(Tile),0,1,1,1
net.sf.freecol.server.ai.NativeAIPlayer.getShipTradePenalties(boolean),1,1,1,2
net.sf.freecol.server.ai.NativeAIPlayer.giveNormalMissions(LogBuilder),41,13,20,23
"net.sf.freecol.server.ai.NativeAIPlayer.handleTrade(NativeTradeAction, NativeTrade)",39,13,4,30
"net.sf.freecol.server.ai.NativeAIPlayer.indianDemand(Unit, Colony, GoodsType, int, IndianDemandAction)",4,1,5,5
net.sf.freecol.server.ai.NativeAIPlayer.initializeMissions(LogBuilder),11,1,6,6
net.sf.freecol.server.ai.NativeAIPlayer.pioneersNeeded(),0,1,1,1
net.sf.freecol.server.ai.NativeAIPlayer.scoutsNeeded(),0,1,1,1
"net.sf.freecol.server.ai.NativeAIPlayer.secureIndianSettlement(IndianSettlement, LogBuilder)",60,7,34,37
"net.sf.freecol.server.ai.NativeAIPlayer.secureSettlements(int[], LogBuilder)",6,1,5,5
net.sf.freecol.server.ai.NativeAIPlayer.startWorking(),5,1,4,4
"net.sf.freecol.server.ai.NativeAIPlayer.updateTrade(NativeTrade, int)",16,1,11,13
"net.sf.freecol.server.ai.REFAIPlayer.REFAIPlayer(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.REFAIPlayer.REFAIPlayer(AIMain, Player)",0,1,1,1
"net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.REFNavyGoalDecider(Player, Set<Unit>)",0,1,1,1
"net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.check(Unit, PathNode)",3,2,7,7
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.getGoal(),0,1,1,1
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider.hasSubGoals(),0,1,1,1
"net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.TargetTuple(Colony, PathNode, double)",6,4,3,4
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.compareTo(TargetTuple),0,1,1,1
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.equals(Object),2,2,3,3
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple.hashCode(),0,1,1,1
"net.sf.freecol.server.ai.REFAIPlayer.adjustMission(AIUnit, PathNode, Class, int)",31,11,10,14
net.sf.freecol.server.ai.REFAIPlayer.determineStance(Player),8,1,4,5
"net.sf.freecol.server.ai.REFAIPlayer.findColonyTargets(AIUnit, AIUnit)",1,1,2,2
"net.sf.freecol.server.ai.REFAIPlayer.findColonyTargets(AIUnit, boolean, AIUnit)",18,2,5,9
"net.sf.freecol.server.ai.REFAIPlayer.giveNormalMissions(LogBuilder, List<AIUnit>)",179,33,68,77
net.sf.freecol.server.ai.REFAIPlayer.initialize(boolean),78,14,32,36
"net.sf.freecol.server.ai.REFAIPlayer.requireTransports(int, List<AIUnit>, List<AIUnit>, LogBuilder)",18,5,11,12
net.sf.freecol.server.ai.REFAIPlayer.startWorking(),14,2,8,9
net.sf.freecol.server.ai.REFTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.REFTest.testAddToREF(),7,1,3,4
net.sf.freecol.server.ai.REFTest.testCreateREFPlayer(),1,1,2,2
net.sf.freecol.server.ai.StandardAIPlayerTest.setupNativeDragoons(),4,1,4,4
net.sf.freecol.server.ai.StandardAIPlayerTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.StandardAIPlayerTest.testEquipBraves(),6,1,3,5
net.sf.freecol.server.ai.StandardAIPlayerTest.testEquipBravesNotEnoughReqGoods(),10,1,5,7
net.sf.freecol.server.ai.TensionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.TensionTest.testTension(),5,1,4,4
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, String)",0,1,1,1
"net.sf.freecol.server.ai.TileImprovementPlan.TileImprovementPlan(AIMain, Tile, TileImprovementType, int)",0,1,1,1
"net.sf.freecol.server.ai.TileImprovementPlan.checkIntegrity(boolean, LogBuilder)",3,1,4,4
net.sf.freecol.server.ai.TileImprovementPlan.dispose(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.equals(Object),2,2,4,5
"net.sf.freecol.server.ai.TileImprovementPlan.getBestTileImprovementType(Tile, GoodsType)",3,1,5,6
net.sf.freecol.server.ai.TileImprovementPlan.getPioneer(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.getTarget(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.getType(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.hashCode(),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.isComplete(),1,1,2,2
net.sf.freecol.server.ai.TileImprovementPlan.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.server.ai.TileImprovementPlan.setInitialized(),1,1,2,2
net.sf.freecol.server.ai.TileImprovementPlan.setPioneer(AIUnit),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.setType(TileImprovementType),0,1,1,1
net.sf.freecol.server.ai.TileImprovementPlan.toString(),2,1,3,3
net.sf.freecol.server.ai.TileImprovementPlan.toXML(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.TileImprovementPlan.update(GoodsType),1,2,1,2
net.sf.freecol.server.ai.TileImprovementPlan.validate(),5,3,6,6
net.sf.freecol.server.ai.TileImprovementPlan.writeAttributes(FreeColXMLWriter),2,1,3,3
"net.sf.freecol.server.ai.TransportableAIObject.TransportableAIObject(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.TransportableAIObject.TransportableAIObject(AIMain, String)",0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.changeTransport(AIUnit),11,5,8,10
net.sf.freecol.server.ai.TransportableAIObject.dropTransport(),7,1,5,5
net.sf.freecol.server.ai.TransportableAIObject.equals(Object),2,2,2,3
net.sf.freecol.server.ai.TransportableAIObject.getLocation(),1,1,2,2
net.sf.freecol.server.ai.TransportableAIObject.getSpaceTaken(),1,1,2,2
net.sf.freecol.server.ai.TransportableAIObject.getTransport(),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.getTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.hashCode(),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.incrementTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.server.ai.TransportableAIObject.setTransport(AIUnit),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.setTransportPriority(int),0,1,1,1
net.sf.freecol.server.ai.TransportableAIObject.writeAttributes(FreeColXMLWriter),4,1,4,4
net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain),0,1,1,1
"net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.ValuedAIObject.ValuedAIObject(AIMain, String)",0,1,1,1
net.sf.freecol.server.ai.ValuedAIObject.equals(Object),2,2,3,3
net.sf.freecol.server.ai.ValuedAIObject.getValue(),0,1,1,1
net.sf.freecol.server.ai.ValuedAIObject.hashCode(),0,1,1,1
net.sf.freecol.server.ai.ValuedAIObject.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.ValuedAIObject.setValue(int),0,1,1,1
net.sf.freecol.server.ai.ValuedAIObject.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.server.ai.Wish.Wish(AIMain, FreeColXMLReader)",1,1,2,2
"net.sf.freecol.server.ai.Wish.Wish(AIMain, String)",0,1,1,1
"net.sf.freecol.server.ai.Wish.checkIntegrity(boolean, LogBuilder)",3,1,4,4
net.sf.freecol.server.ai.Wish.dispose(),0,1,1,1
net.sf.freecol.server.ai.Wish.equals(Object),2,2,3,4
net.sf.freecol.server.ai.Wish.getDestination(),0,1,1,1
net.sf.freecol.server.ai.Wish.getDestinationAIColony(),1,1,2,2
net.sf.freecol.server.ai.Wish.getTransportable(),0,1,1,1
net.sf.freecol.server.ai.Wish.hashCode(),0,1,1,1
net.sf.freecol.server.ai.Wish.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.Wish.setTransportable(TransportableAIObject),0,1,1,1
net.sf.freecol.server.ai.Wish.shouldBeStored(),0,1,1,1
net.sf.freecol.server.ai.Wish.writeAttributes(FreeColXMLWriter),3,1,3,3
"net.sf.freecol.server.ai.WorkLocationPlan.WorkLocationPlan(AIMain, WorkLocation, GoodsType)",0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.getGoodsType(),0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.getWorkLocation(),0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.isFoodPlan(),0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.setGoodsType(GoodsType),0,1,1,1
net.sf.freecol.server.ai.WorkLocationPlan.setInitialized(),1,1,2,2
net.sf.freecol.server.ai.WorkLocationPlan.toString(),0,1,1,1
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, Location, int, UnitType, boolean)",1,2,1,2
"net.sf.freecol.server.ai.WorkerWish.WorkerWish(AIMain, String)",0,1,1,1
"net.sf.freecol.server.ai.WorkerWish.checkIntegrity(boolean, LogBuilder)",1,1,2,2
net.sf.freecol.server.ai.WorkerWish.equals(Object),2,2,3,4
net.sf.freecol.server.ai.WorkerWish.getUnitType(),0,1,1,1
net.sf.freecol.server.ai.WorkerWish.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.WorkerWish.hashCode(),1,1,1,2
net.sf.freecol.server.ai.WorkerWish.readAttributes(FreeColXMLReader),1,1,2,2
net.sf.freecol.server.ai.WorkerWish.satisfiedBy(T),0,1,1,1
net.sf.freecol.server.ai.WorkerWish.satisfiedBy(Unit),1,1,2,2
net.sf.freecol.server.ai.WorkerWish.setInitialized(),1,1,1,2
net.sf.freecol.server.ai.WorkerWish.toString(),2,1,2,3
"net.sf.freecol.server.ai.WorkerWish.update(UnitType, boolean, int)",1,1,2,2
net.sf.freecol.server.ai.WorkerWish.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.server.ai.military.DefensiveMap.DefensiveMap(Map<AIColony, DefensiveZone>, Map<String, DefensiveZone>)",0,1,1,1
"net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.SearchNode(Tile, SearchNode, int, int, DefensiveZone, int)",0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.getCost(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode.getTile(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.createDefensiveMap(EuropeanAIPlayer),38,11,15,17
net.sf.freecol.server.ai.military.DefensiveMap.getAttackedColonies(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getAttackedDefensiveZones(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getColoniesExposedLand(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getColoniesExposedWater(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getDefensiveZone(Tile),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getDefensiveZones(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveMap.getThreatenedColonies(),1,1,2,2
net.sf.freecol.server.ai.military.DefensiveMap.toString(),1,1,2,2
net.sf.freecol.server.ai.military.DefensiveZone.DefensiveZone(AIColony),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.addAllPotentialEnemies(Set<Unit>),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.addNeighbour(DefensiveZone),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.addPotentialEnemySettlement(Settlement),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.enemiesOnly(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.equals(Object),3,4,1,4
net.sf.freecol.server.ai.military.DefensiveZone.getAiColony(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.getEnemies(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.getNeighbours(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.getNumberOfMilitaryEnemies(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.getNumberOfPotentialMilitaryEnemies(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.getPlayer(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.hashCode(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.isEnemiesInNeighbour(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.isExposed(),1,1,1,2
net.sf.freecol.server.ai.military.DefensiveZone.isExposedLand(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.isExposedWater(),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.setEnemiesInNeighbour(boolean),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.setExposedLand(boolean),0,1,1,1
net.sf.freecol.server.ai.military.DefensiveZone.setExposedWater(boolean),0,1,1,1
"net.sf.freecol.server.ai.military.MilitaryCoordinator.MilitaryCoordinator(EuropeanAIPlayer, Set<AIUnit>)",2,1,3,3
net.sf.freecol.server.ai.military.MilitaryCoordinator.always(),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.assignDefendClosestColony(Set<AIUnit>),3,1,3,3
net.sf.freecol.server.ai.military.MilitaryCoordinator.assignWanderHostile(),1,1,2,2
"net.sf.freecol.server.ai.military.MilitaryCoordinator.attackEnemySettlements(Set<AIUnit>, Set<AIUnit>)",14,7,4,9
"net.sf.freecol.server.ai.military.MilitaryCoordinator.counterattackAllEnemyUnitsReachableInTurns(Set<AIUnit>, int)",22,8,6,9
"net.sf.freecol.server.ai.military.MilitaryCoordinator.counterattackEnemyValuableUnitsReachableInTurns(Set<AIUnit>, int)",44,13,11,15
net.sf.freecol.server.ai.military.MilitaryCoordinator.determineMissions(),4,1,4,4
"net.sf.freecol.server.ai.military.MilitaryCoordinator.findUnitClosestToColony(AIColony, Set<AIUnit>)",4,3,3,4
"net.sf.freecol.server.ai.military.MilitaryCoordinator.findUnitInColony(AIColony, Set<AIUnit>)",1,1,2,2
net.sf.freecol.server.ai.military.MilitaryCoordinator.getOurColoniesSortedByValue(),0,1,1,1
"net.sf.freecol.server.ai.military.MilitaryCoordinator.getTurnsToReach(Unit, Location)",1,2,1,2
net.sf.freecol.server.ai.military.MilitaryCoordinator.identitySet(Collection<T>),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.isArtillery(Unit),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.isDragoon(Unit),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.isUnitHandledByMilitaryCoordinator(),1,1,3,3
"net.sf.freecol.server.ai.military.MilitaryCoordinator.keepUnitsInColonies(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>)",0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxArtilleries(int),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxDefenders(int),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.maxDragoons(int),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.neitherArtilleryNorDragoons(Set<AIUnit>),1,1,2,2
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyArtillery(Set<AIUnit>),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyArtilleryUnits(Set<Unit>),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyDragoons(Set<AIUnit>),0,1,1,1
net.sf.freecol.server.ai.military.MilitaryCoordinator.onlyUnprotectedUnarmedSoldierUnits(Set<Unit>),2,1,3,3
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeDefender(AIUnit, AIColony)",0,1,1,1
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeUnit(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>, boolean)",8,4,3,5
"net.sf.freecol.server.ai.military.MilitaryCoordinator.placeUnitsInColonies(List<AIColony>, Set<AIUnit>, Function<List<AIUnit>, Boolean>)",0,1,1,1
"net.sf.freecol.server.ai.military.MilitaryCoordinator.transportMilitaryUnitsFromEurope(AIColony, Set<AIUnit>)",3,3,2,3
net.sf.freecol.server.ai.mission.AllTests.suite(),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.BuildColonyMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.BuildColonyMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.BuildColonyMission.doMission(LogBuilder),76,22,35,38
"net.sf.freecol.server.ai.mission.BuildColonyMission.extractTarget(AIUnit, PathNode)",4,2,2,4
"net.sf.freecol.server.ai.mission.BuildColonyMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.BuildColonyMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.BuildColonyMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.BuildColonyMission.getColonyValue(Tile),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.getGoalDecider(AIUnit, boolean)",6,3,3,4
net.sf.freecol.server.ai.mission.BuildColonyMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.BuildColonyMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidColonyReason(AIUnit, Colony)",0,1,1,1
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.invalidTileReason(AIUnit, Tile)",1,2,1,2
net.sf.freecol.server.ai.mission.BuildColonyMission.invalidUnitReason(AIUnit),6,1,3,4
net.sf.freecol.server.ai.mission.BuildColonyMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.BuildColonyMission.scorePath(AIUnit, PathNode)",2,2,2,3
net.sf.freecol.server.ai.mission.BuildColonyMission.setTarget(Location),4,1,3,5
net.sf.freecol.server.ai.mission.BuildColonyMission.writeAttributes(FreeColXMLWriter),3,1,3,3
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.CashInTreasureTrainMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.CashInTreasureTrainMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.assignCarrier(LogBuilder),5,4,5,6
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.doMission(LogBuilder),19,9,13,15
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.extractTarget(AIUnit, PathNode)",6,2,4,6
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.findTargetPath(AIUnit, int, boolean)",5,3,4,5
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getBaseTransportPriority(),0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getGoalDecider(AIUnit, boolean)",8,3,5,6
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidColonyReason(AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidEuropeReason(AIUnit, Europe)",0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidFullColonyReason(AIUnit, Colony)",3,1,2,3
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.invalidUnitReason(AIUnit),4,2,2,4
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.scorePath(AIUnit, PathNode)",3,2,4,5
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.setTarget(Location),2,1,1,4
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.DefendSettlementMission.DefendSettlementMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.DefendSettlementMission.DefendSettlementMission(AIMain, AIUnit, Settlement)",0,1,1,1
net.sf.freecol.server.ai.mission.DefendSettlementMission.doMission(LogBuilder),39,15,23,31
"net.sf.freecol.server.ai.mission.DefendSettlementMission.extractTarget(AIUnit, PathNode)",2,2,1,3
"net.sf.freecol.server.ai.mission.DefendSettlementMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.DefendSettlementMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.DefendSettlementMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.DefendSettlementMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.DefendSettlementMission.getGoalDecider(AIUnit),2,2,1,2
net.sf.freecol.server.ai.mission.DefendSettlementMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.DefendSettlementMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidMissionReason(AIUnit),5,5,2,6
"net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidMissionReason(AIUnit, Location)",3,1,3,3
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidSettlementReason(AIUnit, Settlement)",0,1,1,1
net.sf.freecol.server.ai.mission.DefendSettlementMission.invalidUnitReason(AIUnit),2,2,1,3
net.sf.freecol.server.ai.mission.DefendSettlementMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.DefendSettlementMission.scorePath(AIUnit, PathNode)",1,1,2,2
net.sf.freecol.server.ai.mission.DefendSettlementMission.setTarget(Location),2,1,1,3
net.sf.freecol.server.ai.mission.DefendSettlementMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.EscortUnitMission.EscortUnitMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.EscortUnitMission.EscortUnitMission(AIMain, AIUnit, Unit)",0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.doMission(LogBuilder),5,5,6,8
net.sf.freecol.server.ai.mission.EscortUnitMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.getTransportDestination(),3,2,1,4
net.sf.freecol.server.ai.mission.EscortUnitMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.EscortUnitMission.invalidMissionReason(AIUnit, Location)",1,2,1,2
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.EscortUnitMission.invalidTargetReason(AIUnit, Unit)",7,2,3,5
net.sf.freecol.server.ai.mission.EscortUnitMission.invalidUnitReason(AIUnit),3,1,2,3
net.sf.freecol.server.ai.mission.EscortUnitMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.EscortUnitMission.setTarget(Location),2,2,1,3
net.sf.freecol.server.ai.mission.EscortUnitMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.IdleAtSettlementMission.IdleAtSettlementMission(AIMain, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.mission.IdleAtSettlementMission.IdleAtSettlementMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.doMission(LogBuilder),4,7,6,8
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.findTarget(),2,2,2,3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getTarget(),1,1,2,2
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.isOneTime(),0,1,1,1
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.isSafe(),1,1,3,3
net.sf.freecol.server.ai.mission.IdleAtSettlementMission.setTarget(Location),0,1,1,1
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.IndianBringGiftMission(AIMain, AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.IndianBringGiftMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.doMission(LogBuilder),22,14,16,22
net.sf.freecol.server.ai.mission.IndianBringGiftMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getColony(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getTarget(),1,1,2,2
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getTransportDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.hasGift(),0,1,1,1
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidColonyReason(AIUnit, Colony)",5,4,2,6
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.invalidUnitReason(AIUnit),4,1,3,4
net.sf.freecol.server.ai.mission.IndianBringGiftMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.IndianBringGiftMission.setTarget(Location),1,1,1,2
net.sf.freecol.server.ai.mission.IndianBringGiftMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.IndianDemandMission.IndianDemandMission(AIMain, AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.mission.IndianDemandMission.IndianDemandMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.IndianDemandMission.capAmount(int, int)",0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.doMission(LogBuilder),46,15,23,29
net.sf.freecol.server.ai.mission.IndianDemandMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.getHome(AIUnit),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.getTarget(),2,1,2,3
net.sf.freecol.server.ai.mission.IndianDemandMission.getTransportDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.hasMissionTribute(AIUnit),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.hasTribute(),0,1,1,1
"net.sf.freecol.server.ai.mission.IndianDemandMission.invalidColonyReason(AIUnit, Colony)",5,4,2,6
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.IndianDemandMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.invalidUnitReason(AIUnit),4,1,3,4
net.sf.freecol.server.ai.mission.IndianDemandMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.selectGoods(Colony),13,1,11,11
net.sf.freecol.server.ai.mission.IndianDemandMission.setSucceeded(boolean),0,1,1,1
net.sf.freecol.server.ai.mission.IndianDemandMission.setTarget(Location),1,1,1,2
net.sf.freecol.server.ai.mission.IndianDemandMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.Mission.Mission(AIMain, AIUnit)",2,1,3,3
net.sf.freecol.server.ai.mission.Mission.dispose(),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.findCircleTarget(AIUnit, GoalDecider, int, boolean)",5,3,2,4
"net.sf.freecol.server.ai.mission.Mission.followMapPath(PathNode, LogBuilder)",16,9,8,9
net.sf.freecol.server.ai.mission.Mission.getAIPlayer(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.getAIRandom(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.getAIUnit(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.getBestSettlement(Player),5,1,2,3
net.sf.freecol.server.ai.mission.Mission.getEuropeanAIPlayer(),1,2,1,2
net.sf.freecol.server.ai.mission.Mission.getPlayer(),1,1,2,2
net.sf.freecol.server.ai.mission.Mission.getTransportDestination(),6,1,3,4
net.sf.freecol.server.ai.mission.Mission.getUnit(),1,1,2,2
net.sf.freecol.server.ai.mission.Mission.invalidAIUnitReason(AIUnit),3,1,2,3
"net.sf.freecol.server.ai.mission.Mission.invalidAttackReason(AIUnit, Player)",10,1,7,8
net.sf.freecol.server.ai.mission.Mission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.invalidMissionReason(AIUnit, Location)",1,1,2,2
net.sf.freecol.server.ai.mission.Mission.invalidNewMissionReason(AIUnit),4,1,4,5
net.sf.freecol.server.ai.mission.Mission.invalidTargetReason(Location),3,1,2,3
"net.sf.freecol.server.ai.mission.Mission.invalidTargetReason(Location, Player)",8,1,5,6
net.sf.freecol.server.ai.mission.Mission.invalidTransportableReason(TransportableAIObject),15,9,11,15
net.sf.freecol.server.ai.mission.Mission.invalidUnitReason(Unit),10,1,4,5
net.sf.freecol.server.ai.mission.Mission.isOneTime(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.isTargetReason(String),1,1,2,2
net.sf.freecol.server.ai.mission.Mission.isValid(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.lbAt(LogBuilder),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.lbAttack(LogBuilder, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.Mission.lbDodge(LogBuilder),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.lbDone(LogBuilder, boolean, Object...)",1,1,2,2
"net.sf.freecol.server.ai.mission.Mission.lbDrop(LogBuilder, Object...)",1,1,2,2
"net.sf.freecol.server.ai.mission.Mission.lbFail(LogBuilder, boolean, Object...)",1,1,2,2
"net.sf.freecol.server.ai.mission.Mission.lbMove(LogBuilder, MoveType)",0,1,1,1
net.sf.freecol.server.ai.mission.Mission.lbRetarget(LogBuilder),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.lbWait(LogBuilder, Object...)",0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.moveRandomly(String, Direction)",8,4,6,9
net.sf.freecol.server.ai.mission.Mission.moveRandomlyTurn(String),1,1,1,2
net.sf.freecol.server.ai.mission.Mission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.Mission.resolveBlockage(AIUnit, Location)",6,3,3,5
"net.sf.freecol.server.ai.mission.Mission.retargetMission(String, LogBuilder)",1,2,2,2
net.sf.freecol.server.ai.mission.Mission.setInitialized(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.toString(),0,1,1,1
net.sf.freecol.server.ai.mission.Mission.toXML(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.Mission.travelToTarget(Location, CostDecider, LogBuilder)",63,26,28,35
net.sf.freecol.server.ai.mission.Mission.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.MissionaryMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.MissionaryMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.MissionaryMission.doMission(LogBuilder),8,7,9,12
"net.sf.freecol.server.ai.mission.MissionaryMission.extractTarget(AIUnit, PathNode)",7,2,5,7
"net.sf.freecol.server.ai.mission.MissionaryMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.MissionaryMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.MissionaryMission.getBaseTransportPriority(),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.getGoalDecider(AIUnit, boolean)",6,3,3,4
net.sf.freecol.server.ai.mission.MissionaryMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.MissionaryMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidColonyReason(AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidIndianSettlementReason(AIUnit, IndianSettlement)",7,2,3,5
net.sf.freecol.server.ai.mission.MissionaryMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.MissionaryMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.MissionaryMission.invalidUnitReason(AIUnit),17,2,6,9
net.sf.freecol.server.ai.mission.MissionaryMission.prepare(AIUnit),6,1,4,5
net.sf.freecol.server.ai.mission.MissionaryMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.MissionaryMission.scorePath(AIUnit, PathNode)",1,1,2,2
net.sf.freecol.server.ai.mission.MissionaryMission.setTarget(Location),2,1,1,3
net.sf.freecol.server.ai.mission.MissionaryMission.writeAttributes(FreeColXMLWriter),1,1,2,2
"net.sf.freecol.server.ai.mission.PioneeringMission.PioneeringMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.PioneeringMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.abandonTileImprovementPlan(),3,1,3,3
net.sf.freecol.server.ai.mission.PioneeringMission.dispose(),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.doMission(LogBuilder),51,25,32,40
"net.sf.freecol.server.ai.mission.PioneeringMission.extractTarget(AIUnit, PathNode)",10,2,5,6
"net.sf.freecol.server.ai.mission.PioneeringMission.findMissionTarget(AIUnit, int, boolean)",3,3,4,4
net.sf.freecol.server.ai.mission.PioneeringMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.PioneeringMission.getBaseTransportPriority(),0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.getBestMissionPlan(AIUnit, Tile)",0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.getBestPioneeringColony(AIUnit),4,1,4,4
net.sf.freecol.server.ai.mission.PioneeringMission.getBestPlan(Tile),0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.getGoalDecider(AIUnit, boolean)",3,2,2,3
"net.sf.freecol.server.ai.mission.PioneeringMission.getPlan(AIUnit, Tile)",2,1,4,4
net.sf.freecol.server.ai.mission.PioneeringMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.getTileImprovementPlan(),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.hasMissionTools(AIUnit),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMission.hasTools(),0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidColonyReason(AIUnit, Colony)",4,1,3,4
net.sf.freecol.server.ai.mission.PioneeringMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidMissionReason(AIUnit, Location)",10,1,5,5
net.sf.freecol.server.ai.mission.PioneeringMission.invalidReason(),5,4,2,4
"net.sf.freecol.server.ai.mission.PioneeringMission.invalidTileReason(AIUnit, Tile)",11,1,6,6
net.sf.freecol.server.ai.mission.PioneeringMission.invalidUnitReason(AIUnit),3,1,2,3
"net.sf.freecol.server.ai.mission.PioneeringMission.lbFail(LogBuilder, boolean, Object...)",2,1,3,3
net.sf.freecol.server.ai.mission.PioneeringMission.prepare(AIUnit),5,3,3,6
net.sf.freecol.server.ai.mission.PioneeringMission.readAttributes(FreeColXMLReader),1,1,2,2
"net.sf.freecol.server.ai.mission.PioneeringMission.scorePath(AIUnit, PathNode)",7,4,5,5
net.sf.freecol.server.ai.mission.PioneeringMission.setTarget(Location),4,1,3,5
net.sf.freecol.server.ai.mission.PioneeringMission.setTileImprovementPlan(TileImprovementPlan),6,1,5,5
net.sf.freecol.server.ai.mission.PioneeringMission.writeAttributes(FreeColXMLWriter),3,1,3,3
net.sf.freecol.server.ai.mission.PioneeringMissionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.mission.PioneeringMissionTest.testImprovementNoLongerValid(),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.PrivateerMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.PrivateerMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMission.doMission(LogBuilder),17,8,14,16
"net.sf.freecol.server.ai.mission.PrivateerMission.extractTarget(AIUnit, PathNode)",10,2,6,8
"net.sf.freecol.server.ai.mission.PrivateerMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.PrivateerMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
"net.sf.freecol.server.ai.mission.PrivateerMission.getGoalDecider(AIUnit, boolean)",2,2,1,2
net.sf.freecol.server.ai.mission.PrivateerMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMission.getTransportDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidAttackReason(AIUnit, Unit)",15,1,5,6
net.sf.freecol.server.ai.mission.PrivateerMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidMissionReason(AIUnit, Location)",36,1,8,9
net.sf.freecol.server.ai.mission.PrivateerMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.invalidSettlementReason(AIUnit, Settlement)",1,1,2,2
net.sf.freecol.server.ai.mission.PrivateerMission.invalidUnitReason(AIUnit),8,2,4,6
net.sf.freecol.server.ai.mission.PrivateerMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.PrivateerMission.scorePath(AIUnit, PathNode)",5,4,3,5
"net.sf.freecol.server.ai.mission.PrivateerMission.scoreUnit(AIUnit, Unit)",3,1,2,3
net.sf.freecol.server.ai.mission.PrivateerMission.setTarget(Location),2,1,1,5
net.sf.freecol.server.ai.mission.PrivateerMission.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.mission.PrivateerMissionTest.setupPrivateerTestGame(),0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMissionTest.setupPrivateerTestMap(Game),0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMissionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.mission.PrivateerMissionTest.testIsMissionValid(),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.ScoutingMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.ScoutingMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.ScoutingMission.canScoutNatives(AIUnit),0,1,1,1
net.sf.freecol.server.ai.mission.ScoutingMission.doMission(LogBuilder),20,8,14,21
"net.sf.freecol.server.ai.mission.ScoutingMission.extractTarget(AIUnit, PathNode)",7,2,4,5
"net.sf.freecol.server.ai.mission.ScoutingMission.findMissionTarget(AIUnit, int, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.ScoutingMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.findTargetPath(AIUnit, int, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.ScoutingMission.getBaseTransportPriority(),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.getGoalDecider(AIUnit, boolean)",7,3,3,5
net.sf.freecol.server.ai.mission.ScoutingMission.getTarget(),1,1,1,2
net.sf.freecol.server.ai.mission.ScoutingMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidColonyReason(AIUnit, Colony)",0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidIndianSettlementReason(AIUnit, IndianSettlement)",7,1,4,5
net.sf.freecol.server.ai.mission.ScoutingMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.ScoutingMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidSettlementReason(AIUnit, Settlement)",3,1,3,3
"net.sf.freecol.server.ai.mission.ScoutingMission.invalidTileReason(AIUnit, Tile)",6,1,3,4
net.sf.freecol.server.ai.mission.ScoutingMission.invalidUnitReason(AIUnit),3,1,2,3
net.sf.freecol.server.ai.mission.ScoutingMission.prepare(AIUnit),4,1,4,5
net.sf.freecol.server.ai.mission.ScoutingMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.ScoutingMission.scorePath(AIUnit, PathNode)",8,1,6,6
net.sf.freecol.server.ai.mission.ScoutingMission.setTarget(Location),10,1,5,8
net.sf.freecol.server.ai.mission.ScoutingMission.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.mission.ScoutingMissionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.mission.ScoutingMissionTest.testHorsesLost(),0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.TransportMission(AIMain, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.TransportMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.addCargo(Cargo, int, LogBuilder)",5,1,4,4
net.sf.freecol.server.ai.mission.TransportMission.checkCargoes(LogBuilder),56,5,30,32
net.sf.freecol.server.ai.mission.TransportMission.clearCargoes(),1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.destinationCapacity(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.destinationCount(),3,1,2,3
net.sf.freecol.server.ai.mission.TransportMission.dispose(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.doMission(LogBuilder),26,11,16,18
net.sf.freecol.server.ai.mission.TransportMission.doTransport(LogBuilder),40,7,16,22
net.sf.freecol.server.ai.mission.TransportMission.dropTransportable(TransportableAIObject),1,1,2,2
"net.sf.freecol.server.ai.mission.TransportMission.dumpCargo(Cargo, LogBuilder)",7,3,6,6
"net.sf.freecol.server.ai.mission.TransportMission.dumpTransportable(TransportableAIObject, LogBuilder)",3,4,2,4
net.sf.freecol.server.ai.mission.TransportMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.forceCollection(AIUnit, LogBuilder)",3,1,3,3
net.sf.freecol.server.ai.mission.TransportMission.getBestCargo(Unit),20,4,3,11
net.sf.freecol.server.ai.mission.TransportMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.getTransportDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.getTransportTarget(TransportableAIObject),2,2,2,3
net.sf.freecol.server.ai.mission.TransportMission.getTransportTurns(TransportableAIObject),2,2,2,3
net.sf.freecol.server.ai.mission.TransportMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.invalidCargoReason(Cargo),3,1,2,3
net.sf.freecol.server.ai.mission.TransportMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.invalidMissionReason(AIUnit, Location)",7,1,4,5
net.sf.freecol.server.ai.mission.TransportMission.invalidReason(),3,1,3,3
net.sf.freecol.server.ai.mission.TransportMission.invalidUnitReason(AIUnit),3,1,2,3
net.sf.freecol.server.ai.mission.TransportMission.isCarrying(TransportableAIObject),1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.isEmpty(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.isTransporting(TransportableAIObject),0,1,1,1
"net.sf.freecol.server.ai.mission.TransportMission.makeCargo(TransportableAIObject, LogBuilder)",19,2,9,9
net.sf.freecol.server.ai.mission.TransportMission.optimizeCargoes(LogBuilder),12,1,6,8
"net.sf.freecol.server.ai.mission.TransportMission.queueCargo(Cargo, boolean, LogBuilder)",16,7,7,10
net.sf.freecol.server.ai.mission.TransportMission.queueEasilyTransportedCargo(Unit),20,8,6,13
"net.sf.freecol.server.ai.mission.TransportMission.queueTransportable(TransportableAIObject, boolean, LogBuilder)",1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.readChild(FreeColXMLReader),2,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.readChildren(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.removeCargo(Cargo),1,2,2,2
net.sf.freecol.server.ai.mission.TransportMission.removeTransportable(TransportableAIObject),1,1,2,2
"net.sf.freecol.server.ai.mission.TransportMission.requeueCargo(Cargo, LogBuilder)",4,1,4,4
"net.sf.freecol.server.ai.mission.TransportMission.requeueTransportable(TransportableAIObject, LogBuilder)",1,1,2,2
"net.sf.freecol.server.ai.mission.TransportMission.scoreCargoOrder(Location, List<Cargo>)",4,3,2,4
net.sf.freecol.server.ai.mission.TransportMission.setTarget(Location),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.shouldAttack(Unit),2,2,1,3
net.sf.freecol.server.ai.mission.TransportMission.spaceAvailable(Cargo),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.spaceAvailable(TransportableAIObject),3,3,2,3
"net.sf.freecol.server.ai.mission.TransportMission.suppressEuropeanTrade(GoodsType, LogBuilder)",3,1,3,3
"net.sf.freecol.server.ai.mission.TransportMission.tAdd(Cargo, int)",6,3,4,6
net.sf.freecol.server.ai.mission.TransportMission.tClear(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.tCopy(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.tFind(TransportableAIObject),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.tFirst(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.tRemove(Cargo),4,3,4,4
net.sf.freecol.server.ai.mission.TransportMission.tRetarget(),1,1,2,2
"net.sf.freecol.server.ai.mission.TransportMission.tSet(List<Cargo>, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.tSize(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMission.tSpace(),3,3,2,3
net.sf.freecol.server.ai.mission.TransportMission.takeTransportable(TransportableAIObject),1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.toFullString(),1,1,2,2
"net.sf.freecol.server.ai.mission.TransportMission.tryCargo(Cargo, LogBuilder)",51,17,24,31
net.sf.freecol.server.ai.mission.TransportMission.unwrapCargoes(List<Cargo>),3,1,3,3
net.sf.freecol.server.ai.mission.TransportMission.wrapCargoes(),4,1,4,4
net.sf.freecol.server.ai.mission.TransportMission.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.mission.TransportMission.writeChildren(FreeColXMLWriter),5,4,2,4
net.sf.freecol.server.ai.mission.TransportMissionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetDefaultDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopAlreadyAtDestination(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopIsColony(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testGetNextStopIsEurope(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testTransportMissionInvalidAfterCombatLost(),0,1,1,1
net.sf.freecol.server.ai.mission.TransportMissionTest.testWagonTrain(),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.UnitSeekAndDestroyMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.UnitSeekAndDestroyMission(AIMain, AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.doMission(LogBuilder),25,11,25,26
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.extractTarget(AIUnit, PathNode)",9,1,7,8
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findMissionTarget(AIUnit, int, boolean, boolean)",1,1,2,2
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findTarget(),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.findTargetPath(AIUnit, int, boolean, boolean)",1,2,1,2
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getBaseTransportPriority(),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getGoalDecider(AIUnit, boolean, boolean)",2,2,1,2
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getTransportDestination(),3,2,1,4
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidMissionReason(AIUnit, Location)",6,1,4,4
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidReason(),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidSettlementReason(AIUnit, Settlement)",4,2,3,4
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidTargetReason(AIUnit, Unit)",11,2,5,6
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.invalidUnitReason(AIUnit),6,1,3,4
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.readAttributes(FreeColXMLReader),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scorePath(AIUnit, PathNode, boolean, boolean)",6,4,3,6
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scoreSettlementPath(AIUnit, PathNode, Settlement)",1,2,1,2
"net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.scoreUnitPath(AIUnit, PathNode, Unit)",11,3,4,9
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.setTarget(Location),12,1,5,8
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission.writeAttributes(FreeColXMLWriter),1,1,2,2
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.tearDown(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.testCapturedUnitsLoseMission(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest.testDoNotPursueUnitsInColonies(),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.UnitWanderHostileMission(AIMain, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.UnitWanderHostileMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.doMission(LogBuilder),10,6,5,6
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidMissionReason(AIUnit),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidMissionReason(AIUnit, Location)",0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.invalidUnitReason(AIUnit),4,2,2,4
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.isOneTime(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderHostileMission.setTarget(Location),0,1,1,1
"net.sf.freecol.server.ai.mission.UnitWanderMission.UnitWanderMission(AIMain, AIUnit)",0,1,1,1
"net.sf.freecol.server.ai.mission.UnitWanderMission.UnitWanderMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.doMission(LogBuilder),1,2,2,2
net.sf.freecol.server.ai.mission.UnitWanderMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.getXMLTagName(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.isOneTime(),0,1,1,1
net.sf.freecol.server.ai.mission.UnitWanderMission.setTarget(Location),0,1,1,1
"net.sf.freecol.server.ai.mission.WishRealizationMission.WishRealizationMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.ai.mission.WishRealizationMission.WishRealizationMission(AIMain, AIUnit, Wish)",0,1,1,1
net.sf.freecol.server.ai.mission.WishRealizationMission.dispose(),1,1,2,2
net.sf.freecol.server.ai.mission.WishRealizationMission.doMission(LogBuilder),15,5,8,10
net.sf.freecol.server.ai.mission.WishRealizationMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.WishRealizationMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.WishRealizationMission.getTarget(),1,1,2,2
net.sf.freecol.server.ai.mission.WishRealizationMission.getWish(),0,1,1,1
net.sf.freecol.server.ai.mission.WishRealizationMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.WishRealizationMission.invalidMissionReason(AIUnit, Location)",3,1,2,3
net.sf.freecol.server.ai.mission.WishRealizationMission.invalidReason(),1,1,2,2
net.sf.freecol.server.ai.mission.WishRealizationMission.readAttributes(FreeColXMLReader),5,4,3,4
net.sf.freecol.server.ai.mission.WishRealizationMission.setTarget(Location),0,1,1,1
net.sf.freecol.server.ai.mission.WishRealizationMission.writeAttributes(FreeColXMLWriter),0,1,1,1
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.WorkInsideColonyMission(AIMain, AIUnit, AIColony)",0,1,1,1
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.WorkInsideColonyMission(AIMain, AIUnit, FreeColXMLReader)",0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.doMission(LogBuilder),3,5,5,7
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.findTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getAIColony(),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getBaseTransportPriority(),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getTarget(),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.getXMLTagName(),0,1,1,1
"net.sf.freecol.server.ai.mission.WorkInsideColonyMission.invalidMissionReason(AIUnit, Location)",6,1,3,4
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.invalidReason(),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.readAttributes(FreeColXMLReader),0,1,1,1
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.setTarget(Location),1,1,1,2
net.sf.freecol.server.ai.mission.WorkInsideColonyMission.writeAttributes(FreeColXMLWriter),0,1,1,1
net.sf.freecol.server.control.AllTests.suite(),0,1,1,1
net.sf.freecol.server.control.Controller.Controller(FreeColServer),0,1,1,1
net.sf.freecol.server.control.Controller.shutdown(),2,1,2,2
net.sf.freecol.server.control.FreeColServerHolder.FreeColServerHolder(FreeColServer),0,1,1,1
net.sf.freecol.server.control.FreeColServerHolder.getFreeColServer(),0,1,1,1
net.sf.freecol.server.control.FreeColServerHolder.getGame(),0,1,1,1
net.sf.freecol.server.control.InGameController.InGameController(FreeColServer),0,1,1,1
"net.sf.freecol.server.control.InGameController.abandonSettlement(ServerPlayer, Settlement)",1,1,2,2
"net.sf.freecol.server.control.InGameController.addFoundingFather(Player, FoundingFather)",0,1,1,1
"net.sf.freecol.server.control.InGameController.askLearnSkill(ServerPlayer, ServerUnit, IndianSettlement)",0,1,1,1
"net.sf.freecol.server.control.InGameController.assignTeacher(ServerPlayer, Unit, Unit)",2,1,3,3
"net.sf.freecol.server.control.InGameController.assignTradeRoute(ServerPlayer, Unit, TradeRoute)",10,4,6,8
"net.sf.freecol.server.control.InGameController.buildSettlement(ServerPlayer, Unit, String)",16,1,9,9
"net.sf.freecol.server.control.InGameController.buyGoods(ServerPlayer, GoodsType, int, Unit)",2,3,3,3
"net.sf.freecol.server.control.InGameController.cashInTreasureTrain(ServerPlayer, Unit)",4,1,3,4
"net.sf.freecol.server.control.InGameController.changeStance(Player, Stance, Player, boolean)",1,1,2,2
"net.sf.freecol.server.control.InGameController.changeState(ServerPlayer, Unit, UnitState)",18,1,12,13
"net.sf.freecol.server.control.InGameController.changeWorkImprovementType(ServerPlayer, Unit, TileImprovementType)",1,1,2,2
"net.sf.freecol.server.control.InGameController.changeWorkType(ServerPlayer, Unit, GoodsType)",1,1,2,2
"net.sf.freecol.server.control.InGameController.chat(ServerPlayer, String, boolean)",0,1,1,1
"net.sf.freecol.server.control.InGameController.chooseFoundingFather(ServerPlayer, FoundingFather)",2,3,3,3
"net.sf.freecol.server.control.InGameController.claimLand(ServerPlayer, Tile, Settlement, int)",4,1,4,4
"net.sf.freecol.server.control.InGameController.clearSpeciality(ServerPlayer, Unit)",2,3,3,3
"net.sf.freecol.server.control.InGameController.combat(ServerPlayer, FreeColGameObject, FreeColGameObject, List<CombatEffectType>)",1,1,2,2
net.sf.freecol.server.control.InGameController.continuePlaying(ServerPlayer),3,1,3,3
net.sf.freecol.server.control.InGameController.createREFPlayer(ServerPlayer),4,1,6,6
"net.sf.freecol.server.control.InGameController.csBuy(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",0,1,1,1
"net.sf.freecol.server.control.InGameController.csGift(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",0,1,1,1
"net.sf.freecol.server.control.InGameController.csGiveIndependence(ServerPlayer, Player, ChangeSet)",4,1,8,8
"net.sf.freecol.server.control.InGameController.csLaunchREF(ServerPlayer, boolean, ChangeSet)",10,1,6,6
"net.sf.freecol.server.control.InGameController.csMonarchAction(ServerPlayer, MonarchAction, ChangeSet)",26,2,6,24
"net.sf.freecol.server.control.InGameController.csSell(ServerUnit, Goods, int, ServerIndianSettlement, ChangeSet)",0,1,1,1
"net.sf.freecol.server.control.InGameController.debugApplyDisaster(ServerColony, Disaster)",3,1,3,3
"net.sf.freecol.server.control.InGameController.debugChangeOwner(ServerColony, ServerPlayer)",0,1,1,1
"net.sf.freecol.server.control.InGameController.debugChangeOwner(ServerUnit, ServerPlayer)",0,1,1,1
"net.sf.freecol.server.control.InGameController.declareIndependence(ServerPlayer, String, String)",34,5,15,21
"net.sf.freecol.server.control.InGameController.declineMounds(ServerPlayer, Tile)",0,1,1,1
"net.sf.freecol.server.control.InGameController.deleteTradeRoute(ServerPlayer, TradeRoute)",1,1,2,2
"net.sf.freecol.server.control.InGameController.deliverGiftToSettlement(ServerPlayer, ServerUnit, Settlement, Goods)",5,3,6,6
"net.sf.freecol.server.control.InGameController.demandTribute(ServerPlayer, ServerUnit, IndianSettlement)",6,1,4,6
"net.sf.freecol.server.control.InGameController.denounceMission(ServerPlayer, ServerUnit, IndianSettlement)",4,3,3,5
"net.sf.freecol.server.control.InGameController.diplomacy(ServerPlayer, Colony, Unit, DiplomaticTrade)",2,2,2,2
"net.sf.freecol.server.control.InGameController.diplomacy(ServerPlayer, Unit, Colony, DiplomaticTrade)",4,3,3,3
"net.sf.freecol.server.control.InGameController.disbandUnit(ServerPlayer, Unit)",0,1,1,1
net.sf.freecol.server.control.InGameController.disconnect(ServerPlayer),1,1,2,2
"net.sf.freecol.server.control.InGameController.disembarkUnit(ServerPlayer, ServerUnit)",4,3,5,5
"net.sf.freecol.server.control.InGameController.embarkUnit(ServerPlayer, ServerUnit, Unit)",2,3,3,3
"net.sf.freecol.server.control.InGameController.emigrate(ServerPlayer, int, MigrationType)",0,1,1,1
net.sf.freecol.server.control.InGameController.endTurn(ServerPlayer),59,6,28,32
net.sf.freecol.server.control.InGameController.enterRevengeMode(ServerPlayer),8,3,8,8
"net.sf.freecol.server.control.InGameController.equipForRole(ServerPlayer, Unit, Role, int)",8,5,8,9
"net.sf.freecol.server.control.InGameController.establishMission(ServerPlayer, ServerUnit, IndianSettlement)",3,1,2,4
"net.sf.freecol.server.control.InGameController.europeanFirstContact(ServerPlayer, Unit, Colony, Unit, Colony, DiplomaticTrade)",11,6,7,8
net.sf.freecol.server.control.InGameController.gameState(),0,1,1,1
"net.sf.freecol.server.control.InGameController.getHighScores(ServerPlayer, String)",0,1,1,1
net.sf.freecol.server.control.InGameController.getSkippedTurns(),1,1,1,2
net.sf.freecol.server.control.InGameController.getTimeout(),0,1,1,1
"net.sf.freecol.server.control.InGameController.incite(ServerPlayer, ServerUnit, IndianSettlement, Player, int)",5,1,4,5
"net.sf.freecol.server.control.InGameController.indianDemand(ServerPlayer, Unit, Colony, GoodsType, int, IndianDemandAction)",10,4,4,6
"net.sf.freecol.server.control.InGameController.joinColony(ServerPlayer, Unit, Colony)",2,1,3,3
"net.sf.freecol.server.control.InGameController.learnFromIndianSettlement(ServerPlayer, ServerUnit, IndianSettlement)",7,3,6,8
"net.sf.freecol.server.control.InGameController.loadGoods(ServerPlayer, Location, GoodsType, int, Unit)",12,7,10,10
"net.sf.freecol.server.control.InGameController.lootCargo(ServerPlayer, Unit, String, List<Goods>)",12,7,7,7
"net.sf.freecol.server.control.InGameController.monarchAction(ServerPlayer, MonarchAction, boolean)",2,3,3,3
"net.sf.freecol.server.control.InGameController.move(ServerPlayer, ServerUnit, Tile)",0,1,1,1
"net.sf.freecol.server.control.InGameController.moveTo(ServerPlayer, Unit, Location)",37,11,22,24
"net.sf.freecol.server.control.InGameController.nationSummary(ServerPlayer, Player)",0,1,1,1
"net.sf.freecol.server.control.InGameController.nativeFirstContact(ServerPlayer, Player, Tile, boolean)",12,4,7,8
"net.sf.freecol.server.control.InGameController.nativeGift(ServerPlayer, Unit, Colony)",1,2,2,2
"net.sf.freecol.server.control.InGameController.nativeTrade(ServerPlayer, NativeTradeAction, NativeTrade)",25,15,18,32
net.sf.freecol.server.control.InGameController.newTradeRoute(ServerPlayer),0,1,1,1
"net.sf.freecol.server.control.InGameController.payArrears(ServerPlayer, GoodsType)",2,3,3,3
"net.sf.freecol.server.control.InGameController.payForBuilding(ServerPlayer, Colony)",10,7,7,7
"net.sf.freecol.server.control.InGameController.putOutsideColony(ServerPlayer, Unit)",1,1,2,2
"net.sf.freecol.server.control.InGameController.rearrangeColony(ServerPlayer, Colony, List<Arrangement>)",15,5,9,12
"net.sf.freecol.server.control.InGameController.renameObject(ServerPlayer, Nameable, String)",1,1,2,2
net.sf.freecol.server.control.InGameController.retire(ServerPlayer),0,1,1,1
"net.sf.freecol.server.control.InGameController.scoutIndianSettlement(ServerPlayer, ServerUnit, IndianSettlement)",0,1,1,1
"net.sf.freecol.server.control.InGameController.scoutSpeakToChief(ServerPlayer, ServerUnit, IndianSettlement)",27,1,14,16
"net.sf.freecol.server.control.InGameController.sellGoods(ServerPlayer, GoodsType, int, Unit)",4,3,3,3
"net.sf.freecol.server.control.InGameController.setBuildQueue(ServerPlayer, Colony, List<BuildableType>)",4,1,5,5
"net.sf.freecol.server.control.InGameController.setCurrentStop(ServerPlayer, Unit, int)",3,3,4,4
"net.sf.freecol.server.control.InGameController.setDestination(ServerPlayer, Unit, Location)",4,1,4,4
"net.sf.freecol.server.control.InGameController.setGoodsLevels(ServerPlayer, Colony, ExportData)",0,1,1,1
"net.sf.freecol.server.control.InGameController.setMonarchAction(ServerPlayer, MonarchAction)",1,1,1,2
"net.sf.freecol.server.control.InGameController.setNewLandName(ServerPlayer, Unit, String)",0,1,1,1
"net.sf.freecol.server.control.InGameController.setNewRegionName(ServerPlayer, Unit, Region, String)",1,2,2,2
net.sf.freecol.server.control.InGameController.setRandom(Random),0,1,1,1
net.sf.freecol.server.control.InGameController.setSkippedTurns(int),1,1,1,2
"net.sf.freecol.server.control.InGameController.spySettlement(ServerPlayer, Unit, Settlement)",0,1,1,1
net.sf.freecol.server.control.InGameController.stepRandom(),0,1,1,1
"net.sf.freecol.server.control.InGameController.trainUnitInEurope(ServerPlayer, UnitType)",5,5,6,6
"net.sf.freecol.server.control.InGameController.unitTemplate(String, List<Unit>)",1,1,2,2
"net.sf.freecol.server.control.InGameController.unloadGoods(ServerPlayer, GoodsType, int, Unit)",6,3,5,5
"net.sf.freecol.server.control.InGameController.updateTradeRoute(ServerPlayer, TradeRoute)",4,4,6,6
"net.sf.freecol.server.control.InGameController.work(ServerPlayer, Unit, WorkLocation)",5,1,6,6
"net.sf.freecol.server.control.InGameControllerTest.setPlayersAt(Stance, Tension)",0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.tearDown(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAddFatherBuildingEvent(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAddFatherUnits(),3,1,4,4
net.sf.freecol.server.control.InGameControllerTest.testArtilleryDemotedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAtackedNavalUnitIsDamaged(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAttackColonyWithBrave(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAttackColonyWithVeteran(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testAttrition(),4,3,4,4
net.sf.freecol.server.control.InGameControllerTest.testBuildingBonus(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testCarpenterHouseNationalAdvantage(),3,3,3,3
net.sf.freecol.server.control.InGameControllerTest.testCashInTreasure(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testCeaseFireTreaty(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testClearSpecialty(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testColonistDemotedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testCreateMission(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testDeclarationOfWarFromPeace(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testDoAssignedWorkAmateurAndHardyPioneer(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testDragoonDemotedByBrave(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testDragoonDemotedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testDumpGoods(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testEmbark(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testEquipIndian(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testEquipIndianNotEnoughReqGoods(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testLaSalle(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testLoseColonyDefenceWithRevere(),2,1,3,3
net.sf.freecol.server.control.InGameControllerTest.testPeaceTreatyFromCeaseFireStance(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testPeaceTreatyFromWarStance(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testPioneerDiesNotLosesEquipment(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testPocahontas(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testPromotion(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testScoutDefeatedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testScoutDiesNotLosesEquipment(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testSoldierDemotedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testUnarmedAttack(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testUnitLosesExperienceWithWorkChange(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testUnitTypeChangeOnEnterColony(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testVeteranSoldierDemotedBySoldier(),0,1,1,1
net.sf.freecol.server.control.InGameControllerTest.testWarDeclarationAffectsSettlementAlarm(),0,1,1,1
"net.sf.freecol.server.control.InGameControllerTest.verifyTreatyResults(ServerPlayer, ServerPlayer, Stance, int)",0,1,1,1
"net.sf.freecol.server.control.InGameControllerTest.workLeftFor(UnitType, TileType, TileImprovementType)",0,1,1,1
net.sf.freecol.server.control.PreGameController.PreGameController(FreeColServer),0,1,1,1
"net.sf.freecol.server.control.PreGameController.ready(ServerPlayer, boolean)",0,1,1,1
net.sf.freecol.server.control.PreGameController.requestLaunch(ServerPlayer),7,6,7,7
"net.sf.freecol.server.control.PreGameController.setAvailable(ServerPlayer, Nation, NationState)",0,1,1,1
"net.sf.freecol.server.control.PreGameController.setColor(ServerPlayer, Nation, Color)",0,1,1,1
net.sf.freecol.server.control.PreGameController.setLaunching(boolean),0,1,1,1
"net.sf.freecol.server.control.PreGameController.setNation(ServerPlayer, Nation)",0,1,1,1
"net.sf.freecol.server.control.PreGameController.setNationType(ServerPlayer, NationType)",0,1,1,1
"net.sf.freecol.server.control.PreGameController.updateGameOptions(ServerPlayer, OptionGroup)",1,2,2,2
"net.sf.freecol.server.control.PreGameController.updateMapGeneratorOptions(ServerPlayer, OptionGroup)",1,2,2,2
net.sf.freecol.server.control.PreGameController.vacantPlayers(),0,1,1,1
net.sf.freecol.server.control.ServerInputHandler.ServerInputHandler(FreeColServer),0,1,1,1
"net.sf.freecol.server.control.ServerInputHandler.handle(Connection, Message)",5,2,5,6
net.sf.freecol.server.control.ServerInputHandler.read(Connection),0,1,1,1
net.sf.freecol.server.control.UserConnectionHandler.UserConnectionHandler(FreeColServer),0,1,1,1
"net.sf.freecol.server.control.UserConnectionHandler.handle(Connection, Message)",2,1,2,4
net.sf.freecol.server.control.UserConnectionHandler.read(Connection),0,1,1,1
net.sf.freecol.server.generator.AllTests.suite(),0,1,1,1
net.sf.freecol.server.generator.ColonizationMapLoader.ColonizationMapLoader(File),3,1,4,4
net.sf.freecol.server.generator.ColonizationMapLoader.getHighestLayer(),0,1,1,1
"net.sf.freecol.server.generator.ColonizationMapLoader.loadMap(Game, Layer)",37,1,9,20
net.sf.freecol.server.generator.FreeColMapLoader.FreeColMapLoader(File),0,1,1,1
net.sf.freecol.server.generator.FreeColMapLoader.getHighestLayer(),0,1,1,1
"net.sf.freecol.server.generator.FreeColMapLoader.loadMap(Game, Layer)",48,1,12,13
net.sf.freecol.server.generator.MapGeneratorTest.testImportMap(),9,1,6,6
net.sf.freecol.server.generator.MapGeneratorTest.testIndianCapital(),14,5,6,9
net.sf.freecol.server.generator.MapGeneratorTest.testMapGenerator(),0,1,1,1
net.sf.freecol.server.generator.MapGeneratorTest.testRegions(),0,1,1,1
net.sf.freecol.server.generator.MapGeneratorTest.testSinglePlayerOnSmallMap(),0,1,1,1
net.sf.freecol.server.generator.MapGeneratorTest.testWithNoIndians(),4,1,5,5
net.sf.freecol.server.generator.River.DirectionChange.getNewDirection(Direction),5,12,1,12
"net.sf.freecol.server.generator.River.River(Map, Map<Tile, River>, ServerRegion, Random)",0,1,1,1
"net.sf.freecol.server.generator.River.add(Tile, Direction)",0,1,1,1
net.sf.freecol.server.generator.River.contains(Tile),0,1,1,1
"net.sf.freecol.server.generator.River.createDelta(Tile, Direction, RiverSection)",0,1,1,1
"net.sf.freecol.server.generator.River.delta(Tile, Direction, RiverSection, Direction)",5,1,5,5
net.sf.freecol.server.generator.River.drawToMap(List<RiverSection>),10,1,7,7
net.sf.freecol.server.generator.River.flow(Tile),57,10,13,17
net.sf.freecol.server.generator.River.flowFromSource(Tile),3,3,3,3
net.sf.freecol.server.generator.River.getLastSection(),0,1,1,1
net.sf.freecol.server.generator.River.getLength(),0,1,1,1
net.sf.freecol.server.generator.River.getRegion(),0,1,1,1
net.sf.freecol.server.generator.River.getSections(),0,1,1,1
"net.sf.freecol.server.generator.River.grow(RiverSection, Tile)",5,1,5,5
net.sf.freecol.server.generator.River.isNextToSelf(Tile),0,1,1,1
net.sf.freecol.server.generator.River.isNextToWater(Tile),2,1,3,3
net.sf.freecol.server.generator.River.setRegion(ServerRegion),0,1,1,1
"net.sf.freecol.server.generator.RiverSection.RiverSection(Map<Direction, Integer>)",0,1,1,1
"net.sf.freecol.server.generator.RiverSection.RiverSection(Tile, Direction)",0,1,1,1
net.sf.freecol.server.generator.RiverSection.encodeStyle(),1,1,2,2
net.sf.freecol.server.generator.RiverSection.getBranch(Direction),1,1,1,2
net.sf.freecol.server.generator.RiverSection.getSize(),0,1,1,1
net.sf.freecol.server.generator.RiverSection.getTile(),0,1,1,1
net.sf.freecol.server.generator.RiverSection.grow(),0,1,1,1
"net.sf.freecol.server.generator.RiverSection.growBranch(Direction, int)",0,1,1,1
net.sf.freecol.server.generator.RiverSection.removeBranch(Direction),0,1,1,1
"net.sf.freecol.server.generator.RiverSection.setBranch(Direction, int)",1,1,1,2
net.sf.freecol.server.generator.SimpleMapGenerator.SimpleMapGenerator(Random),0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.Territory.Territory(Player, ServerRegion)",0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.Territory.Territory(Player, Tile)",0,1,1,1
net.sf.freecol.server.generator.SimpleMapGenerator.Territory.getCenterTile(Map),1,2,1,2
net.sf.freecol.server.generator.SimpleMapGenerator.Territory.toString(),0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.createDebugUnits(Map, Player, Tile, LogBuilder)",17,7,11,13
"net.sf.freecol.server.generator.SimpleMapGenerator.createEuropeanUnits(Map, List<Player>, LogBuilder)",81,8,19,36
"net.sf.freecol.server.generator.SimpleMapGenerator.findFreeNeighbouringTile(IndianSettlement, List<Tile>)",4,3,4,5
"net.sf.freecol.server.generator.SimpleMapGenerator.findHistoricalStartingPosition(Player, Map, List<Tile>, List<Tile>)",2,2,1,3
"net.sf.freecol.server.generator.SimpleMapGenerator.findTileFor(Map, int, int, boolean, LogBuilder)",10,3,5,7
"net.sf.freecol.server.generator.SimpleMapGenerator.generateEmptyMap(Game, int, int, LogBuilder)",0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.generateMap(Game, Map, boolean, LogBuilder)",2,1,3,3
"net.sf.freecol.server.generator.SimpleMapGenerator.generateSkillForLocation(Map, Tile, NationType)",2,1,3,3
net.sf.freecol.server.generator.SimpleMapGenerator.getApproximateLandCount(Game),0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.getClosestTerritory(Tile, List<Territory>)",0,1,1,1
"net.sf.freecol.server.generator.SimpleMapGenerator.importIndianSettlements(Map, Map, LogBuilder)",40,4,14,16
"net.sf.freecol.server.generator.SimpleMapGenerator.makeLostCityRumours(Map, Map, LogBuilder)",18,6,10,13
"net.sf.freecol.server.generator.SimpleMapGenerator.makeNativeSettlements(Map, Map, LogBuilder)",102,17,37,49
"net.sf.freecol.server.generator.SimpleMapGenerator.placeCapital(Map, Territory, int, List<Tile>, LogBuilder)",2,2,2,3
"net.sf.freecol.server.generator.SimpleMapGenerator.placeIndianSettlement(Player, boolean, Tile, Map, LogBuilder)",1,1,2,2
"net.sf.freecol.server.generator.SimpleMapGenerator.sampleTiles(List<Tile>, int)",2,2,3,3
net.sf.freecol.server.generator.SimpleMapGenerator.suitableForNativeSettlement(Tile),4,2,2,4
net.sf.freecol.server.generator.TerrainGenerator.TerrainGenerator(Random),0,1,1,1
"net.sf.freecol.server.generator.TerrainGenerator.createLakeRegions(Map, LogBuilder)",7,1,6,6
"net.sf.freecol.server.generator.TerrainGenerator.createLandRegions(Map, LogBuilder)",89,1,20,31
"net.sf.freecol.server.generator.TerrainGenerator.createMountains(Map, LogBuilder)",49,17,10,21
net.sf.freecol.server.generator.TerrainGenerator.createResource(Tile),3,3,2,4
"net.sf.freecol.server.generator.TerrainGenerator.createRivers(Map, LogBuilder)",9,4,4,6
net.sf.freecol.server.generator.TerrainGenerator.encodeStyle(Tile),13,1,10,10
"net.sf.freecol.server.generator.TerrainGenerator.generateMap(Game, Map, LandMap, LogBuilder)",48,1,23,25
net.sf.freecol.server.generator.TerrainGenerator.getApproximateLandCount(Game),0,1,1,1
"net.sf.freecol.server.generator.TerrainGenerator.getRandomLandTileType(Game, int)",2,1,3,3
"net.sf.freecol.server.generator.TerrainGenerator.getRandomOceanTileType(Game, int)",2,1,4,4
"net.sf.freecol.server.generator.TerrainGenerator.getRandomTileType(Game, List<TileType>, int)",14,13,11,19
"net.sf.freecol.server.generator.TerrainGenerator.limitToRange(int, int, int)",0,1,1,1
"net.sf.freecol.server.generator.TerrainGenerator.makeLakes(Map, List<Tile>)",17,3,6,7
"net.sf.freecol.server.generator.TerrainGenerator.perhapsAddBonus(Tile, boolean)",30,1,15,16
net.sf.freecol.server.model.AllTests.suite(),0,1,1,1
"net.sf.freecol.server.model.DiplomacySession.DiplomacySession(Unit, Settlement, long)",0,1,1,1
"net.sf.freecol.server.model.DiplomacySession.DiplomacySession(Unit, Unit, long)",0,1,1,1
net.sf.freecol.server.model.DiplomacySession.complete(ChangeSet),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.complete(boolean),1,1,2,2
"net.sf.freecol.server.model.DiplomacySession.complete(boolean, ChangeSet)",1,1,2,2
net.sf.freecol.server.model.DiplomacySession.completeFirstContact(ChangeSet),0,1,1,1
"net.sf.freecol.server.model.DiplomacySession.completeInternal(boolean, ChangeSet)",5,1,3,4
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Player, Player)",4,1,7,7
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Unit, Settlement)",0,1,1,1
"net.sf.freecol.server.model.DiplomacySession.findContactSession(Unit, Unit)",0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getAgreement(),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getGame(),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getMessage(Player),5,1,1,4
net.sf.freecol.server.model.DiplomacySession.getOtherPlayer(),1,1,2,2
net.sf.freecol.server.model.DiplomacySession.getOtherPlayer(ServerPlayer),1,1,2,2
net.sf.freecol.server.model.DiplomacySession.getOtherUnit(),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getOwner(),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getSettlement(),0,1,1,1
net.sf.freecol.server.model.DiplomacySession.getUnit(),0,1,1,1
"net.sf.freecol.server.model.DiplomacySession.isCompatible(FreeColGameObject, FreeColGameObject)",5,1,1,6
"net.sf.freecol.server.model.DiplomacySession.makeDiplomacySessionKey(Ownable, Ownable)",0,1,1,1
net.sf.freecol.server.model.DiplomacySession.setAgreement(DiplomaticTrade),0,1,1,1
"net.sf.freecol.server.model.LootSession.LootSession(Unit, Unit, List<Goods>)",0,1,1,1
net.sf.freecol.server.model.LootSession.complete(ChangeSet),0,1,1,1
net.sf.freecol.server.model.LootSession.getCapture(),0,1,1,1
"net.sf.freecol.server.model.MonarchSession.MonarchSession(ServerPlayer, MonarchAction, List<AbstractUnit>, int)",0,1,1,1
"net.sf.freecol.server.model.MonarchSession.MonarchSession(ServerPlayer, MonarchAction, int, Goods)",0,1,1,1
net.sf.freecol.server.model.MonarchSession.complete(ChangeSet),1,1,2,2
"net.sf.freecol.server.model.MonarchSession.complete(boolean, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.MonarchSession.completeInternal(Boolean, ChangeSet)",7,1,4,6
net.sf.freecol.server.model.MonarchSession.getAction(),0,1,1,1
net.sf.freecol.server.model.MonarchSession.getGoods(),0,1,1,1
net.sf.freecol.server.model.MonarchSession.getMercenaries(),0,1,1,1
net.sf.freecol.server.model.MonarchSession.getPrice(),0,1,1,1
net.sf.freecol.server.model.MonarchSession.getTax(),0,1,1,1
"net.sf.freecol.server.model.NativeDemandSession.NativeDemandSession(Unit, Colony, GoodsType, int, long)",0,1,1,1
net.sf.freecol.server.model.NativeDemandSession.complete(ChangeSet),1,1,2,2
net.sf.freecol.server.model.NativeDemandSession.complete(boolean),1,1,2,2
"net.sf.freecol.server.model.NativeDemandSession.complete(boolean, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.NativeDemandSession.completeInternal(boolean, ChangeSet)",1,1,1,2
net.sf.freecol.server.model.NativeDemandSession.getColonyOwner(),0,1,1,1
net.sf.freecol.server.model.NativeDemandSession.getGame(),0,1,1,1
net.sf.freecol.server.model.NativeDemandSession.getUnitOwner(),0,1,1,1
net.sf.freecol.server.model.NativeDemandSession.toString(),0,1,1,1
net.sf.freecol.server.model.NativeTradeSession.NativeTradeSession(NativeTrade),0,1,1,1
net.sf.freecol.server.model.NativeTradeSession.complete(ChangeSet),1,1,2,2
net.sf.freecol.server.model.NativeTradeSession.getNativeTrade(),0,1,1,1
net.sf.freecol.server.model.NativeTradeSession.openSession(NativeTrade),0,1,1,1
net.sf.freecol.server.model.NativeTradeSession.toString(),0,1,1,1
"net.sf.freecol.server.model.ServerBuilding.ServerBuilding(Game, Colony, BuildingType)",0,1,1,1
"net.sf.freecol.server.model.ServerBuilding.ServerBuilding(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerBuilding.csAssignStudent(Unit, ChangeSet)",1,2,2,2
"net.sf.freecol.server.model.ServerBuilding.csCheckMissingInput(ProductionInfo, ChangeSet)",11,2,5,6
"net.sf.freecol.server.model.ServerBuilding.csCheckTeach(Unit, ChangeSet)",4,2,4,4
"net.sf.freecol.server.model.ServerBuilding.csNewTurn(Random, LogBuilder, ChangeSet)",2,1,3,3
net.sf.freecol.server.model.ServerBuilding.csRepairUnits(ChangeSet),2,1,3,3
net.sf.freecol.server.model.ServerBuilding.csTeach(ChangeSet),9,1,7,7
"net.sf.freecol.server.model.ServerBuilding.csTrainStudent(Unit, Unit, ChangeSet)",3,1,3,3
"net.sf.freecol.server.model.ServerBuildingTest.getSchoolColony(int, SchoolLevel)",2,1,2,5
"net.sf.freecol.server.model.ServerBuildingTest.getUnitList(Colony, UnitType)",0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testCaseTwoTeachersWithDifferentExp(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testCollege(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testColonialRegular(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testConcurrentUpgrade(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testExpertTeaching(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testMoveTeacherInside(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testMoveTeacherOutside(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testPartTraining(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testProductionBonus(),1,1,2,2
net.sf.freecol.server.model.ServerBuildingTest.testSingleGuyTwoTeachers(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testSingleGuyTwoTeachers2(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testSonsOfLiberty(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeachIndenturedServants(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeachPettyCriminals(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeachPettyCriminalsByMaster(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeacherStoresProgress(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeachingDoublePromotion(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTeachingOrder(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testTrackerBug1616384(),4,1,5,5
net.sf.freecol.server.model.ServerBuildingTest.testTwoTeachersOfSameKind(),1,1,2,2
net.sf.freecol.server.model.ServerBuildingTest.testTwoTeachersSimple(),0,1,1,1
net.sf.freecol.server.model.ServerBuildingTest.testUniversity(),0,1,1,1
"net.sf.freecol.server.model.ServerBuildingTest.trainForTurns(Colony, int)",1,1,2,2
"net.sf.freecol.server.model.ServerColony.ServerColony(Game, Player, String, Tile)",6,1,6,6
"net.sf.freecol.server.model.ServerColony.ServerColony(Game, String)",0,1,1,1
net.sf.freecol.server.model.ServerColony.buildBuilding(Building),2,2,2,3
"net.sf.freecol.server.model.ServerColony.csAddConvert(Unit, ChangeSet)",4,2,3,4
"net.sf.freecol.server.model.ServerColony.csBuildBuilding(BuildQueue<? extends BuildableType>, ChangeSet)",11,1,6,6
"net.sf.freecol.server.model.ServerColony.csBuildUnit(BuildQueue<? extends BuildableType>, Random, ChangeSet)",2,1,2,2
"net.sf.freecol.server.model.ServerColony.csChangeOwner(Player, boolean, String, ChangeSet)",6,1,6,6
"net.sf.freecol.server.model.ServerColony.csEquipForRole(Unit, Role, int, Random, ChangeSet)",3,1,3,3
"net.sf.freecol.server.model.ServerColony.csEvictUsers(Unit, ChangeSet)",2,3,1,3
"net.sf.freecol.server.model.ServerColony.csFreeBuilding(BuildingType, ChangeSet)",4,2,4,5
"net.sf.freecol.server.model.ServerColony.csNewTurn(Random, LogBuilder, ChangeSet)",98,18,38,48
"net.sf.freecol.server.model.ServerColony.csNewTurnWarnings(Random, LogBuilder, ChangeSet)",40,6,24,31
"net.sf.freecol.server.model.ServerColony.csNextBuildable(BuildQueue<? extends BuildableType>, ChangeSet)",8,3,6,10
net.sf.freecol.server.model.ServerColony.destroyBuilding(Building),2,2,2,3
"net.sf.freecol.server.model.ServerColony.ejectUnits(WorkLocation, List<Unit>)",8,4,6,7
net.sf.freecol.server.model.ServerColony.neededForBuildableType(GoodsType),1,1,2,2
net.sf.freecol.server.model.ServerColonyTest.testAvoidStarvation(),1,1,2,2
net.sf.freecol.server.model.ServerColonyTest.testBuildingCompletion(),0,1,1,1
net.sf.freecol.server.model.ServerColonyTest.testDeathByStarvation(),1,1,2,2
net.sf.freecol.server.model.ServerColonyTest.testEqualFoodProductionConsumptionCase(),1,1,2,2
net.sf.freecol.server.model.ServerColonyTest.testFoodConsumption(),0,1,1,1
net.sf.freecol.server.model.ServerColonyTest.testInvalidCompletion(),1,1,2,2
net.sf.freecol.server.model.ServerColonyTest.testLibertyAndImmigration(),0,1,1,1
net.sf.freecol.server.model.ServerColonyTest.testNoBuildingMaterialsProductionWhenBuildingNothing(),0,1,1,1
"net.sf.freecol.server.model.ServerColonyTile.ServerColonyTile(Game, Colony, Tile)",0,1,1,1
"net.sf.freecol.server.model.ServerColonyTile.ServerColonyTile(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerColonyTile.csNewTurn(Random, LogBuilder, ChangeSet)",7,4,6,6
"net.sf.freecol.server.model.ServerColonyTile.expendResource(Tile, GoodsType, UnitType)",3,4,2,4
"net.sf.freecol.server.model.ServerEurope.ServerEurope(Game, Player)",0,1,1,1
"net.sf.freecol.server.model.ServerEurope.ServerEurope(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerEurope.csEquipForRole(Unit, Role, int, Random, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerEurope.csNewTurn(Random, LogBuilder, ChangeSet)",2,1,3,3
"net.sf.freecol.server.model.ServerEurope.equipForRole(Unit, Role, int)",10,3,6,9
"net.sf.freecol.server.model.ServerEurope.extractRecruitable(int, Random)",6,1,5,5
net.sf.freecol.server.model.ServerEurope.fillRecruitables(Random),1,1,2,2
"net.sf.freecol.server.model.ServerEurope.generateFountainRecruits(int, Random)",1,1,2,2
net.sf.freecol.server.model.ServerEurope.generateRecruitablesList(),1,1,3,3
"net.sf.freecol.server.model.ServerEurope.increasePrice(UnitType, int)",3,1,4,4
net.sf.freecol.server.model.ServerEurope.increaseRecruitmentDifficulty(),0,1,1,1
net.sf.freecol.server.model.ServerEurope.initializeMigration(Random),1,1,2,2
net.sf.freecol.server.model.ServerEurope.replaceRecruits(Random),0,1,1,1
net.sf.freecol.server.model.ServerGame.ServerGame(Specification),0,1,1,1
"net.sf.freecol.server.model.ServerGame.ServerGame(Specification, FreeColXMLReader)",0,1,1,1
"net.sf.freecol.server.model.ServerGame.ServerGame(Specification, Random)",0,1,1,1
"net.sf.freecol.server.model.ServerGame.changeAI(Player, boolean)",0,1,1,1
net.sf.freecol.server.model.ServerGame.checkForWinner(),9,7,6,7
"net.sf.freecol.server.model.ServerGame.csAcceptTrade(DiplomaticTrade, Unit, Settlement, ChangeSet)",76,14,38,43
"net.sf.freecol.server.model.ServerGame.csNewTurn(Random, LogBuilder, ChangeSet)",3,1,4,4
net.sf.freecol.server.model.ServerGame.csNextTurn(ChangeSet),1,1,1,2
"net.sf.freecol.server.model.ServerGame.csSpanishSuccession(ChangeSet, LogBuilder, Event)",27,5,15,19
net.sf.freecol.server.model.ServerGame.equals(Object),0,1,1,1
net.sf.freecol.server.model.ServerGame.establishUnknownEnemy(),1,2,1,2
net.sf.freecol.server.model.ServerGame.getConnectedPlayers(Player...),1,1,2,2
net.sf.freecol.server.model.ServerGame.getNextId(),0,1,1,1
net.sf.freecol.server.model.ServerGame.hashCode(),0,1,1,1
net.sf.freecol.server.model.ServerGame.isNextPlayerInNewTurn(),1,1,2,2
net.sf.freecol.server.model.ServerGame.randomize(Random),1,1,2,2
"net.sf.freecol.server.model.ServerGame.sendTo(Player, ChangeSet)",1,1,2,2
net.sf.freecol.server.model.ServerGame.sendToAll(ChangeSet),0,1,1,1
"net.sf.freecol.server.model.ServerGame.sendToList(List<Player>, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerGame.sendToOthers(Player, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerGame.spanishSuccessionReady(Event, List<Player>, LogBuilder)",11,4,3,9
net.sf.freecol.server.model.ServerGame.updatePlayers(List<? extends Player>),1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, Player, String, Tile, boolean, UnitType, Unit)",0,1,1,1
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, Player, Tile, IndianSettlement)",3,1,3,4
"net.sf.freecol.server.model.ServerIndianSettlement.ServerIndianSettlement(Game, String)",0,1,1,1
net.sf.freecol.server.model.ServerIndianSettlement.addUnits(Random),1,1,2,2
net.sf.freecol.server.model.ServerIndianSettlement.addUnits(int),1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.changeAlarm(Player, int)",2,1,3,3
"net.sf.freecol.server.model.ServerIndianSettlement.consumeGoods(GoodsType, int)",1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.csChangeAlarm(Player, int, boolean, ChangeSet)",3,1,2,3
"net.sf.freecol.server.model.ServerIndianSettlement.csChangeMissionary(Unit, ChangeSet)",4,2,4,5
"net.sf.freecol.server.model.ServerIndianSettlement.csCheckTension(Player, Level, ChangeSet)",6,4,6,9
"net.sf.freecol.server.model.ServerIndianSettlement.csEquipForRole(Unit, Role, int, Random, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.csKillMissionary(Boolean, ChangeSet)",5,2,3,4
"net.sf.freecol.server.model.ServerIndianSettlement.csModifyAlarm(Player, int, boolean, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.csNewTurn(Random, LogBuilder, ChangeSet)",13,3,12,12
"net.sf.freecol.server.model.ServerIndianSettlement.csStartTurn(Random, ChangeSet)",4,2,4,5
net.sf.freecol.server.model.ServerIndianSettlement.removeAlarm(Player),1,1,2,2
"net.sf.freecol.server.model.ServerIndianSettlement.setAlarm(Player, Tension)",2,1,2,3
net.sf.freecol.server.model.ServerIndianSettlement.updateMostHated(),1,1,2,2
net.sf.freecol.server.model.ServerIndianSettlementTest.testFoodConsumption(),0,1,1,1
net.sf.freecol.server.model.ServerIndianSettlementTest.testHorseBreeding(),0,1,1,1
net.sf.freecol.server.model.ServerIndianSettlementTest.testHorseBreedingNoFoodAvail(),1,1,2,2
net.sf.freecol.server.model.ServerIndianSettlementTest.testPricing(),0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, Connection)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.ServerPlayer(Game, boolean, Nation)",0,1,1,1
net.sf.freecol.server.model.ServerPlayer.addExtraTrade(AbstractGoods),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.addHistory(HistoryEvent),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.addStanceChange(Player),1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.buyInEurope(Random, GoodsContainer, GoodsType, int)",10,4,3,6
net.sf.freecol.server.model.ServerPlayer.canRecruitFoundingFather(),4,2,4,7
net.sf.freecol.server.model.ServerPlayer.checkForDeath(),42,21,22,32
net.sf.freecol.server.model.ServerPlayer.checkForREFDefeat(),15,8,6,11
net.sf.freecol.server.model.ServerPlayer.checkFoundingFather(),6,1,3,4
net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Collection<Tile>),1,1,2,2
net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Stream<Tile>),1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.collectNewTiles(Tile, int)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.createUnits(List<AbstractUnit>, Location, Random)",7,4,5,5
"net.sf.freecol.server.model.ServerPlayer.csAddFoundingFather(FoundingFather, Random, ChangeSet)",67,5,27,35
"net.sf.freecol.server.model.ServerPlayer.csAddMercenaries(List<AbstractUnit>, int, Random, ChangeSet)",5,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csApplyDisaster(Random, Colony, Disaster, ChangeSet)",71,7,23,28
"net.sf.freecol.server.model.ServerPlayer.csAutoequipUnit(Unit, Settlement, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csBombardEnemyShips(Random, ChangeSet)",5,1,7,7
"net.sf.freecol.server.model.ServerPlayer.csBurnMissions(Unit, IndianSettlement, ChangeSet)",2,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csCaptureAutoEquip(Unit, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csCaptureColony(Unit, ServerColony, Random, ChangeSet)",2,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csCaptureConvert(Unit, IndianSettlement, Random, ChangeSet)",3,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csCaptureEquip(Unit, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csCaptureEquipment(Unit, Unit, Role, ChangeSet)",10,1,5,5
"net.sf.freecol.server.model.ServerPlayer.csCaptureUnit(Unit, Unit, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csChangeOwner(Unit, Player, String, Location, ChangeSet)",25,6,13,15
"net.sf.freecol.server.model.ServerPlayer.csChangeStance(Stance, Player, boolean, ChangeSet)",11,1,8,8
"net.sf.freecol.server.model.ServerPlayer.csClaimLand(Tile, Settlement, int, ChangeSet)",10,1,6,8
"net.sf.freecol.server.model.ServerPlayer.csCombat(FreeColGameObject, FreeColGameObject, List<CombatEffectType>, Random, ChangeSet)",240,6,116,171
"net.sf.freecol.server.model.ServerPlayer.csCompleteNativeDemand(ServerPlayer, Unit, Colony, GoodsType, int, IndianDemandAction, ChangeSet)",7,1,4,4
"net.sf.freecol.server.model.ServerPlayer.csContact(Player, ChangeSet)",6,4,3,4
"net.sf.freecol.server.model.ServerPlayer.csDamageBuilding(Building, ChangeSet)",8,3,7,7
"net.sf.freecol.server.model.ServerPlayer.csDamageColonyShips(Unit, Colony, ChangeSet)",5,1,5,5
"net.sf.freecol.server.model.ServerPlayer.csDamageShip(Unit, Location, ChangeSet)",3,1,4,4
"net.sf.freecol.server.model.ServerPlayer.csDamageShipAttack(Unit, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csDamageShipBombard(Settlement, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csDemoteUnit(Unit, Unit, ChangeSet)",4,2,3,4
"net.sf.freecol.server.model.ServerPlayer.csDestroyColony(Unit, Colony, Random, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csDestroySettlement(Unit, IndianSettlement, Random, ChangeSet)",4,1,5,5
"net.sf.freecol.server.model.ServerPlayer.csDiplomacy(DiplomacySession, DiplomaticTrade, ChangeSet)",1,1,1,3
"net.sf.freecol.server.model.ServerPlayer.csDisposeSettlement(Settlement, ChangeSet)",12,2,10,11
"net.sf.freecol.server.model.ServerPlayer.csEmigrate(int, MigrationType, Random, ChangeSet)",4,1,4,7
net.sf.freecol.server.model.ServerPlayer.csEndTurn(ChangeSet),3,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csEuropeanFirstContact(Unit, Settlement, Unit, ChangeSet)",5,4,3,5
"net.sf.freecol.server.model.ServerPlayer.csEvadeAttack(Unit, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csEvadeBombard(Settlement, Unit, ChangeSet)",0,1,1,1
net.sf.freecol.server.model.ServerPlayer.csFlushMarket(ChangeSet),3,2,3,4
"net.sf.freecol.server.model.ServerPlayer.csFlushMarket(GoodsType, ChangeSet)",1,1,2,2
net.sf.freecol.server.model.ServerPlayer.csKill(ChangeSet),30,1,20,21
"net.sf.freecol.server.model.ServerPlayer.csLootShip(Unit, Unit, ChangeSet)",4,1,4,4
"net.sf.freecol.server.model.ServerPlayer.csLoseAutoEquip(Unit, Unit, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csLoseEquip(Unit, Unit, ChangeSet)",4,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csLoseLocation(Location, ChangeSet)",3,1,3,3
"net.sf.freecol.server.model.ServerPlayer.csMercenaries(int, List<AbstractUnit>, MonarchAction, Random, ChangeSet)",2,2,2,3
"net.sf.freecol.server.model.ServerPlayer.csModifyTension(Player, int, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csModifyTension(Player, int, Settlement, ChangeSet)",5,1,5,5
"net.sf.freecol.server.model.ServerPlayer.csNativeFirstContact(Player, Tile, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csNaturalDisasters(Random, ChangeSet, int)",12,5,5,6
"net.sf.freecol.server.model.ServerPlayer.csNewTurn(Random, LogBuilder, ChangeSet)",46,5,24,27
"net.sf.freecol.server.model.ServerPlayer.csPayUpkeep(Random, ChangeSet)",8,1,6,6
"net.sf.freecol.server.model.ServerPlayer.csPillageColony(Unit, Colony, Random, ChangeSet)",10,1,6,7
"net.sf.freecol.server.model.ServerPlayer.csPromoteUnit(Unit, ChangeSet)",4,2,3,4
"net.sf.freecol.server.model.ServerPlayer.csRaiseTax(int, Goods, boolean, ChangeSet)",10,1,5,6
"net.sf.freecol.server.model.ServerPlayer.csSeeNewTiles(Collection<? extends Tile>, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csSetTax(int, ChangeSet)",2,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csSinkColonyShips(Unit, Colony, ChangeSet)",5,1,5,5
"net.sf.freecol.server.model.ServerPlayer.csSinkShip(Unit, Player, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.csSinkShipAttack(Unit, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csSinkShipBombard(Settlement, Unit, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.csSlaughterUnit(Unit, Unit, ChangeSet)",5,1,6,6
"net.sf.freecol.server.model.ServerPlayer.csStartTurn(Random, ChangeSet)",65,8,25,27
"net.sf.freecol.server.model.ServerPlayer.csWithdraw(ChangeSet, ModelMessage, HistoryEvent)",4,1,3,4
"net.sf.freecol.server.model.ServerPlayer.csYearlyGoodsAdjust(Random, ChangeSet)",9,4,2,7
net.sf.freecol.server.model.ServerPlayer.exploreForSettlement(Settlement),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.exploreForUnit(Unit),2,1,5,5
net.sf.freecol.server.model.ServerPlayer.exploreMap(boolean),6,1,5,5
net.sf.freecol.server.model.ServerPlayer.exploreTile(Tile),1,1,2,2
net.sf.freecol.server.model.ServerPlayer.exploreTiles(Collection<? extends Tile>),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.flushExtraTrades(Random),1,1,2,2
"net.sf.freecol.server.model.ServerPlayer.getBuildingForEffect(Colony, Effect, Random)",1,1,2,2
net.sf.freecol.server.model.ServerPlayer.getConnection(),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.getFreeBuildingTypes(),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.getRandomFoundingFathers(Random),7,1,5,6
net.sf.freecol.server.model.ServerPlayer.getRemainingEmigrants(),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.getSlaughterTension(Unit),10,3,3,5
"net.sf.freecol.server.model.ServerPlayer.getUnitForEffect(Colony, Effect, Random)",1,1,2,2
net.sf.freecol.server.model.ServerPlayer.hasExplored(Tile),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.ignoreMercenaries(ChangeSet),0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.ignoreTax(int, Goods, ChangeSet)",0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.initialize(Game, boolean, Nation)",13,4,5,7
"net.sf.freecol.server.model.ServerPlayer.loadShips(List<Unit>, List<Unit>, Random)",9,1,6,6
net.sf.freecol.server.model.ServerPlayer.makeTeaPartyModifier(),1,1,2,2
net.sf.freecol.server.model.ServerPlayer.newTradeRoute(),0,1,1,1
"net.sf.freecol.server.model.ServerPlayer.propagateToEuropeanMarkets(GoodsType, int, Random)",6,3,4,6
net.sf.freecol.server.model.ServerPlayer.randomizeGame(Random),14,6,8,11
"net.sf.freecol.server.model.ServerPlayer.reassignTiles(Collection<Tile>, Settlement)",37,4,17,21
"net.sf.freecol.server.model.ServerPlayer.sellInEurope(Random, GoodsContainer, GoodsType, int)",8,1,4,5
net.sf.freecol.server.model.ServerPlayer.send(ChangeSet),2,2,2,3
net.sf.freecol.server.model.ServerPlayer.setConnection(Connection),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.setRemainingEmigrants(int),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.toString(),0,1,1,1
net.sf.freecol.server.model.ServerPlayer.updateCurrentFather(FoundingFather),1,1,2,2
net.sf.freecol.server.model.ServerPlayer.updateScore(),7,1,3,7
"net.sf.freecol.server.model.ServerPlayerTest.buyUntilPriceRise(Game, ServerPlayer, GoodsType)",2,2,2,3
"net.sf.freecol.server.model.ServerPlayerTest.sellUntilPriceDrop(Game, ServerPlayer, GoodsType)",2,2,2,3
net.sf.freecol.server.model.ServerPlayerTest.tearDown(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testBuyingMakesPricesRaise(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOver1600Threshold(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverNoUnits(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverUnitsGoingToEurope(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckGameOverUnitsGoingToNewWorld(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckNoGameOverEnoughMoney(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testCheckNoGameOverHasColonistInNewWorld(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testDutchMarket(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testHasExploredTile(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testLoadInColony(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testLoadInEurope(),0,1,1,1
net.sf.freecol.server.model.ServerPlayerTest.testMarketRecovery(),5,1,2,4
net.sf.freecol.server.model.ServerPlayerTest.testSellingMakesPricesFall(),0,1,1,1
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, Region)",0,1,1,1
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, RegionType)",0,1,1,1
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Game, String, RegionType, Region)",1,1,2,2
"net.sf.freecol.server.model.ServerRegion.ServerRegion(Map, String, RegionType, Region)",0,1,1,1
net.sf.freecol.server.model.ServerRegion.addTile(Tile),5,1,2,5
net.sf.freecol.server.model.ServerRegion.containsCenter(ServerRegion),0,1,1,1
"net.sf.freecol.server.model.ServerRegion.csDiscover(Player, Unit, Turn, String, ChangeSet)",4,2,2,5
"net.sf.freecol.server.model.ServerRegion.fillOcean(Map, Tile, ServerRegion, Rectangle)",13,1,9,9
net.sf.freecol.server.model.ServerRegion.getBounds(),0,1,1,1
net.sf.freecol.server.model.ServerRegion.getCenter(),0,1,1,1
net.sf.freecol.server.model.ServerRegion.getSize(),0,1,1,1
net.sf.freecol.server.model.ServerRegion.isGeographic(),1,1,1,2
"net.sf.freecol.server.model.ServerRegion.requireFixedRegions(Map, LogBuilder)",98,6,45,53
net.sf.freecol.server.model.ServerRegion.setSize(int),0,1,1,1
net.sf.freecol.server.model.ServerRegion.toString(),0,1,1,1
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Player, UnitType)",0,1,1,1
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Player, UnitType, Role)",4,1,3,4
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, Location, Unit)",2,1,3,3
"net.sf.freecol.server.model.ServerUnit.ServerUnit(Game, String)",0,1,1,1
"net.sf.freecol.server.model.ServerUnit.csActivateSentries(Tile, ChangeSet)",1,1,2,2
"net.sf.freecol.server.model.ServerUnit.csCheckDiscoverRegion(Tile, ChangeSet)",2,1,4,4
"net.sf.freecol.server.model.ServerUnit.csEmbark(Unit, ChangeSet)",7,1,6,7
"net.sf.freecol.server.model.ServerUnit.csExploreLostCityRumour(Random, ChangeSet)",43,2,13,33
"net.sf.freecol.server.model.ServerUnit.csImproveTile(Random, ChangeSet)",17,1,13,14
"net.sf.freecol.server.model.ServerUnit.csMove(Tile, Random, ChangeSet)",31,3,31,32
net.sf.freecol.server.model.ServerUnit.csNativeBurialGround(ChangeSet),0,1,1,1
"net.sf.freecol.server.model.ServerUnit.csNewContactCheck(Tile, boolean, ChangeSet)",43,3,21,24
"net.sf.freecol.server.model.ServerUnit.csNewTurn(Random, LogBuilder, ChangeSet)",74,3,33,39
"net.sf.freecol.server.model.ServerUnit.csRemove(See, Location, ChangeSet)",1,1,2,2
net.sf.freecol.server.model.ServerUnit.csRepairUnit(ChangeSet),1,1,2,2
"net.sf.freecol.server.model.ServerUnit.csVisit(ServerPlayer, IndianSettlement, int, ChangeSet)",4,1,5,5
"net.sf.freecol.server.model.ServerUnit.getSlowedBy(Tile, Random)",18,4,13,16
"net.sf.freecol.server.model.ServerUnitTest.hasImprovement(Tile, TileImprovementType)",2,3,3,3
net.sf.freecol.server.model.ServerUnitTest.testColonyProfitFromEnhancement(),1,1,2,2
net.sf.freecol.server.model.ServerUnitTest.testDoAssignedWorkHardyPioneerBuildRoad(),2,1,3,3
net.sf.freecol.server.model.ServerUnitTest.testDoAssignedWorkHardyPioneerPlowPlain(),1,1,2,2
net.sf.freecol.server.model.ServerUnitTest.testExposeResource(),0,1,1,1
net.sf.freecol.server.model.ServerUnitTest.testToggleHorses(),0,1,1,1
net.sf.freecol.server.model.ServerUnitTest.testUnitGetsExperienceThroughWork(),1,1,2,2
net.sf.freecol.server.model.ServerUnitTest.testUnitLumberDelivery(),0,1,1,1
net.sf.freecol.server.model.ServerUnitTest.testUnitPromotionWorkingInWorkTile(),1,1,2,2
net.sf.freecol.server.model.Session.Session(String),1,2,1,2
net.sf.freecol.server.model.Session.clearAll(),0,1,1,1
net.sf.freecol.server.model.Session.complete(ChangeSet),0,1,1,1
net.sf.freecol.server.model.Session.completeAll(ChangeSet),1,1,2,2
net.sf.freecol.server.model.Session.findSession(Predicate<Session>),0,1,1,1
net.sf.freecol.server.model.Session.getKey(),0,1,1,1
net.sf.freecol.server.model.Session.getSession(String),0,1,1,1
net.sf.freecol.server.model.Session.isComplete(),0,1,1,1
"net.sf.freecol.server.model.Session.lookup(Class<T>, FreeColGameObject, FreeColGameObject)",0,1,1,1
"net.sf.freecol.server.model.Session.lookup(Class<T>, String)",3,1,4,4
"net.sf.freecol.server.model.Session.lookup(Class<T>, String, String)",0,1,1,1
"net.sf.freecol.server.model.Session.makeSessionKey(Class, FreeColGameObject, FreeColGameObject)",0,1,1,1
"net.sf.freecol.server.model.Session.makeSessionKey(Class, String, String)",1,1,1,2
net.sf.freecol.server.model.Session.register(),0,1,1,1
"net.sf.freecol.server.model.TimedSession.TimedSession(String, long)",0,1,1,1
net.sf.freecol.server.model.TimedSession.cancel(),1,1,2,2
net.sf.freecol.server.model.TimedSession.complete(ChangeSet),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.DummyConnection(String),0,1,1,1
"net.sf.freecol.server.networking.DummyConnection.askMessage(Message, long)",2,3,1,3
net.sf.freecol.server.networking.DummyConnection.close(),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.getOtherConnection(),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.isAlive(),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.sendMessage(Message),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.setOtherConnection(DummyConnection),0,1,1,1
net.sf.freecol.server.networking.DummyConnection.toString(),0,1,1,1
"net.sf.freecol.server.networking.Server.Server(FreeColServer, String, int)",0,1,1,1
net.sf.freecol.server.networking.Server.addConnection(Connection),1,2,1,2
net.sf.freecol.server.networking.Server.addDummyConnection(Connection),1,2,1,2
net.sf.freecol.server.networking.Server.getConnection(Socket),0,1,1,1
net.sf.freecol.server.networking.Server.getHost(),0,1,1,1
net.sf.freecol.server.networking.Server.getPort(),0,1,1,1
net.sf.freecol.server.networking.Server.removeConnection(Connection),0,1,1,1
net.sf.freecol.server.networking.Server.run(),8,1,5,5
net.sf.freecol.server.networking.Server.sendToAll(Message),0,1,1,1
"net.sf.freecol.server.networking.Server.sendToAll(Message, Connection)",7,1,4,4
net.sf.freecol.server.networking.Server.setCommsLogging(boolean),1,1,2,2
net.sf.freecol.server.networking.Server.setMessageHandlerToAllConnections(MessageHandler),1,1,2,2
net.sf.freecol.server.networking.Server.shutdown(),2,1,3,3
net.sf.freecol.tools.ColonizationMapReader.main(String[]),27,1,6,17
"net.sf.freecol.tools.ColonizationSaveGameReader.Colonist.Colonist(int, int, int)",0,1,1,1
net.sf.freecol.tools.ColonizationSaveGameReader.Colonist.print(),1,1,1,2
net.sf.freecol.tools.ColonizationSaveGameReader.ColonizationSaveGameReader(byte[]),0,1,1,1
"net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData.ColonyData(byte[], int)",6,4,1,4
net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData.print(),1,1,2,2
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.GameData(byte[]),0,1,1,1
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.getNumberOfColonies(),0,1,1,1
net.sf.freecol.tools.ColonizationSaveGameReader.GameData.print(),0,1,1,1
"net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData.PlayerData(byte[], int)",0,1,1,1
net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData.print(),1,1,1,2
"net.sf.freecol.tools.ColonizationSaveGameReader.getString(byte[], int, int)",1,1,2,2
net.sf.freecol.tools.ColonizationSaveGameReader.main(String[]),1,1,2,2
net.sf.freecol.tools.ColonizationSaveGameReader.run(),2,1,3,3
net.sf.freecol.tools.DesktopEntry.main(String[]),23,5,8,12
net.sf.freecol.tools.FSGConverter.FSGConverter(),0,1,1,1
"net.sf.freecol.tools.FSGConverter.convertToXML(File, File)",0,1,1,1
"net.sf.freecol.tools.FSGConverter.convertToXML(InputStream, OutputStream)",26,2,10,16
net.sf.freecol.tools.FSGConverter.getFSGConverter(),1,1,1,2
net.sf.freecol.tools.FSGConverter.main(String[]),13,1,6,7
net.sf.freecol.tools.FSGConverter.printUsage(),0,1,1,1
net.sf.freecol.tools.FlagTest.FlagTest(),5,1,4,4
net.sf.freecol.tools.FlagTest.actionPerformed(ActionEvent),0,1,1,1
"net.sf.freecol.tools.FlagTest.enable(Component[], boolean)",1,1,2,2
net.sf.freecol.tools.FlagTest.getNumbers(int),1,1,2,2
net.sf.freecol.tools.FlagTest.itemStateChanged(ItemEvent),23,1,9,10
net.sf.freecol.tools.FlagTest.main(String[]),0,1,1,1
net.sf.freecol.tools.FlagTest.setColors(),3,1,3,3
"net.sf.freecol.tools.ForestMaker.ImageLocation.ImageLocation(BufferedImage, int, int)",0,1,1,1
net.sf.freecol.tools.ForestMaker.ImageLocation.compareTo(ImageLocation),1,1,1,2
net.sf.freecol.tools.ForestMaker.ImageLocation.equals(Object),2,2,3,3
net.sf.freecol.tools.ForestMaker.ImageLocation.hashCode(),0,1,1,1
net.sf.freecol.tools.ForestMaker.main(String[]),80,10,20,30
net.sf.freecol.tools.GenerateDocumentation.generateDocumentation(String[]),17,6,9,9
net.sf.freecol.tools.GenerateDocumentation.getResource(String),13,4,7,8
net.sf.freecol.tools.GenerateDocumentation.localize(String),0,1,1,1
"net.sf.freecol.tools.GenerateDocumentation.localize(String, String, String)",0,1,1,1
net.sf.freecol.tools.GenerateDocumentation.main(String[]),1,1,2,2
net.sf.freecol.tools.GenerateDocumentation.readResources(),4,1,4,4
net.sf.freecol.tools.InstallerTranslations.main(String[]),27,6,14,14
net.sf.freecol.tools.InstallerTranslations.readFile(File),4,1,4,4
net.sf.freecol.tools.MapConverter.main(String[]),12,4,6,6
net.sf.freecol.tools.MergeTranslations.main(String[]),18,1,9,10
net.sf.freecol.tools.MergeTranslations.readFile(File),4,1,4,4
net.sf.freecol.tools.RiverMaker.branchCount(int[]),3,1,1,3
net.sf.freecol.tools.RiverMaker.getName(int[]),1,1,2,2
net.sf.freecol.tools.RiverMaker.main(String[]),19,5,7,8
net.sf.freecol.tools.RiverMaker.nextBranch(int[]),4,3,1,3
net.sf.freecol.tools.SaveGameValidator.main(String[]),12,1,8,8
net.sf.freecol.tools.Texture2Tile.closerToCorrectAspectWithoutDoublingHorizontally(BufferedImage),0,1,1,1
"net.sf.freecol.tools.Texture2Tile.combineQuarterTiles(BufferedImage, BufferedImage)",0,1,1,1
"net.sf.freecol.tools.Texture2Tile.createImageWithTextureFill(BufferedImage, int, int)",0,1,1,1
net.sf.freecol.tools.Texture2Tile.createNonRotatedResult(BufferedImage),0,1,1,1
"net.sf.freecol.tools.Texture2Tile.createRotatedImage(BufferedImage, int)",0,1,1,1
net.sf.freecol.tools.Texture2Tile.createRotatedResult(BufferedImage),0,1,1,1
"net.sf.freecol.tools.Texture2Tile.extractQuarterTileA(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.tools.Texture2Tile.extractQuarterTileB(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.tools.Texture2Tile.imageWithMaskApplied(BufferedImage, String)",0,1,1,1
net.sf.freecol.tools.Texture2Tile.main(String[]),2,1,4,4
net.sf.freecol.tools.Texture2Tile.printUsage(),0,1,1,1
"net.sf.freecol.tools.Texture2Tile.seamlessRescaleTexture(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.tools.Texture2Tile.seamlessRescaleTextureIfNeeded(BufferedImage, int, int)",5,4,4,6
"net.sf.freecol.tools.Texture2Tile.tileThreeByThreeAndRescaledTo(BufferedImage, int, int)",0,1,1,1
"net.sf.freecol.tools.TranslationReport.isInVariable(ArrayList<String>, String, String, String, int, boolean)",12,1,5,6
net.sf.freecol.tools.TranslationReport.main(String[]),65,1,28,29
net.sf.freecol.tools.TranslationReport.prettyPrint(int),3,1,4,4
net.sf.freecol.tools.TranslationReport.shortenName(String),1,1,2,2
net.sf.freecol.tools.TranslationReport.sort(ArrayList<String>),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.IndianSettlementBuilder(Game),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.build(),10,7,5,8
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.capital(boolean),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.getSimpleName(Player, boolean)",1,1,2,2
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.initialBravesInCamp(int),1,2,1,2
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.missionary(Unit),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.player(Player),2,2,2,3
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.reset(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.setStartingParams(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.settlementTile(Tile),1,2,1,2
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder.skillToTeach(String),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.MapBuilder(Game),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.build(),4,1,3,3
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.completeWorkingGrid(),6,4,1,4
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.reset(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setBaseTileType(TileType),1,2,1,2
"net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setDimensions(int, int)",3,4,1,4
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setExploredByAll(boolean),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setStartingParams(),4,1,1,4
"net.sf.freecol.util.test.FreeColTestCase.MapBuilder.setTileType(int, int, TileType)",5,4,1,6
"net.sf.freecol.util.test.FreeColTestCase.addUnitTypeChange(String, UnitType, UnitType, int, int)",1,1,2,2
"net.sf.freecol.util.test.FreeColTestCase.checkCombat(String, List<CombatEffectType>, CombatEffectType...)",10,5,4,8
"net.sf.freecol.util.test.FreeColTestCase.checkGoods(String, List<AbstractGoods>, AbstractGoods...)",1,1,2,2
net.sf.freecol.util.test.FreeColTestCase.clearWorkLocation(WorkLocation),4,1,4,4
"net.sf.freecol.util.test.FreeColTestCase.fakeAttackResult(CombatEffectType, FreeColGameObject, FreeColGameObject)",6,3,3,5
net.sf.freecol.util.test.FreeColTestCase.getCoastTestMap(TileType),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.getCoastTestMap(TileType, boolean)",5,1,5,5
net.sf.freecol.util.test.FreeColTestCase.getGame(),1,1,2,2
"net.sf.freecol.util.test.FreeColTestCase.getServerPlayer(Game, String)",0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getSpecification(String),3,2,3,3
net.sf.freecol.util.test.FreeColTestCase.getStandardColony(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getStandardColony(int),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.getStandardColony(int, int, int)",0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getStandardGame(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getStandardGame(String),8,3,6,7
net.sf.freecol.util.test.FreeColTestCase.getTestMap(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getTestMap(TileType),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.getTestMap(TileType, boolean)",0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.getTestMap(boolean),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.nonServerBuildColony(Unit, Colony)",0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.nonServerJoinColony(Unit, Colony)",0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.setGame(Game),0,1,1,1
"net.sf.freecol.util.test.FreeColTestCase.setProductionBonus(Colony, int)",1,1,2,2
net.sf.freecol.util.test.FreeColTestCase.setUp(),1,1,2,2
net.sf.freecol.util.test.FreeColTestCase.spec(),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.spec(String),0,1,1,1
net.sf.freecol.util.test.FreeColTestCase.tearDown(),0,1,1,1
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.ColonyBuilder(Game),0,1,1,1
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.addColonist(UnitType),1,1,2,2
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.build(),9,5,5,7
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.colonyName(String),1,2,1,2
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.colonyTile(Tile),1,2,1,2
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.initialColonists(int),1,2,1,2
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.player(Player),2,2,2,3
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.reset(),0,1,1,1
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.setGame(Game),0,1,1,1
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder.setStartingParams(),0,1,1,1
net.sf.freecol.util.test.FreeColTestUtils.getColonyBuilder(),3,2,2,3
net.sf.freecol.util.test.FreeColTestUtils.setStudentSelection(boolean),0,1,1,1
net.sf.freecol.util.test.MockMapGenerator.MockMapGenerator(Map),0,1,1,1
"net.sf.freecol.util.test.MockMapGenerator.generateEmptyMap(Game, int, int, LogBuilder)",0,1,1,1
"net.sf.freecol.util.test.MockMapGenerator.generateMap(Game, Map, boolean, LogBuilder)",9,3,4,10
net.sf.freecol.util.test.MockMapGenerator.setMap(Map),0,1,1,1
net.sf.freecol.util.test.MockPseudoRandom.MockPseudoRandom(),0,1,1,1
"net.sf.freecol.util.test.MockPseudoRandom.MockPseudoRandom(List<Integer>, boolean)",0,1,1,1
net.sf.freecol.util.test.MockPseudoRandom.getNext(),4,3,4,5
net.sf.freecol.util.test.MockPseudoRandom.nextDouble(),1,1,2,2
net.sf.freecol.util.test.MockPseudoRandom.nextFloat(),1,1,2,2
net.sf.freecol.util.test.MockPseudoRandom.nextInt(int),2,2,2,3
"net.sf.freecol.util.test.MockPseudoRandom.setNextNumbers(List<Integer>, boolean)",0,1,1,1
next(),1,n/a,n/a,n/a
propertyChange(PropertyChangeEvent),1,n/a,n/a,n/a
remove(),1,n/a,n/a,n/a
requestFocus(),0,n/a,n/a,n/a
run(),0,n/a,n/a,n/a
scoreTile(Tile),0,n/a,n/a,n/a
setUp(),0,n/a,n/a,n/a
valueChanged(ListSelectionEvent),1,n/a,n/a,n/a
verify(JComponent),0,n/a,n/a,n/a
windowClosed(WindowEvent),0,n/a,n/a,n/a
windowClosing(WindowEvent),0,n/a,n/a,n/a
windowGainedFocus(WindowEvent),1,n/a,n/a,n/a

Class,OCavg,OCmax,WMC
net.sf.freecol.AllTests,"1,00",1,2
net.sf.freecol.FreeCol,"3,04",63,207
net.sf.freecol.FreeCol.LogLevel,"1,50",2,3
net.sf.freecol.client.AllTests,"1,00",1,1
net.sf.freecol.client.ClientOptions,"2,26",8,52
net.sf.freecol.client.ClientTestHelper,"1,00",1,2
net.sf.freecol.client.FreeColClient,"1,73",10,95
net.sf.freecol.client.control.AllTests,"1,00",1,1
net.sf.freecol.client.control.ClientInputHandler,"1,00",1,3
net.sf.freecol.client.control.ConnectController,"5,00",10,60
net.sf.freecol.client.control.FreeColClientHolder,"1,14",2,16
net.sf.freecol.client.control.InGameController,"4,62",45,786
net.sf.freecol.client.control.InGameController.MoveMode,"2,00",2,4
net.sf.freecol.client.control.MapEditorController,"1,60",3,24
net.sf.freecol.client.control.MapTransform,"1,00",1,2
net.sf.freecol.client.control.MoveTest,"1,50",2,3
net.sf.freecol.client.control.PreGameController,"1,62",6,39
net.sf.freecol.client.control.SoundController,"2,29",5,16
net.sf.freecol.client.gui.AllTests,"1,00",1,1
net.sf.freecol.client.gui.Canvas,"2,67",18,203
net.sf.freecol.client.gui.Canvas.ToolBoxFrame,n/a,n/a,0
net.sf.freecol.client.gui.CanvasMapEditorMouseListener,"4,00",15,36
net.sf.freecol.client.gui.CanvasMouseListener,"2,83",8,17
net.sf.freecol.client.gui.CanvasMouseMotionListener,"1,33",2,4
net.sf.freecol.client.gui.ChoiceItem,"1,58",5,30
net.sf.freecol.client.gui.FontLibrary,"2,36",14,33
net.sf.freecol.client.gui.FontLibrary.FontType,n/a,n/a,0
net.sf.freecol.client.gui.FontTest,"1,00",1,2
net.sf.freecol.client.gui.FrameMotionListener,"1,75",2,7
net.sf.freecol.client.gui.FreeColFrame,"2,00",6,14
net.sf.freecol.client.gui.FullScreenFrameListener,"1,12",2,9
net.sf.freecol.client.gui.GUI,"1,23",11,263
net.sf.freecol.client.gui.GUI.ViewMode,n/a,n/a,0
net.sf.freecol.client.gui.GrayLayer,"4,00",9,12
net.sf.freecol.client.gui.ImageLibrary,"1,59",16,272
net.sf.freecol.client.gui.ImageLibrary.PathType,"2,00",5,8
net.sf.freecol.client.gui.LoadingSavegameInfo,"1,00",1,6
net.sf.freecol.client.gui.ModifierFormat,"2,88",7,23
net.sf.freecol.client.gui.ScrollThread,"1,83",6,11
net.sf.freecol.client.gui.Scrolling,"2,88",9,23
net.sf.freecol.client.gui.Size,"1,50",2,9
net.sf.freecol.client.gui.SplashScreen,"1,00",1,1
net.sf.freecol.client.gui.SwingGUI,"1,86",18,371
net.sf.freecol.client.gui.SwingGUI.PopupPosition,n/a,n/a,0
net.sf.freecol.client.gui.TilePopup,"7,71",27,54
net.sf.freecol.client.gui.Widgets,"1,42",4,109
net.sf.freecol.client.gui.Widgets.DialogCallback,"1,33",2,4
net.sf.freecol.client.gui.WindowedFrameListener,"1,12",2,9
net.sf.freecol.client.gui.action.AboutAction,"1,00",1,2
net.sf.freecol.client.gui.action.ActionManager,"2,88",5,23
net.sf.freecol.client.gui.action.AssignTradeRouteAction,"1,67",2,5
net.sf.freecol.client.gui.action.AttackRangedAction,"1,67",2,5
net.sf.freecol.client.gui.action.BuildColonyAction,"1,33",2,4
net.sf.freecol.client.gui.action.CenterAction,"2,00",3,4
net.sf.freecol.client.gui.action.ChangeAction,"3,25",7,13
net.sf.freecol.client.gui.action.ChangeWindowedModeAction,"1,50",2,3
net.sf.freecol.client.gui.action.ChatAction,"1,00",1,3
net.sf.freecol.client.gui.action.ClearOrdersAction,"1,00",1,2
net.sf.freecol.client.gui.action.ColopediaAction,"1,00",1,2
net.sf.freecol.client.gui.action.ColopediaAction.PanelType,"1,00",1,1
net.sf.freecol.client.gui.action.ContinueAction,"2,50",4,5
net.sf.freecol.client.gui.action.DebugAction,"1,33",2,4
net.sf.freecol.client.gui.action.DeclareIndependenceAction,"1,00",1,3
net.sf.freecol.client.gui.action.DetermineHighSeasAction,"1,33",2,4
net.sf.freecol.client.gui.action.DisbandUnitAction,"1,00",1,2
net.sf.freecol.client.gui.action.DisplayBordersAction,"1,00",1,2
net.sf.freecol.client.gui.action.DisplayFogOfWarAction,"1,33",2,4
net.sf.freecol.client.gui.action.DisplayGridAction,"1,00",1,2
net.sf.freecol.client.gui.action.DisplayTileTextAction,"1,33",2,4
net.sf.freecol.client.gui.action.DisplayTileTextAction.DisplayText,"1,00",1,1
net.sf.freecol.client.gui.action.EndTurnAction,"1,00",1,2
net.sf.freecol.client.gui.action.EuropeAction,"1,00",1,3
net.sf.freecol.client.gui.action.ExecuteGotoOrdersAction,"1,00",1,2
net.sf.freecol.client.gui.action.FindSettlementAction,"1,00",1,2
net.sf.freecol.client.gui.action.FortifyAction,"1,00",1,3
net.sf.freecol.client.gui.action.FreeColAction,"1,21",3,41
net.sf.freecol.client.gui.action.FreeColAction.InnerMenuKeyListener,"1,25",2,5
net.sf.freecol.client.gui.action.GotoAction,"1,33",2,4
net.sf.freecol.client.gui.action.GotoTileAction,"1,00",1,3
net.sf.freecol.client.gui.action.ImprovementAction,"1,67",2,5
net.sf.freecol.client.gui.action.LoadAction,"2,33",5,7
net.sf.freecol.client.gui.action.MapControlsAction,"1,00",1,3
net.sf.freecol.client.gui.action.MapEditorAction,"1,00",1,2
net.sf.freecol.client.gui.action.MapboardAction,"1,00",1,2
net.sf.freecol.client.gui.action.MiniMapToggleFogOfWarAction,"1,20",2,6
net.sf.freecol.client.gui.action.MiniMapToggleViewAction,"1,20",2,6
net.sf.freecol.client.gui.action.MiniMapZoomInAction,"1,00",1,4
net.sf.freecol.client.gui.action.MiniMapZoomOutAction,"1,00",1,4
net.sf.freecol.client.gui.action.MoveAction,"2,67",6,8
net.sf.freecol.client.gui.action.NewAction,"1,00",1,2
net.sf.freecol.client.gui.action.NewEmptyMapAction,"1,33",2,4
net.sf.freecol.client.gui.action.OpenAction,"1,50",2,3
net.sf.freecol.client.gui.action.PreferencesAction,"1,00",1,2
net.sf.freecol.client.gui.action.QuitAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReconnectAction,"1,00",1,2
net.sf.freecol.client.gui.action.RenameAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportCargoAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportColonyAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportContinentalCongressAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportEducationAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportExplorationAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportForeignAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportHighScoresAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportHistoryAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportIndianAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportLabourAction,"1,50",2,3
net.sf.freecol.client.gui.action.ReportMilitaryAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportNavalAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportProductionAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportReligionAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportRequirementsAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportTradeAction,"1,00",1,2
net.sf.freecol.client.gui.action.ReportTurnAction,"1,00",1,2
net.sf.freecol.client.gui.action.RetireAction,"1,00",1,3
net.sf.freecol.client.gui.action.SaveAction,"2,00",3,6
net.sf.freecol.client.gui.action.SaveAndQuitAction,"2,33",3,7
net.sf.freecol.client.gui.action.ScaleMapAction,"1,25",2,5
net.sf.freecol.client.gui.action.SelectableAction,"1,29",2,9
net.sf.freecol.client.gui.action.SentryAction,"1,00",1,2
net.sf.freecol.client.gui.action.ShowDifficultyAction,"1,00",1,2
net.sf.freecol.client.gui.action.ShowGameOptionsAction,"1,00",1,2
net.sf.freecol.client.gui.action.ShowMainAction,"1,00",1,2
net.sf.freecol.client.gui.action.ShowMapGeneratorOptionsAction,"1,00",1,2
net.sf.freecol.client.gui.action.SkipUnitAction,"2,50",4,5
net.sf.freecol.client.gui.action.StartMapAction,"1,50",2,3
net.sf.freecol.client.gui.action.TilePopupAction,"1,00",1,2
net.sf.freecol.client.gui.action.ToggleViewModeAction,"2,50",4,5
net.sf.freecol.client.gui.action.TradeRouteAction,"1,00",1,2
net.sf.freecol.client.gui.action.UnitAction,"1,00",1,2
net.sf.freecol.client.gui.action.UnloadAction,"1,40",2,7
net.sf.freecol.client.gui.action.WaitAction,"1,00",1,2
net.sf.freecol.client.gui.action.ZoomInAction,"1,33",2,4
net.sf.freecol.client.gui.action.ZoomOutAction,"1,33",2,4
net.sf.freecol.client.gui.animation.Animation,"1,00",1,4
net.sf.freecol.client.gui.animation.Animations,"3,67",6,11
net.sf.freecol.client.gui.animation.UnitImageAnimation,"3,60",7,18
net.sf.freecol.client.gui.animation.UnitMoveAnimation,"3,50",6,7
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog,"4,75",8,19
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.CheckBoxRenderer,"1,33",2,4
net.sf.freecol.client.gui.dialog.CaptureGoodsDialog.GoodsItem,"1,25",2,5
net.sf.freecol.client.gui.dialog.ChooseFoundingFatherDialog,"2,00",2,4
net.sf.freecol.client.gui.dialog.ClientOptionsDialog,"2,00",2,2
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog,"2,29",6,16
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.ColorButton,"1,25",2,5
net.sf.freecol.client.gui.dialog.ConfirmDeclarationDialog.EnumRenderer,"1,00",1,2
net.sf.freecol.client.gui.dialog.DifficultyDialog,"1,71",3,12
net.sf.freecol.client.gui.dialog.DumpCargoDialog,"3,50",4,7
net.sf.freecol.client.gui.dialog.EditOptionDialog,"1,50",2,3
net.sf.freecol.client.gui.dialog.EditSettlementDialog,"3,38",15,27
net.sf.freecol.client.gui.dialog.EmigrationDialog,"3,00",3,3
net.sf.freecol.client.gui.dialog.EndTurnDialog,"2,00",4,10
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitCellRenderer,"2,33",4,7
net.sf.freecol.client.gui.dialog.EndTurnDialog.UnitWrapper,"1,00",1,2
net.sf.freecol.client.gui.dialog.FirstContactDialog,"6,00",6,6
net.sf.freecol.client.gui.dialog.Flag,"3,33",30,160
net.sf.freecol.client.gui.dialog.Flag.Alignment,n/a,n/a,0
net.sf.freecol.client.gui.dialog.Flag.Background,"1,00",1,1
net.sf.freecol.client.gui.dialog.Flag.Decoration,"1,25",2,5
net.sf.freecol.client.gui.dialog.Flag.UnionPosition,"1,00",1,1
net.sf.freecol.client.gui.dialog.Flag.UnionShape,n/a,n/a,0
net.sf.freecol.client.gui.dialog.FreeColChoiceDialog,"1,33",2,4
net.sf.freecol.client.gui.dialog.FreeColConfirmDialog,"1,00",1,3
net.sf.freecol.client.gui.dialog.FreeColDialog,"1,90",8,59
net.sf.freecol.client.gui.dialog.FreeColDialog.DialogType,n/a,n/a,0
net.sf.freecol.client.gui.dialog.FreeColInputDialog,"1,75",3,7
net.sf.freecol.client.gui.dialog.FreeColStringInputDialog,"1,00",1,4
net.sf.freecol.client.gui.dialog.GameOptionsDialog,"4,00",4,4
net.sf.freecol.client.gui.dialog.LoadDialog,"3,00",4,6
net.sf.freecol.client.gui.dialog.LoadingSavegameDialog,"1,50",3,12
net.sf.freecol.client.gui.dialog.MapGeneratorOptionsDialog,"2,75",4,11
net.sf.freecol.client.gui.dialog.MapSizeDialog,"1,33",2,4
net.sf.freecol.client.gui.dialog.MonarchDialog,"8,00",8,8
net.sf.freecol.client.gui.dialog.NativeDemandDialog,"3,00",3,3
net.sf.freecol.client.gui.dialog.NegotiationDialog,"4,73",28,71
net.sf.freecol.client.gui.dialog.NegotiationDialog.ColonyTradeItemPanel,"4,33",7,13
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoldTradeItemPanel,"2,67",5,8
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel,"4,67",8,14
net.sf.freecol.client.gui.dialog.NegotiationDialog.GoodsTradeItemPanel.GoodsBoxRenderer,"2,00",2,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel,"3,67",6,11
net.sf.freecol.client.gui.dialog.NegotiationDialog.InciteTradeItemPanel.InciteBoxRenderer,"2,00",2,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.RemoveAction,"1,00",1,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel,"3,50",5,14
net.sf.freecol.client.gui.dialog.NegotiationDialog.StanceTradeItemPanel.StanceBoxRenderer,"2,00",2,2
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel,"4,00",6,12
net.sf.freecol.client.gui.dialog.NegotiationDialog.UnitTradeItemPanel.UnitBoxRenderer,"2,00",2,2
net.sf.freecol.client.gui.dialog.OptionsDialog,"1,71",6,29
net.sf.freecol.client.gui.dialog.Parameters,"1,00",1,1
net.sf.freecol.client.gui.dialog.ParametersDialog,"1,75",3,7
net.sf.freecol.client.gui.dialog.PreCombatDialog,"7,00",8,14
net.sf.freecol.client.gui.dialog.RiverStyleDialog,"2,00",2,2
net.sf.freecol.client.gui.dialog.SaveDialog,"3,50",4,7
net.sf.freecol.client.gui.dialog.ScaleMapSizeDialog,"1,75",3,7
net.sf.freecol.client.gui.dialog.SelectAmountDialog,"3,40",3,17
net.sf.freecol.client.gui.dialog.SelectDestinationDialog,"2,58",9,31
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.Destination,"4,62",20,37
net.sf.freecol.client.gui.dialog.SelectDestinationDialog.LocationRenderer,"1,00",1,2
net.sf.freecol.client.gui.dialog.SelectTributeAmountDialog,"1,33",2,4
net.sf.freecol.client.gui.dialog.VictoryDialog,"1,00",1,1
net.sf.freecol.client.gui.dialog.WarehouseDialog,"2,25",1,9
net.sf.freecol.client.gui.dialog.WarehouseDialog.WarehouseGoodsPanel,"4,00",5,8
net.sf.freecol.client.gui.images.BaseTileTransitionImageCreator,"4,33",18,26
net.sf.freecol.client.gui.images.BeachTileAnimationImageCreator,"2,25",5,9
net.sf.freecol.client.gui.images.DeltaAnimationImageCreator,"2,25",5,9
net.sf.freecol.client.gui.images.ImageCreators,"1,00",1,5
net.sf.freecol.client.gui.images.RiverAnimationImageCreator,"2,00",4,20
net.sf.freecol.client.gui.label.AbstractGoodsLabel,"1,33",4,20
net.sf.freecol.client.gui.label.FreeColLabel,"1,00",1,2
net.sf.freecol.client.gui.label.GoodsLabel,"1,83",4,11
net.sf.freecol.client.gui.label.GoodsTypeLabel,"1,29",3,9
net.sf.freecol.client.gui.label.MarketLabel,"1,88",5,15
net.sf.freecol.client.gui.label.ProductionLabel,"3,12",12,25
net.sf.freecol.client.gui.label.UnitLabel,"3,31",22,53
net.sf.freecol.client.gui.label.UnitLabel.UnitAction,n/a,n/a,0
net.sf.freecol.client.gui.mapviewer.CanvasMapViewer,"1,75",4,14
net.sf.freecol.client.gui.mapviewer.ChatDisplay,"2,50",4,10
net.sf.freecol.client.gui.mapviewer.GUIMessage,"1,00",1,4
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter,"3,20",2,32
net.sf.freecol.client.gui.mapviewer.MapAsyncPainter.MapRendererThread,"3,00",8,15
net.sf.freecol.client.gui.mapviewer.MapViewer,"4,47",3,170
net.sf.freecol.client.gui.mapviewer.MapViewer.BorderType,n/a,n/a,0
net.sf.freecol.client.gui.mapviewer.MapViewer.TextSpecification,"1,00",1,1
net.sf.freecol.client.gui.mapviewer.MapViewer.TileClippingBounds,"1,00",1,7
net.sf.freecol.client.gui.mapviewer.MapViewerBounds,"2,96",13,68
net.sf.freecol.client.gui.mapviewer.MapViewerRepaintManager,"1,45",4,29
net.sf.freecol.client.gui.mapviewer.MapViewerScaledUtils,"1,27",4,14
net.sf.freecol.client.gui.mapviewer.MapViewerState,"1,70",9,34
net.sf.freecol.client.gui.mapviewer.RoadPainter,"5,00",9,10
net.sf.freecol.client.gui.mapviewer.TerrainCursor,"1,71",4,12
net.sf.freecol.client.gui.mapviewer.TileBounds,"1,17",2,7
net.sf.freecol.client.gui.mapviewer.TileViewer,"4,31",15,112
net.sf.freecol.client.gui.mapviewer.UnitAnimator,"1,43",3,10
net.sf.freecol.client.gui.menu.DebugMenu,"3,33",5,10
net.sf.freecol.client.gui.menu.FreeColMenuBar,"1,60",3,16
net.sf.freecol.client.gui.menu.FreeColMenuTest,"1,25",2,10
net.sf.freecol.client.gui.menu.InGameMenuBar,"2,00",4,14
net.sf.freecol.client.gui.menu.MapEditorMenuBar,"1,40",2,7
net.sf.freecol.client.gui.menu.MenuMouseMotionListener,"1,33",2,4
net.sf.freecol.client.gui.option.AbstractUnitOptionUI,"1,50",4,9
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.AbstractUnitRenderer,"1,00",1,1
net.sf.freecol.client.gui.option.AbstractUnitOptionUI.RoleRenderer,"2,00",2,2
net.sf.freecol.client.gui.option.AudioMixerOptionUI,"1,67",5,10
net.sf.freecol.client.gui.option.BooleanOptionUI,"1,00",1,8
net.sf.freecol.client.gui.option.FileOptionUI,"2,80",8,14
net.sf.freecol.client.gui.option.FreeColActionUI,"1,50",3,15
net.sf.freecol.client.gui.option.FreeColActionUI.BlinkingLabel,"1,29",3,18
net.sf.freecol.client.gui.option.IntegerOptionUI,"1,50",3,6
net.sf.freecol.client.gui.option.LanguageOptionUI,"1,00",1,4
net.sf.freecol.client.gui.option.ListOptionUI,"3,11",16,28
net.sf.freecol.client.gui.option.ModOptionUI,"1,67",3,10
net.sf.freecol.client.gui.option.ModOptionUI.BoxRenderer,"1,50",2,3
net.sf.freecol.client.gui.option.ModOptionUI.ModOptionRenderer,"1,50",2,3
net.sf.freecol.client.gui.option.OptionGroupUI,"2,73",8,30
net.sf.freecol.client.gui.option.OptionGroupUI.OptionTree,"1,00",1,2
net.sf.freecol.client.gui.option.OptionUI,"2,33",17,28
net.sf.freecol.client.gui.option.PercentageOptionUI,"1,50",2,3
net.sf.freecol.client.gui.option.RangeOptionUI,"1,67",3,5
net.sf.freecol.client.gui.option.SelectOptionUI,"1,50",3,6
net.sf.freecol.client.gui.option.SliderOptionUI,"1,00",1,5
net.sf.freecol.client.gui.option.StringOptionUI,"1,00",1,4
net.sf.freecol.client.gui.option.TextOptionUI,"1,00",1,4
net.sf.freecol.client.gui.option.UnitTypeOptionUI,"1,00",1,4
net.sf.freecol.client.gui.option.UnitTypeOptionUI.ChoiceRenderer,"2,00",2,2
net.sf.freecol.client.gui.panel.AboutPanel,"1,33",2,4
net.sf.freecol.client.gui.panel.BuildQueuePanel,"3,62",13,76
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueMouseAdapter,"5,50",10,11
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler,"5,40",20,27
net.sf.freecol.client.gui.panel.BuildQueuePanel.BuildQueueTransferHandler.BuildablesTransferable,"1,20",2,6
net.sf.freecol.client.gui.panel.BuildQueuePanel.DefaultBuildQueueCellRenderer,"3,00",5,6
net.sf.freecol.client.gui.panel.BuildQueuePanel.IndexedBuildable,"1,00",1,3
net.sf.freecol.client.gui.panel.BuildingPanel,"2,00",1,24
net.sf.freecol.client.gui.panel.BuildingPanel.UpkeepLabel,"1,00",1,2
net.sf.freecol.client.gui.panel.CargoPanel,"1,71",6,29
net.sf.freecol.client.gui.panel.ChatPanel,"1,60",4,8
net.sf.freecol.client.gui.panel.ColonyPanel,"3,15",2,107
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel,"2,00",1,12
net.sf.freecol.client.gui.panel.ColonyPanel.BuildingsPanel.ASingleBuildingPanel,"1,64",4,18
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyCargoPanel,"1,00",1,2
net.sf.freecol.client.gui.panel.ColonyPanel.ColonyInPortPanel,"1,50",2,9
net.sf.freecol.client.gui.panel.ColonyPanel.OutsideColonyPanel,"1,73",6,19
net.sf.freecol.client.gui.panel.ColonyPanel.PopulationPanel,"1,67",5,10
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel,"3,00",2,18
net.sf.freecol.client.gui.panel.ColonyPanel.TilesPanel.ASingleTilePanel,"2,69",10,35
net.sf.freecol.client.gui.panel.ColonyPanel.WarehousePanel,"1,77",6,23
net.sf.freecol.client.gui.panel.ColorCellEditor,"2,50",7,10
net.sf.freecol.client.gui.panel.ColorCellRenderer,"2,00",2,4
net.sf.freecol.client.gui.panel.ColorChooserPanel,"1,00",1,4
net.sf.freecol.client.gui.panel.ConstructionPanel,"1,89",4,17
net.sf.freecol.client.gui.panel.CornerMapControls,"3,11",7,28
net.sf.freecol.client.gui.panel.CornerMapControls.MiniMapPanelSkin,"1,50",2,3
net.sf.freecol.client.gui.panel.DeclarationPanel,"1,33",1,8
net.sf.freecol.client.gui.panel.DeclarationPanel.SignaturePanel,"2,67",8,24
net.sf.freecol.client.gui.panel.DefaultTransferHandler,"4,13",17,62
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragGestureRecognizer,"1,00",1,4
net.sf.freecol.client.gui.panel.DefaultTransferHandler.FreeColDragHandler,"1,88",4,15
net.sf.freecol.client.gui.panel.DragListener,"9,50",18,19
net.sf.freecol.client.gui.panel.DropListener,"3,00",3,3
net.sf.freecol.client.gui.panel.ErrorPanel,"1,50",2,6
net.sf.freecol.client.gui.panel.EuropePanel,"1,83",5,22
net.sf.freecol.client.gui.panel.EuropePanel.DestinationPanel,"3,12",13,25
net.sf.freecol.client.gui.panel.EuropePanel.EuropeAction,n/a,n/a,0
net.sf.freecol.client.gui.panel.EuropePanel.EuropeButton,"1,00",1,1
net.sf.freecol.client.gui.panel.EuropePanel.EuropeInPortPanel,"1,50",3,6
net.sf.freecol.client.gui.panel.EuropePanel.EuropeanDocksPanel,"1,00",1,10
net.sf.freecol.client.gui.panel.EuropePanel.MarketPanel,"2,12",8,17
net.sf.freecol.client.gui.panel.EuropePanel.TransactionLog,"1,17",2,7
net.sf.freecol.client.gui.panel.EventPanel,"2,00",1,4
net.sf.freecol.client.gui.panel.FindSettlementPanel,"2,36",9,26
net.sf.freecol.client.gui.panel.FindSettlementPanel.DisplayListOption,n/a,n/a,0
net.sf.freecol.client.gui.panel.FindSettlementPanel.SettlementRenderer,"1,50",2,3
net.sf.freecol.client.gui.panel.FreeColButton,"1,00",1,8
net.sf.freecol.client.gui.panel.FreeColButton.ButtonStyle,n/a,n/a,0
net.sf.freecol.client.gui.panel.FreeColImageBorder,"2,38",9,31
net.sf.freecol.client.gui.panel.FreeColPanel,"1,45",3,29
net.sf.freecol.client.gui.panel.FreeColProgressBar,"3,33",14,20
net.sf.freecol.client.gui.panel.GoodsTypePanel,"1,88",3,15
net.sf.freecol.client.gui.panel.ImageSelection,"1,25",2,5
net.sf.freecol.client.gui.panel.InPortPanel,"4,00",7,8
net.sf.freecol.client.gui.panel.IndianSettlementPanel,"7,00",1,14
net.sf.freecol.client.gui.panel.InfoPanel,"3,55",7,71
net.sf.freecol.client.gui.panel.InfoPanel.InfoPanelMode,n/a,n/a,0
net.sf.freecol.client.gui.panel.InformationPanel,"2,40",5,12
net.sf.freecol.client.gui.panel.MainPanel,"1,67",3,5
net.sf.freecol.client.gui.panel.MapControls,"2,00",9,22
net.sf.freecol.client.gui.panel.MapEditorTransformPanel,"2,00",5,12
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.LostCityRumourTransform,"3,00",3,3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.ResourceTransform,"7,00",7,7
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverStyleTransform,"1,50",3,6
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.RiverTransform,"3,50",6,7
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.SettlementTransform,"3,00",3,3
net.sf.freecol.client.gui.panel.MapEditorTransformPanel.TileTypeTransform,"1,00",1,3
net.sf.freecol.client.gui.panel.MigPanel,"1,20",2,6
net.sf.freecol.client.gui.panel.MiniMap,"1,68",2,42
net.sf.freecol.client.gui.panel.MiniMap.MinimapPainterThread,"3,00",3,3
net.sf.freecol.client.gui.panel.MiniMap.PrerenderedMinimap,"1,00",1,1
net.sf.freecol.client.gui.panel.NewPanel,"3,35",14,57
net.sf.freecol.client.gui.panel.NewPanel.NewPanelAction,n/a,n/a,0
net.sf.freecol.client.gui.panel.NewUnitPanel,"2,00",3,10
net.sf.freecol.client.gui.panel.PlayersTable,"3,00",5,6
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellEditor,"1,00",1,3
net.sf.freecol.client.gui.panel.PlayersTable.AdvantageCellRenderer,"3,50",6,7
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellEditor,"1,50",2,6
net.sf.freecol.client.gui.panel.PlayersTable.AvailableCellRenderer,"1,50",2,3
net.sf.freecol.client.gui.panel.PlayersTable.HeaderListener,"1,00",1,3
net.sf.freecol.client.gui.panel.PlayersTable.HeaderRenderer,"1,33",2,4
net.sf.freecol.client.gui.panel.PlayersTable.NationCellRenderer,"1,00",1,1
net.sf.freecol.client.gui.panel.PlayersTable.NationStateRenderer,"1,00",1,1
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellEditor,"1,00",1,3
net.sf.freecol.client.gui.panel.PlayersTable.PlayerCellRenderer,"2,50",4,5
net.sf.freecol.client.gui.panel.PlayersTable.PlayersTableModel,"4,00",8,36
net.sf.freecol.client.gui.panel.PortPanel,"1,44",4,13
net.sf.freecol.client.gui.panel.PurchasePanel,"1,00",1,1
net.sf.freecol.client.gui.panel.QuickActionMenu,"5,91",25,130
net.sf.freecol.client.gui.panel.RecruitPanel,"2,80",4,14
net.sf.freecol.client.gui.panel.ServerListPanel,"1,50",2,9
net.sf.freecol.client.gui.panel.ServerListPanel.ServerListTableCellRenderer,"1,00",1,1
net.sf.freecol.client.gui.panel.ServerListTableModel,"2,00",8,14
net.sf.freecol.client.gui.panel.StartGamePanel,"2,90",4,29
net.sf.freecol.client.gui.panel.StatisticsPanel,"2,00",5,8
net.sf.freecol.client.gui.panel.StatisticsPanel.StatisticsModel,"1,57",4,11
net.sf.freecol.client.gui.panel.StatusPanel,"1,00",1,2
net.sf.freecol.client.gui.panel.TilePanel,"7,67",2,23
net.sf.freecol.client.gui.panel.TradeRouteInputPanel,"2,44",6,44
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.AllGoodsTypesPanel,"1,75",3,7
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.DestinationCellRenderer,"2,50",4,5
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopGoodsTypesPanel,"1,50",2,3
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListHandler,"1,83",4,11
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopListTransferable,"1,20",2,6
net.sf.freecol.client.gui.panel.TradeRouteInputPanel.StopRenderer,"4,00",7,8
net.sf.freecol.client.gui.panel.TradeRoutePanel,"3,44",8,31
net.sf.freecol.client.gui.panel.TrainPanel,"1,00",1,1
net.sf.freecol.client.gui.panel.UnitButton,"1,50",1,6
net.sf.freecol.client.gui.panel.UnitButton.UnitButtonActionPropertyChangeListener,"6,00",11,12
net.sf.freecol.client.gui.panel.UnitPanel,"2,09",8,23
net.sf.freecol.client.gui.panel.Utility,"1,32",12,74
net.sf.freecol.client.gui.panel.WorkProductionPanel,"3,33",5,10
net.sf.freecol.client.gui.panel.WrapLayout,"2,29",9,16
net.sf.freecol.client.gui.panel.colopedia.BuildingDetailPanel,"9,67",22,29
net.sf.freecol.client.gui.panel.colopedia.ColopediaGameObjectTypePanel,"1,24",3,26
net.sf.freecol.client.gui.panel.colopedia.ColopediaPanel,"1,92",6,23
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeCellRenderer,"2,00",3,4
net.sf.freecol.client.gui.panel.colopedia.ColopediaTreeItem,"1,00",1,6
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel,"1,75",3,7
net.sf.freecol.client.gui.panel.colopedia.ConceptDetailPanel.ConceptEditorPane,"1,00",1,2
net.sf.freecol.client.gui.panel.colopedia.FatherDetailPanel,"2,50",5,10
net.sf.freecol.client.gui.panel.colopedia.GoodsDetailPanel,"7,25",24,29
net.sf.freecol.client.gui.panel.colopedia.NationDetailPanel,"1,67",3,5
net.sf.freecol.client.gui.panel.colopedia.NationTypeDetailPanel,"3,60",8,18
net.sf.freecol.client.gui.panel.colopedia.ResourcesDetailPanel,"2,33",5,7
net.sf.freecol.client.gui.panel.colopedia.TerrainDetailPanel,"3,50",6,14
net.sf.freecol.client.gui.panel.colopedia.UnitDetailPanel,"7,33",20,22
net.sf.freecol.client.gui.panel.report.CompactLabourReport,"3,90",20,78
net.sf.freecol.client.gui.panel.report.LabourData,"3,38",10,44
net.sf.freecol.client.gui.panel.report.LabourData.ColonyLocationDataGetter,"1,00",1,2
net.sf.freecol.client.gui.panel.report.LabourData.LocationData,"1,42",8,27
net.sf.freecol.client.gui.panel.report.LabourData.ProductionData,"1,00",1,4
net.sf.freecol.client.gui.panel.report.LabourData.UnitData,"1,27",2,19
net.sf.freecol.client.gui.panel.report.ReportCargoPanel,"1,00",1,4
net.sf.freecol.client.gui.panel.report.ReportClassicColonyPanel,"6,50",12,13
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel,"8,07",58,121
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary,"9,33",16,28
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.GoodsProduction,"2,50",4,5
net.sf.freecol.client.gui.panel.report.ReportCompactColonyPanel.ColonySummary.ProductionStatus,n/a,n/a,0
net.sf.freecol.client.gui.panel.report.ReportContinentalCongressPanel,"9,00",9,9
net.sf.freecol.client.gui.panel.report.ReportEducationPanel,"4,00",7,8
net.sf.freecol.client.gui.panel.report.ReportExplorationPanel,"2,00",2,2
net.sf.freecol.client.gui.panel.report.ReportForeignAffairPanel,"6,00",6,6
net.sf.freecol.client.gui.panel.report.ReportHighScoresPanel,"7,00",7,7
net.sf.freecol.client.gui.panel.report.ReportHistoryPanel,"3,00",3,3
net.sf.freecol.client.gui.panel.report.ReportIndianPanel,"9,00",15,18
net.sf.freecol.client.gui.panel.report.ReportLabourDetailPanel,"3,00",5,6
net.sf.freecol.client.gui.panel.report.ReportLabourPanel,"2,83",2,17
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanel,"1,50",2,3
net.sf.freecol.client.gui.panel.report.ReportLabourPanel.LabourUnitPanelRenderer,"1,00",1,1
net.sf.freecol.client.gui.panel.report.ReportMilitaryPanel,"1,25",2,5
net.sf.freecol.client.gui.panel.report.ReportNavalPanel,"1,00",1,4
net.sf.freecol.client.gui.panel.report.ReportPanel,"1,56",3,14
net.sf.freecol.client.gui.panel.report.ReportProductionPanel,"6,00",10,12
net.sf.freecol.client.gui.panel.report.ReportReligiousPanel,"4,00",4,4
net.sf.freecol.client.gui.panel.report.ReportRequirementsPanel,"5,11",16,46
net.sf.freecol.client.gui.panel.report.ReportTradePanel,"5,00",15,20
net.sf.freecol.client.gui.panel.report.ReportTurnPanel,"8,40",22,42
net.sf.freecol.client.gui.panel.report.ReportUnitPanel,"4,80",13,24
net.sf.freecol.client.gui.plaf.FreeColBrightPanelUI,"1,50",2,3
net.sf.freecol.client.gui.plaf.FreeColButtonUI,"2,00",4,16
net.sf.freecol.client.gui.plaf.FreeColCheckBoxMenuItemUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI,"1,00",1,4
net.sf.freecol.client.gui.plaf.FreeColCheckBoxUI.CheckBoxIcon,"2,50",7,10
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer,"4,20",16,21
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.NormalComponent,"1,00",1,1
net.sf.freecol.client.gui.plaf.FreeColComboBoxRenderer.SelectedComponent,"1,00",1,2
net.sf.freecol.client.gui.plaf.FreeColComboBoxUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColFileChooserUI,"1,33",2,4
net.sf.freecol.client.gui.plaf.FreeColFormattedTextFieldUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColLabelUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColListUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel,"1,83",4,11
net.sf.freecol.client.gui.plaf.FreeColLookAndFeel.FreeColMetalTheme,"1,00",1,8
net.sf.freecol.client.gui.plaf.FreeColMenuBarUI,"1,50",2,3
net.sf.freecol.client.gui.plaf.FreeColMenuItemUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColMenuUI,"1,50",3,12
net.sf.freecol.client.gui.plaf.FreeColOptionPaneUI,"4,67",13,42
net.sf.freecol.client.gui.plaf.FreeColPanelUI,"1,33",2,4
net.sf.freecol.client.gui.plaf.FreeColPopupMenuUI,"1,50",2,3
net.sf.freecol.client.gui.plaf.FreeColRadioButtonMenuItemUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI,"1,00",1,4
net.sf.freecol.client.gui.plaf.FreeColRadioButtonUI.RadioButtonIcon,"2,75",8,11
net.sf.freecol.client.gui.plaf.FreeColScrollPaneUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColSelectedPanelUI,"1,00",1,2
net.sf.freecol.client.gui.plaf.FreeColSpinnerUI,"1,50",2,3
net.sf.freecol.client.gui.plaf.FreeColTableHeaderUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColTableUI,"1,00",1,3
net.sf.freecol.client.gui.plaf.FreeColTextAreaUI,"1,25",2,5
net.sf.freecol.client.gui.plaf.FreeColTextFieldUI,"1,25",2,5
net.sf.freecol.client.gui.plaf.FreeColToolTipUI,"2,29",6,16
net.sf.freecol.client.gui.plaf.FreeColTransparentPanelUI,"1,50",2,3
net.sf.freecol.client.gui.plaf.LAFUtilities,"4,00",4,4
net.sf.freecol.client.gui.tooltip.BuildingToolTip,"13,50",26,27
net.sf.freecol.client.gui.tooltip.RebelToolTip,"5,50",10,11
net.sf.freecol.client.gui.video.VideoComponent,"1,25",2,10
net.sf.freecol.client.networking.UserServerAPI,"1,50",4,18
net.sf.freecol.common.AllTests,"1,00",1,1
net.sf.freecol.common.FreeColException,"1,00",1,5
net.sf.freecol.common.FreeColSeed,"1,00",1,4
net.sf.freecol.common.debug.DebugUtils,"3,65",15,124
net.sf.freecol.common.debug.FreeColDebugger,"1,49",4,52
net.sf.freecol.common.debug.FreeColDebugger.DebugMode,n/a,n/a,0
net.sf.freecol.common.i18n.AllTests,"1,00",1,1
net.sf.freecol.common.i18n.CLDRTest,"1,00",1,2
net.sf.freecol.common.i18n.DefaultNumberRule,"1,00",1,5
net.sf.freecol.common.i18n.DualNumberRule,"3,00",3,3
net.sf.freecol.common.i18n.Merge,"1,00",1,1
net.sf.freecol.common.i18n.MergeTableCellRenderer,"2,50",3,5
net.sf.freecol.common.i18n.MergeTableModel,"1,67",3,15
net.sf.freecol.common.i18n.MessageMerge,"2,00",6,16
net.sf.freecol.common.i18n.Messages,"3,79",23,129
net.sf.freecol.common.i18n.MessagesTest,"1,29",4,18
net.sf.freecol.common.i18n.NameCache,"2,63",8,71
net.sf.freecol.common.i18n.Number,"1,00",1,2
net.sf.freecol.common.i18n.Number.Category,n/a,n/a,0
net.sf.freecol.common.i18n.NumberRules,"4,50",15,27
net.sf.freecol.common.i18n.OtherNumberRule,"1,00",1,1
net.sf.freecol.common.i18n.PluralNumberRule,"2,00",2,2
net.sf.freecol.common.i18n.Relation,"2,70",7,27
net.sf.freecol.common.i18n.Rule,"2,00",3,12
net.sf.freecol.common.i18n.ZeroOneNumberRule,"2,00",2,2
net.sf.freecol.common.io.AllTests,"1,00",1,1
net.sf.freecol.common.io.FreeColDataFile,"2,44",5,44
net.sf.freecol.common.io.FreeColDirectories,"2,26",12,163
net.sf.freecol.common.io.FreeColModFile,"1,36",3,15
net.sf.freecol.common.io.FreeColRules,"2,00",3,6
net.sf.freecol.common.io.FreeColSavegameFile,"1,12",2,9
net.sf.freecol.common.io.FreeColTcFile,"1,33",2,4
net.sf.freecol.common.io.FreeColXMLReader,"2,47",9,121
net.sf.freecol.common.io.FreeColXMLReader.ReadScope,n/a,n/a,0
net.sf.freecol.common.io.FreeColXMLWriter,"1,17",3,62
net.sf.freecol.common.io.FreeColXMLWriter.WriteScope,"1,22",3,11
net.sf.freecol.common.io.FreeColXMLWriter.WriteScopeType,n/a,n/a,0
net.sf.freecol.common.io.ModTest,"2,00",2,4
net.sf.freecol.common.io.sza.SimpleZippedAnimation,"1,80",8,18
net.sf.freecol.common.io.sza.SimpleZippedAnimation.ImageAnimationEventImpl,"1,00",1,6
net.sf.freecol.common.logging.DefaultHandler,"2,50",5,10
net.sf.freecol.common.logging.TextFormatter,"1,50",2,3
net.sf.freecol.common.metaserver.MetaServerUtils,"2,55",8,28
net.sf.freecol.common.metaserver.MetaServerUtils.MetaInputHandler,"2,33",5,7
net.sf.freecol.common.metaserver.MetaServerUtils.MetaMessageType,n/a,n/a,0
net.sf.freecol.common.metaserver.ServerInfo,"1,20",3,18
net.sf.freecol.common.model.Ability,"1,40",3,21
net.sf.freecol.common.model.AbstractGoods,"1,30",3,30
net.sf.freecol.common.model.AbstractUnit,"1,17",4,34
net.sf.freecol.common.model.AllTests,"1,00",1,1
net.sf.freecol.common.model.BaseCostDeciderTest,"1,25",2,10
net.sf.freecol.common.model.BuildQueue,"1,53",5,26
net.sf.freecol.common.model.BuildQueue.CompletionAction,n/a,n/a,0
net.sf.freecol.common.model.BuildableType,"2,04",8,55
net.sf.freecol.common.model.Building,"1,45",5,61
net.sf.freecol.common.model.BuildingTest,"2,32",10,51
net.sf.freecol.common.model.BuildingType,"2,27",10,84
net.sf.freecol.common.model.ClassicTileProductionTest,"3,08",6,37
net.sf.freecol.common.model.ClassicTileProductionTest.ProductionTestCombination,"1,00",1,1
net.sf.freecol.common.model.ClassicTileProductionTest.TileImprovementTypeWithMagnitude,"1,00",1,3
net.sf.freecol.common.model.Colony,"2,15",11,396
net.sf.freecol.common.model.Colony.ColonyChangeEvent,n/a,n/a,0
net.sf.freecol.common.model.Colony.NoBuildReason,n/a,n/a,0
net.sf.freecol.common.model.Colony.TileImprovementSuggestion,"1,00",1,3
net.sf.freecol.common.model.ColonyProductionTest,"2,12",6,17
net.sf.freecol.common.model.ColonyTest,"2,09",9,23
net.sf.freecol.common.model.ColonyTile,"1,94",14,68
net.sf.freecol.common.model.ColonyTradeItem,"1,44",4,23
net.sf.freecol.common.model.ColonyWas,"3,00",5,6
net.sf.freecol.common.model.CombatModel,"1,11",2,10
net.sf.freecol.common.model.CombatModel.CombatEffectType,n/a,n/a,0
net.sf.freecol.common.model.CombatModel.CombatOdds,"1,00",1,1
net.sf.freecol.common.model.CombatModel.CombatResult,"1,00",1,7
net.sf.freecol.common.model.CombatTest,"3,70",16,37
net.sf.freecol.common.model.Constants.ArmedUnitSettlementAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.BoycottAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.ClaimAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.IndianDemandAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.IntegrityType,"1,00",1,5
net.sf.freecol.common.model.Constants.MissionaryAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.ScoutColonyAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.ScoutIndianSettlementAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.TradeAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.TradeBuyAction,n/a,n/a,0
net.sf.freecol.common.model.Constants.TradeSellAction,n/a,n/a,0
net.sf.freecol.common.model.DiplomaticTrade,"1,39",7,53
net.sf.freecol.common.model.DiplomaticTrade.TradeContext,"1,00",1,1
net.sf.freecol.common.model.DiplomaticTrade.TradeStatus,n/a,n/a,0
net.sf.freecol.common.model.Direction,"1,85",8,24
net.sf.freecol.common.model.Disaster,"1,86",5,26
net.sf.freecol.common.model.Disaster.Effects,n/a,n/a,0
net.sf.freecol.common.model.DisasterTest,"5,00",5,5
net.sf.freecol.common.model.Effect,"1,22",2,11
net.sf.freecol.common.model.Europe,"1,73",7,78
net.sf.freecol.common.model.Europe.MigrationType,"1,10",2,11
net.sf.freecol.common.model.EuropeTest,"1,00",1,1
net.sf.freecol.common.model.EuropeWas,"1,67",2,5
net.sf.freecol.common.model.EuropeanNationType,"1,78",6,32
net.sf.freecol.common.model.Event,"1,61",3,29
net.sf.freecol.common.model.ExportData,"1,11",2,20
net.sf.freecol.common.model.Feature,"1,87",12,58
net.sf.freecol.common.model.FeatureContainer,"3,23",12,84
net.sf.freecol.common.model.Force,"2,00",6,42
net.sf.freecol.common.model.FoundingFather,"1,84",4,35
net.sf.freecol.common.model.FoundingFather.FoundingFatherType,"1,00",1,2
net.sf.freecol.common.model.FoundingFatherTest,"2,25",4,9
net.sf.freecol.common.model.FreeColGameObject,"1,58",5,38
net.sf.freecol.common.model.FreeColObject,"1,61",9,159
net.sf.freecol.common.model.FreeColSpecObject,"1,25",2,5
net.sf.freecol.common.model.FreeColSpecObjectType,"1,59",8,35
net.sf.freecol.common.model.Game,"1,95",11,199
net.sf.freecol.common.model.Game.FcgoState,n/a,n/a,0
net.sf.freecol.common.model.Game.LogoutReason,n/a,n/a,0
net.sf.freecol.common.model.GameTest,"1,67",3,5
net.sf.freecol.common.model.GoldTradeItem,"1,27",3,19
net.sf.freecol.common.model.Goods,"1,52",4,35
net.sf.freecol.common.model.GoodsContainer,"1,62",3,65
net.sf.freecol.common.model.GoodsContainerTest,"1,00",1,1
net.sf.freecol.common.model.GoodsLocation,"1,76",4,44
net.sf.freecol.common.model.GoodsTest,"1,00",1,15
net.sf.freecol.common.model.GoodsTradeItem,"1,56",5,25
net.sf.freecol.common.model.GoodsType,"1,61",8,71
net.sf.freecol.common.model.HighScore,"1,86",8,52
net.sf.freecol.common.model.HighScore.ScoreLevel,"1,00",1,2
net.sf.freecol.common.model.HighScoreTest,"1,00",1,1
net.sf.freecol.common.model.HighSeas,"1,37",3,26
net.sf.freecol.common.model.HighSeasTest,"1,00",1,1
net.sf.freecol.common.model.HistoryEvent,"1,71",6,29
net.sf.freecol.common.model.HistoryEvent.HistoryEventType,"1,00",1,3
net.sf.freecol.common.model.HitpointsCombatModel,"5,00",9,10
net.sf.freecol.common.model.InciteTradeItem,"1,36",4,19
net.sf.freecol.common.model.IndianNationType,"2,06",7,35
net.sf.freecol.common.model.IndianSettlement,"2,09",9,207
net.sf.freecol.common.model.IndianSettlement.ContactLevel,n/a,n/a,0
net.sf.freecol.common.model.IndianSettlementTest,"1,00",1,3
net.sf.freecol.common.model.IndividualFatherTest,"1,55",6,17
net.sf.freecol.common.model.LandMap,"3,17",10,57
net.sf.freecol.common.model.LastSale,"1,08",2,13
net.sf.freecol.common.model.Limit,"2,27",9,50
net.sf.freecol.common.model.Limit.Operator,n/a,n/a,0
net.sf.freecol.common.model.LimitTest,"1,00",1,4
net.sf.freecol.common.model.LostCityRumour,"1,73",11,38
net.sf.freecol.common.model.LostCityRumour.RumourType,"1,00",1,3
net.sf.freecol.common.model.Map,"3,41",68,351
net.sf.freecol.common.model.Map.CircleIterator,"3,50",10,21
net.sf.freecol.common.model.Map.Layer,n/a,n/a,0
net.sf.freecol.common.model.Map.MoveCandidate,"1,71",4,12
net.sf.freecol.common.model.Map.MoveStep,n/a,n/a,0
net.sf.freecol.common.model.Map.Position,"1,42",3,17
net.sf.freecol.common.model.MapTest,"1,41",5,31
net.sf.freecol.common.model.Market,"1,50",3,69
net.sf.freecol.common.model.Market.Access,n/a,n/a,0
net.sf.freecol.common.model.MarketData,"1,37",10,41
net.sf.freecol.common.model.MarketTest,"1,50",2,6
net.sf.freecol.common.model.MarketWas,"2,60",6,13
net.sf.freecol.common.model.ModelMessage,"2,14",8,60
net.sf.freecol.common.model.ModelMessage.MessageType,"1,00",1,4
net.sf.freecol.common.model.ModelMessageTest,"1,00",1,3
net.sf.freecol.common.model.Modifier,"1,64",5,54
net.sf.freecol.common.model.Modifier.ModifierType,n/a,n/a,0
net.sf.freecol.common.model.ModifierTest,"1,00",1,12
net.sf.freecol.common.model.Monarch,"3,11",15,112
net.sf.freecol.common.model.Monarch.MonarchAction,"1,00",1,5
net.sf.freecol.common.model.MonarchTest,"1,67",3,5
net.sf.freecol.common.model.MovementTest,"1,00",1,6
net.sf.freecol.common.model.Nation,"1,44",4,26
net.sf.freecol.common.model.NationOptions,"1,80",7,27
net.sf.freecol.common.model.NationOptions.Advantages,"1,00",1,3
net.sf.freecol.common.model.NationOptions.NationState,"1,00",1,3
net.sf.freecol.common.model.NationSummary,"1,47",4,22
net.sf.freecol.common.model.NationType,"1,69",5,27
net.sf.freecol.common.model.NationType.AggressionLevel,"1,00",1,1
net.sf.freecol.common.model.NationType.SettlementNumber,"1,00",1,1
net.sf.freecol.common.model.NationTypeTest,"3,17",10,19
net.sf.freecol.common.model.NativeTrade,"1,45",8,61
net.sf.freecol.common.model.NativeTrade.NativeTradeAction,"1,00",1,3
net.sf.freecol.common.model.NativeTradeItem,"1,12",2,19
net.sf.freecol.common.model.ObjectWas,n/a,n/a,0
net.sf.freecol.common.model.Occupation,"2,83",6,17
net.sf.freecol.common.model.Operand,"2,75",13,55
net.sf.freecol.common.model.Operand.OperandType,n/a,n/a,0
net.sf.freecol.common.model.Operand.ScopeLevel,n/a,n/a,0
net.sf.freecol.common.model.PathNode,"1,65",4,43
net.sf.freecol.common.model.PathfindingTest,"1,31",2,17
net.sf.freecol.common.model.Player,"1,97",45,536
net.sf.freecol.common.model.Player.ColonyValueCategory,"1,00",1,1
net.sf.freecol.common.model.Player.NoClaimReason,"1,00",1,3
net.sf.freecol.common.model.Player.NoValueType,"1,25",2,5
net.sf.freecol.common.model.Player.PlayerType,n/a,n/a,0
net.sf.freecol.common.model.PlayerTest,"1,38",4,11
net.sf.freecol.common.model.PlunderType,"1,29",2,9
net.sf.freecol.common.model.ProductionCache,"2,18",12,24
net.sf.freecol.common.model.ProductionInfo,"1,67",4,30
net.sf.freecol.common.model.ProductionMap,"2,67",6,16
net.sf.freecol.common.model.ProductionMap.ProductionTree,"2,11",4,19
net.sf.freecol.common.model.ProductionType,"2,11",7,74
net.sf.freecol.common.model.ProductionTypeTest,"1,14",4,41
net.sf.freecol.common.model.RandomRange,"1,44",3,13
net.sf.freecol.common.model.RandomRangeTest,"2,00",2,2
net.sf.freecol.common.model.Region,"1,76",7,67
net.sf.freecol.common.model.Region.RegionType,"1,00",1,5
net.sf.freecol.common.model.Resource,"1,40",3,35
net.sf.freecol.common.model.ResourceType,"1,38",2,11
net.sf.freecol.common.model.Role,"1,63",5,57
net.sf.freecol.common.model.Role.RoleChange,"1,00",1,3
net.sf.freecol.common.model.RoleTest,"1,00",1,5
net.sf.freecol.common.model.SchoolTest,"1,80",5,9
net.sf.freecol.common.model.SchoolTest.SchoolLevel,n/a,n/a,0
net.sf.freecol.common.model.Scope,"2,92",18,76
net.sf.freecol.common.model.ScopeContainer,"2,19",8,57
net.sf.freecol.common.model.ScopeTest,"1,00",1,8
net.sf.freecol.common.model.SerializationTest,"1,20",2,12
net.sf.freecol.common.model.Settlement,"1,75",7,93
net.sf.freecol.common.model.SettlementTest,"1,33",2,8
net.sf.freecol.common.model.SettlementType,"1,85",11,48
net.sf.freecol.common.model.SimpleCombatModel,"6,21",38,118
net.sf.freecol.common.model.SoLTest,"2,00",2,2
net.sf.freecol.common.model.Specification,"2,49",48,359
net.sf.freecol.common.model.Specification.AbilityReader,"2,00",2,2
net.sf.freecol.common.model.Specification.ModifierReader,"2,00",2,2
net.sf.freecol.common.model.Specification.OptionReader,"2,50",3,5
net.sf.freecol.common.model.Specification.Source,"1,00",1,4
net.sf.freecol.common.model.Specification.TypeReader,"4,50",8,9
net.sf.freecol.common.model.SpecificationTest,"1,67",7,20
net.sf.freecol.common.model.Stance,"5,44",31,49
net.sf.freecol.common.model.StanceTradeItem,"1,67",9,25
net.sf.freecol.common.model.StringTemplate,"2,07",10,89
net.sf.freecol.common.model.StringTemplate.TemplateType,n/a,n/a,0
net.sf.freecol.common.model.Tension,"1,36",3,15
net.sf.freecol.common.model.Tension.Level,"1,00",1,3
net.sf.freecol.common.model.Tile,"2,26",22,366
net.sf.freecol.common.model.Tile.IndianSettlementInternals,"2,00",3,4
net.sf.freecol.common.model.TileImprovement,"2,84",15,125
net.sf.freecol.common.model.TileImprovementStyle,"2,20",4,11
net.sf.freecol.common.model.TileImprovementTest,"1,00",1,4
net.sf.freecol.common.model.TileImprovementType,"1,90",6,78
net.sf.freecol.common.model.TileItem,"1,40",2,14
net.sf.freecol.common.model.TileItemContainer,"2,00",8,78
net.sf.freecol.common.model.TileItemContainerTest,"3,00",5,6
net.sf.freecol.common.model.TileTest,"2,94",14,47
net.sf.freecol.common.model.TileTest.Work,"1,00",1,1
net.sf.freecol.common.model.TileType,"1,93",14,81
net.sf.freecol.common.model.TileType.RangeType,n/a,n/a,0
net.sf.freecol.common.model.TileTypeChange,"1,46",4,19
net.sf.freecol.common.model.TradeItem,"1,13",2,26
net.sf.freecol.common.model.TradeRoute,"1,74",9,54
net.sf.freecol.common.model.TradeRouteStop,"1,39",3,39
net.sf.freecol.common.model.TradeRouteTest,"1,00",1,1
net.sf.freecol.common.model.Turn,"1,41",3,31
net.sf.freecol.common.model.TypeCountMap,"1,25",3,15
net.sf.freecol.common.model.Unit,"2,51",23,676
net.sf.freecol.common.model.Unit.ClosestSettlementGoalDecider,"1,50",3,6
net.sf.freecol.common.model.Unit.MoveType,"1,17",2,7
net.sf.freecol.common.model.Unit.PortMode,n/a,n/a,0
net.sf.freecol.common.model.Unit.UnitLabelType,n/a,n/a,0
net.sf.freecol.common.model.Unit.UnitState,"1,00",1,1
net.sf.freecol.common.model.UnitChangeType,"1,56",3,25
net.sf.freecol.common.model.UnitChangeTypeTest,"1,33",2,4
net.sf.freecol.common.model.UnitIterator,"2,00",6,16
net.sf.freecol.common.model.UnitLocation,"1,64",6,64
net.sf.freecol.common.model.UnitLocation.NoAddReason,"1,00",1,2
net.sf.freecol.common.model.UnitTest,"1,47",5,25
net.sf.freecol.common.model.UnitTradeItem,"1,33",4,20
net.sf.freecol.common.model.UnitType,"1,75",12,112
net.sf.freecol.common.model.UnitTypeChange,"1,50",2,12
net.sf.freecol.common.model.UnitWas,"4,64",18,51
net.sf.freecol.common.model.WorkLocation,"2,24",9,112
net.sf.freecol.common.model.WorkLocation.Suggestion,"1,00",1,4
net.sf.freecol.common.model.mission.AbstractMission,"1,00",1,13
net.sf.freecol.common.model.mission.CompoundMission,"1,64",6,23
net.sf.freecol.common.model.mission.GoToMission,"1,00",1,13
net.sf.freecol.common.model.mission.ImprovementMission,"1,18",3,13
net.sf.freecol.common.model.mission.Mission.MissionState,n/a,n/a,0
net.sf.freecol.common.model.mission.MissionManager,"1,50",2,3
net.sf.freecol.common.model.pathfinding.BaseCostDecider,"4,25",13,17
net.sf.freecol.common.model.pathfinding.CostDeciders,"1,84",4,35
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidNavalDangerCostDecider,"4,00",4,4
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsAndBlockingUnitsCostDecider,"4,00",4,4
net.sf.freecol.common.model.pathfinding.CostDeciders.AvoidSettlementsCostDecider,"3,00",3,3
net.sf.freecol.common.model.pathfinding.CostDeciders.ServerBaseCostDecider,"4,00",4,4
net.sf.freecol.common.model.pathfinding.CostDeciders.TileCostDecider,"4,00",4,4
net.sf.freecol.common.model.pathfinding.GoalDeciders,"1,73",2,76
net.sf.freecol.common.model.pathfinding.GoalDeciders.MultipleAdjacentDecider,"1,50",4,9
net.sf.freecol.common.model.production.BuildingProductionCalculator,"3,73",20,41
net.sf.freecol.common.model.production.ProductionUtils,"2,75",6,11
net.sf.freecol.common.model.production.TileProductionCalculator,"2,43",5,17
net.sf.freecol.common.model.production.WorkerAssignment,"1,00",1,3
net.sf.freecol.common.networking.AbandonColonyMessage,"1,20",2,6
net.sf.freecol.common.networking.AddPlayerMessage,"1,86",4,13
net.sf.freecol.common.networking.AnimateAttackMessage,"2,45",6,27
net.sf.freecol.common.networking.AnimateMoveMessage,"2,50",5,20
net.sf.freecol.common.networking.AskSkillMessage,"1,40",3,7
net.sf.freecol.common.networking.AssignTeacherMessage,"2,20",7,11
net.sf.freecol.common.networking.AssignTradeRouteMessage,"1,33",2,8
net.sf.freecol.common.networking.AttackMessage,"1,60",4,8
net.sf.freecol.common.networking.AttackRangedMessage,"1,60",4,8
net.sf.freecol.common.networking.AttributeMessage,"1,09",2,12
net.sf.freecol.common.networking.BuildColonyMessage,"2,00",6,10
net.sf.freecol.common.networking.CashInTreasureTrainMessage,"1,40",3,7
net.sf.freecol.common.networking.ChangeSet,"1,69",11,61
net.sf.freecol.common.networking.ChangeSet.AttackChange,"2,00",4,12
net.sf.freecol.common.networking.ChangeSet.AttributeChange,"1,00",1,3
net.sf.freecol.common.networking.ChangeSet.Change,"1,00",1,5
net.sf.freecol.common.networking.ChangeSet.FeatureChange,"1,75",3,7
net.sf.freecol.common.networking.ChangeSet.MessageChange,"1,33",2,4
net.sf.freecol.common.networking.ChangeSet.MoveChange,"2,00",5,14
net.sf.freecol.common.networking.ChangeSet.ObjectChange,"3,00",9,15
net.sf.freecol.common.networking.ChangeSet.PartialObjectChange,"1,33",2,4
net.sf.freecol.common.networking.ChangeSet.PlayerChange,"1,67",2,5
net.sf.freecol.common.networking.ChangeSet.RemoveChange,"2,33",4,14
net.sf.freecol.common.networking.ChangeSet.See,"2,22",7,20
net.sf.freecol.common.networking.ChangeSet.SeeCheck,n/a,n/a,0
net.sf.freecol.common.networking.ChangeSet.SpyChange,"1,33",2,4
net.sf.freecol.common.networking.ChangeSet.StanceChange,"1,33",2,4
net.sf.freecol.common.networking.ChangeStateMessage,"1,20",2,6
net.sf.freecol.common.networking.ChangeWorkImprovementTypeMessage,"2,60",9,13
net.sf.freecol.common.networking.ChangeWorkTypeMessage,"1,40",3,7
net.sf.freecol.common.networking.ChatMessage,"1,20",3,12
net.sf.freecol.common.networking.ChooseFoundingFatherMessage,"1,50",3,18
net.sf.freecol.common.networking.ClaimLandMessage,"4,80",20,24
net.sf.freecol.common.networking.ClearSpecialityMessage,"1,00",1,5
net.sf.freecol.common.networking.CloseMessage,"1,00",1,6
net.sf.freecol.common.networking.Connection,"1,77",5,62
net.sf.freecol.common.networking.ConnectionVerificationMessage,"1,00",1,3
net.sf.freecol.common.networking.ContinueMessage,"1,00",1,3
net.sf.freecol.common.networking.DeclareIndependenceMessage,"1,60",4,8
net.sf.freecol.common.networking.DeclineMoundsMessage,"1,20",2,6
net.sf.freecol.common.networking.DeleteTradeRouteMessage,"1,00",1,6
net.sf.freecol.common.networking.DeliverGiftMessage,"1,83",4,11
net.sf.freecol.common.networking.DemandTributeMessage,"1,60",4,8
net.sf.freecol.common.networking.DiplomacyMessage,"5,08",45,66
net.sf.freecol.common.networking.DisbandUnitMessage,"1,00",1,5
net.sf.freecol.common.networking.DisconnectMessage,"1,00",1,5
net.sf.freecol.common.networking.DisembarkMessage,"1,00",1,5
net.sf.freecol.common.networking.EmbarkMessage,"2,00",5,10
net.sf.freecol.common.networking.EmigrateUnitMessage,"2,40",8,12
net.sf.freecol.common.networking.EndTurnMessage,"1,00",1,4
net.sf.freecol.common.networking.EnterRevengeModeMessage,"1,00",1,3
net.sf.freecol.common.networking.EquipForRoleMessage,"2,00",6,10
net.sf.freecol.common.networking.ErrorMessage,"1,36",4,15
net.sf.freecol.common.networking.FeatureChangeMessage,"2,11",7,19
net.sf.freecol.common.networking.FirstContactMessage,"1,75",5,21
net.sf.freecol.common.networking.FountainOfYouthMessage,"1,17",2,7
net.sf.freecol.common.networking.GameEndedMessage,"1,29",3,9
net.sf.freecol.common.networking.GameStateMessage,"1,29",2,9
net.sf.freecol.common.networking.HighScoresMessage,"1,29",3,9
net.sf.freecol.common.networking.InciteMessage,"1,40",5,14
net.sf.freecol.common.networking.IndianDemandMessage,"1,92",7,23
net.sf.freecol.common.networking.JoinColonyMessage,"1,00",1,5
net.sf.freecol.common.networking.LearnSkillMessage,"1,40",3,7
net.sf.freecol.common.networking.LoadGoodsMessage,"2,00",6,10
net.sf.freecol.common.networking.LoginMessage,"2,65",8,45
net.sf.freecol.common.networking.LogoutMessage,"2,62",12,21
net.sf.freecol.common.networking.LootCargoMessage,"1,44",4,13
net.sf.freecol.common.networking.Message,"1,91",5,65
net.sf.freecol.common.networking.Message.MessagePriority,"1,00",1,2
net.sf.freecol.common.networking.MissionaryMessage,"2,80",10,14
net.sf.freecol.common.networking.MonarchActionMessage,"1,50",5,21
net.sf.freecol.common.networking.MoveMessage,"1,20",2,6
net.sf.freecol.common.networking.MoveToMessage,"1,20",2,6
net.sf.freecol.common.networking.MultipleMessage,"3,20",7,32
net.sf.freecol.common.networking.NationSummaryMessage,"1,62",4,13
net.sf.freecol.common.networking.NativeGiftMessage,"1,00",1,6
net.sf.freecol.common.networking.NativeTradeMessage,"1,89",6,17
net.sf.freecol.common.networking.NetworkReplyObject,"1,60",3,8
net.sf.freecol.common.networking.NewLandNameMessage,"1,50",4,12
net.sf.freecol.common.networking.NewRegionNameMessage,"1,40",4,14
net.sf.freecol.common.networking.NewTradeRouteMessage,"1,50",4,12
net.sf.freecol.common.networking.NewTurnMessage,"1,17",2,7
net.sf.freecol.common.networking.ObjectMessage,"1,25",2,10
net.sf.freecol.common.networking.PartialMessage,"1,60",4,8
net.sf.freecol.common.networking.PayArrearsMessage,"1,00",1,5
net.sf.freecol.common.networking.PayForBuildingMessage,"1,00",1,5
net.sf.freecol.common.networking.PutOutsideColonyMessage,"1,40",3,7
net.sf.freecol.common.networking.QuestionMessage,"1,00",1,2
net.sf.freecol.common.networking.ReadyMessage,"1,43",2,10
net.sf.freecol.common.networking.RearrangeColonyMessage,"2,11",7,19
net.sf.freecol.common.networking.RearrangeColonyMessage.Arrangement,"1,42",3,17
net.sf.freecol.common.networking.ReceivingThread,"2,42",8,29
net.sf.freecol.common.networking.ReceivingThread.QuestionThread,"1,50",2,3
net.sf.freecol.common.networking.ReceivingThread.UpdateThread,"1,50",2,3
net.sf.freecol.common.networking.ReconnectMessage,"1,00",1,4
net.sf.freecol.common.networking.RegisterServerMessage,"1,00",1,2
net.sf.freecol.common.networking.RemoveMessage,"1,38",3,11
net.sf.freecol.common.networking.RemoveServerMessage,"1,00",1,2
net.sf.freecol.common.networking.RenameMessage,"1,20",2,6
net.sf.freecol.common.networking.ReplyMessage,"1,00",1,2
net.sf.freecol.common.networking.RequestLaunchMessage,"1,00",1,3
net.sf.freecol.common.networking.RetireMessage,"1,00",1,3
net.sf.freecol.common.networking.ScoutIndianSettlementMessage,"1,60",4,8
net.sf.freecol.common.networking.ScoutSpeakToChiefMessage,"1,30",3,13
net.sf.freecol.common.networking.ServerAPI,"1,09",3,89
net.sf.freecol.common.networking.ServerInfoMessage,"1,00",1,6
net.sf.freecol.common.networking.ServerListMessage,"1,50",3,9
net.sf.freecol.common.networking.SetAIMessage,"1,29",2,9
net.sf.freecol.common.networking.SetAvailableMessage,"1,14",2,8
net.sf.freecol.common.networking.SetBuildQueueMessage,"1,00",1,8
net.sf.freecol.common.networking.SetColorMessage,"1,71",4,12
net.sf.freecol.common.networking.SetCurrentPlayerMessage,"1,33",2,8
net.sf.freecol.common.networking.SetCurrentStopMessage,"1,50",3,6
net.sf.freecol.common.networking.SetDeadMessage,"1,17",2,7
net.sf.freecol.common.networking.SetDestinationMessage,"1,50",2,6
net.sf.freecol.common.networking.SetGoodsLevelsMessage,"1,67",4,10
net.sf.freecol.common.networking.SetNationMessage,"2,14",5,15
net.sf.freecol.common.networking.SetNationTypeMessage,"2,00",7,14
net.sf.freecol.common.networking.SetStanceMessage,"1,25",3,10
net.sf.freecol.common.networking.SpySettlementMessage,"2,00",5,18
net.sf.freecol.common.networking.StartGameMessage,"1,00",1,4
net.sf.freecol.common.networking.TrainUnitInEuropeMessage,"1,20",2,6
net.sf.freecol.common.networking.TrivialMessage,"1,22",2,22
net.sf.freecol.common.networking.UnloadGoodsMessage,"1,80",5,9
net.sf.freecol.common.networking.UpdateGameOptionsMessage,"2,33",5,14
net.sf.freecol.common.networking.UpdateMapGeneratorOptionsMessage,"2,33",5,14
net.sf.freecol.common.networking.UpdateMessage,"1,56",3,14
net.sf.freecol.common.networking.UpdateServerMessage,"1,00",1,2
net.sf.freecol.common.networking.UpdateTradeRouteMessage,"1,80",4,9
net.sf.freecol.common.networking.VacantPlayersMessage,"1,14",2,8
net.sf.freecol.common.networking.WorkMessage,"2,00",6,10
net.sf.freecol.common.networking.WrapperMessage,"1,78",3,16
net.sf.freecol.common.option.AbstractOption,"2,69",19,35
net.sf.freecol.common.option.AbstractUnitOption,"1,95",6,41
net.sf.freecol.common.option.AllTests,"1,00",1,1
net.sf.freecol.common.option.AudioMixerOption,"1,70",4,17
net.sf.freecol.common.option.AudioMixerOption.MixerWrapper,"1,43",3,10
net.sf.freecol.common.option.BooleanOption,"1,22",2,11
net.sf.freecol.common.option.FileOption,"1,75",3,21
net.sf.freecol.common.option.GameOptions,"1,00",1,1
net.sf.freecol.common.option.IntegerOption,"1,42",5,27
net.sf.freecol.common.option.LanguageOption,"1,70",4,17
net.sf.freecol.common.option.LanguageOption.Language,"1,44",3,13
net.sf.freecol.common.option.ListOption,"1,59",4,35
net.sf.freecol.common.option.MapGeneratorOptions,"1,00",1,1
net.sf.freecol.common.option.ModListOption,"1,00",1,4
net.sf.freecol.common.option.ModOption,"1,50",3,18
net.sf.freecol.common.option.OptionGroup,"2,14",12,77
net.sf.freecol.common.option.OptionTest,"2,00",4,8
net.sf.freecol.common.option.PercentageOption,"1,00",1,4
net.sf.freecol.common.option.RangeOption,"1,67",3,10
net.sf.freecol.common.option.SelectOption,"1,38",5,22
net.sf.freecol.common.option.StringOption,"1,43",3,20
net.sf.freecol.common.option.TextOption,"1,22",2,11
net.sf.freecol.common.option.UnitListOption,"1,00",1,4
net.sf.freecol.common.option.UnitTypeOption,"1,94",8,35
net.sf.freecol.common.option.UnitTypeOption.TypeSelector,n/a,n/a,0
net.sf.freecol.common.resources.AudioResource,"1,75",3,7
net.sf.freecol.common.resources.ColorResource,"1,67",4,10
net.sf.freecol.common.resources.FAFile,"5,00",1,30
net.sf.freecol.common.resources.FAFile.CREatingInputStream,"1,50",2,3
net.sf.freecol.common.resources.FAFile.FALetter,n/a,n/a,0
net.sf.freecol.common.resources.FAFile.FAName,n/a,n/a,0
net.sf.freecol.common.resources.FAFileResource,"1,00",1,4
net.sf.freecol.common.resources.FontResource,"1,40",2,7
net.sf.freecol.common.resources.ImageCache,"2,00",5,28
net.sf.freecol.common.resources.ImageResource,"2,14",8,45
net.sf.freecol.common.resources.PropertyList,"1,75",2,7
net.sf.freecol.common.resources.Resource,"1,00",1,4
net.sf.freecol.common.resources.ResourceFactory,"15,00",15,15
net.sf.freecol.common.resources.ResourceManager,"1,91",3,61
net.sf.freecol.common.resources.ResourceMapping,"2,62",2,42
net.sf.freecol.common.resources.ResourceMapping.ResourceType,"1,50",2,3
net.sf.freecol.common.resources.SZAResource,"1,50",2,6
net.sf.freecol.common.resources.StringResource,"1,67",3,5
net.sf.freecol.common.resources.Video,"1,00",1,2
net.sf.freecol.common.resources.VideoResource,"1,00",1,3
net.sf.freecol.common.sound.AllTests,"1,00",1,1
net.sf.freecol.common.sound.OggVorbisDecoderFactory,"1,00",1,2
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggStream,"4,36",14,61
net.sf.freecol.common.sound.OggVorbisDecoderFactory.OggVorbisAudioInputStream,"1,00",1,11
net.sf.freecol.common.sound.SoundPlayer,"1,82",6,20
net.sf.freecol.common.sound.SoundPlayer.SoundPlayerThread,"2,33",5,14
net.sf.freecol.common.sound.SoundTest,"1,00",1,5
net.sf.freecol.common.util.CachingFunction,"1,50",2,3
net.sf.freecol.common.util.CollectionUtils,"1,49",7,269
net.sf.freecol.common.util.ImageUtils,"1,93",5,27
net.sf.freecol.common.util.Introspector,"1,88",8,30
net.sf.freecol.common.util.Introspector.IntrospectorException,"1,00",1,2
net.sf.freecol.common.util.LogBuilder,"3,00",7,42
net.sf.freecol.common.util.OSUtils,"1,50",4,9
net.sf.freecol.common.util.RandomChoice,"2,00",4,16
net.sf.freecol.common.util.RandomUtils,"2,38",4,19
net.sf.freecol.common.util.RandomUtils.RandomIntCache,"1,25",2,5
net.sf.freecol.common.util.StringUtils,"2,87",12,43
net.sf.freecol.common.util.Utils,"1,90",4,40
net.sf.freecol.common.utils.AllTests,"1,00",1,1
net.sf.freecol.common.utils.UtilsTest,"1,67",2,5
net.sf.freecol.metaserver.MetaRegister,"1,82",3,20
net.sf.freecol.metaserver.MetaServer,"1,25",2,10
net.sf.freecol.metaserver.MetaServerHandler,"1,88",8,15
net.sf.freecol.server.AllTests,"1,00",1,1
net.sf.freecol.server.FreeColServer,"2,12",11,125
net.sf.freecol.server.FreeColServer.ServerState,"1,00",1,2
net.sf.freecol.server.SaveLoadTest,"1,00",1,4
net.sf.freecol.server.ServerTestHelper,"1,13",2,17
net.sf.freecol.server.ai.AIColony,"3,84",33,215
net.sf.freecol.server.ai.AIColonyTest,"2,14",5,15
net.sf.freecol.server.ai.AIGoods,"2,12",10,68
net.sf.freecol.server.ai.AIInGameInputHandler,"1,75",4,7
net.sf.freecol.server.ai.AIMain,"2,84",15,88
net.sf.freecol.server.ai.AIMessage,"1,00",1,38
net.sf.freecol.server.ai.AIObject,"1,27",2,19
net.sf.freecol.server.ai.AIPlayer,"1,53",5,58
net.sf.freecol.server.ai.AIServerAPI,"1,20",2,6
net.sf.freecol.server.ai.AIUnit,"2,72",20,155
net.sf.freecol.server.ai.AllTests,"1,00",1,1
net.sf.freecol.server.ai.Cargo,"1,98",6,83
net.sf.freecol.server.ai.Cargo.CargoMode,"1,00",1,1
net.sf.freecol.server.ai.Cargo.CargoPlan,"15,00",15,15
net.sf.freecol.server.ai.ColonyPlan,"8,38",59,218
net.sf.freecol.server.ai.ColonyPlan.BuildPlan,"1,00",1,3
net.sf.freecol.server.ai.ColonyPlan.ProfileType,"5,00",5,5
net.sf.freecol.server.ai.ColonyPlanTest,"1,75",4,14
net.sf.freecol.server.ai.ContactTest,"1,00",1,8
net.sf.freecol.server.ai.EuropeanAIPlayer,"6,40",70,525
net.sf.freecol.server.ai.GoodsWish,"1,39",3,25
net.sf.freecol.server.ai.MissionAIPlayer,"2,94",10,53
net.sf.freecol.server.ai.MissionAssignmentTest,"2,33",5,14
net.sf.freecol.server.ai.NativeAIPlayer,"7,86",31,165
net.sf.freecol.server.ai.REFAIPlayer,"13,50",56,135
net.sf.freecol.server.ai.REFAIPlayer.REFNavyGoalDecider,"1,25",2,5
net.sf.freecol.server.ai.REFAIPlayer.TargetTuple,"2,00",4,8
net.sf.freecol.server.ai.REFTest,"2,33",4,7
net.sf.freecol.server.ai.StandardAIPlayerTest,"4,25",7,17
net.sf.freecol.server.ai.TensionTest,"2,00",3,4
net.sf.freecol.server.ai.TileImprovementPlan,"1,64",4,36
net.sf.freecol.server.ai.TransportableAIObject,"2,00",7,30
net.sf.freecol.server.ai.ValuedAIObject,"1,11",2,10
net.sf.freecol.server.ai.Wish,"1,62",4,21
net.sf.freecol.server.ai.WorkLocationPlan,"1,00",1,8
net.sf.freecol.server.ai.WorkerWish,"1,60",3,24
net.sf.freecol.server.ai.military.DefensiveMap,"2,60",2,26
net.sf.freecol.server.ai.military.DefensiveMap.SearchNode,"1,00",1,3
net.sf.freecol.server.ai.military.DefensiveZone,"1,15",4,23
net.sf.freecol.server.ai.military.MilitaryCoordinator,"2,45",13,71
net.sf.freecol.server.ai.mission.AllTests,"1,00",1,1
net.sf.freecol.server.ai.mission.BuildColonyMission,"3,12",33,78
net.sf.freecol.server.ai.mission.CashInTreasureTrainMission,"2,38",13,62
net.sf.freecol.server.ai.mission.DefendSettlementMission,"2,83",27,65
net.sf.freecol.server.ai.mission.EscortUnitMission,"2,25",9,36
net.sf.freecol.server.ai.mission.IdleAtSettlementMission,"2,00",9,22
net.sf.freecol.server.ai.mission.IndianBringGiftMission,"2,88",21,49
net.sf.freecol.server.ai.mission.IndianDemandMission,"3,29",30,69
net.sf.freecol.server.ai.mission.Mission,"3,02",30,133
net.sf.freecol.server.ai.mission.MissionaryMission,"2,52",11,63
net.sf.freecol.server.ai.mission.PioneeringMission,"3,31",38,119
net.sf.freecol.server.ai.mission.PioneeringMissionTest,"1,00",1,2
net.sf.freecol.server.ai.mission.PrivateerMission,"2,92",16,73
net.sf.freecol.server.ai.mission.PrivateerMissionTest,"1,00",1,4
net.sf.freecol.server.ai.mission.ScoutingMission,"2,82",18,79
net.sf.freecol.server.ai.mission.ScoutingMissionTest,"1,00",1,2
net.sf.freecol.server.ai.mission.TransportMission,"4,02",30,257
net.sf.freecol.server.ai.mission.TransportMission.CargoResult,n/a,n/a,0
net.sf.freecol.server.ai.mission.TransportMissionTest,"1,00",1,7
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMission,"3,04",17,82
net.sf.freecol.server.ai.mission.UnitSeekAndDestroyMissionTest,"1,00",1,3
net.sf.freecol.server.ai.mission.UnitWanderHostileMission,"1,67",6,20
net.sf.freecol.server.ai.mission.UnitWanderMission,"1,11",2,10
net.sf.freecol.server.ai.mission.WishRealizationMission,"2,29",11,32
net.sf.freecol.server.ai.mission.WorkInsideColonyMission,"1,85",8,24
net.sf.freecol.server.control.AllTests,"1,00",1,1
net.sf.freecol.server.control.Controller,"1,50",2,3
net.sf.freecol.server.control.FreeColServerHolder,"1,00",1,3
net.sf.freecol.server.control.InGameController,"4,42",30,398
net.sf.freecol.server.control.InGameControllerTest,"1,17",4,48
net.sf.freecol.server.control.PreGameController,"1,64",6,18
net.sf.freecol.server.control.ServerInputHandler,"2,00",4,6
net.sf.freecol.server.control.UserConnectionHandler,"2,33",5,7
net.sf.freecol.server.generator.AllTests,"1,00",1,1
net.sf.freecol.server.generator.ColonizationMapLoader,"5,00",13,15
net.sf.freecol.server.generator.FreeColMapLoader,"5,00",13,15
net.sf.freecol.server.generator.MapGeneratorTest,"3,00",8,18
net.sf.freecol.server.generator.River,"2,75",15,44
net.sf.freecol.server.generator.River.DirectionChange,"14,00",14,14
net.sf.freecol.server.generator.RiverSection,"1,30",2,13
net.sf.freecol.server.generator.SimpleMapGenerator,"8,22",44,148
net.sf.freecol.server.generator.SimpleMapGenerator.Territory,"1,25",2,5
net.sf.freecol.server.generator.TerrainGenerator,"9,07",30,136
net.sf.freecol.server.model.AllTests,"1,00",1,1
net.sf.freecol.server.model.DiplomacySession,"1,45",4,32
net.sf.freecol.server.model.LootSession,"1,00",1,3
net.sf.freecol.server.model.MonarchSession,"1,80",7,18
net.sf.freecol.server.model.NativeDemandSession,"1,44",2,13
net.sf.freecol.server.model.NativeTradeSession,"1,20",2,6
net.sf.freecol.server.model.ServerBuilding,"2,89",6,26
net.sf.freecol.server.model.ServerBuildingTest,"1,48",6,37
net.sf.freecol.server.model.ServerBuildingTest.SchoolLevel,n/a,n/a,0
net.sf.freecol.server.model.ServerColony,"7,38",44,118
net.sf.freecol.server.model.ServerColonyTest,"1,50",2,12
net.sf.freecol.server.model.ServerColonyTile,"2,50",4,10
net.sf.freecol.server.model.ServerEurope,"2,31",7,30
net.sf.freecol.server.model.ServerGame,"3,86",31,85
net.sf.freecol.server.model.ServerIndianSettlement,"2,89",9,52
net.sf.freecol.server.model.ServerIndianSettlementTest,"1,25",2,5
net.sf.freecol.server.model.ServerPlayer,"5,72",108,601
net.sf.freecol.server.model.ServerPlayer.DeadCheck,n/a,n/a,0
net.sf.freecol.server.model.ServerPlayerTest,"1,44",4,23
net.sf.freecol.server.model.ServerRegion,"4,50",47,72
net.sf.freecol.server.model.ServerUnit,"8,24",34,140
net.sf.freecol.server.model.ServerUnitTest,"1,89",3,17
net.sf.freecol.server.model.Session,"1,36",3,19
net.sf.freecol.server.model.TimedSession,"1,25",2,5
net.sf.freecol.server.networking.DummyConnection,"1,25",3,10
net.sf.freecol.server.networking.Server,"1,77",4,23
net.sf.freecol.tools.ColonizationMapReader,"15,00",15,15
net.sf.freecol.tools.ColonizationSaveGameReader,"1,75",3,7
net.sf.freecol.tools.ColonizationSaveGameReader.Colonist,"1,50",2,3
net.sf.freecol.tools.ColonizationSaveGameReader.ColonyData,"3,00",4,6
net.sf.freecol.tools.ColonizationSaveGameReader.GameData,"1,00",1,3
net.sf.freecol.tools.ColonizationSaveGameReader.PlayerData,"1,50",2,3
net.sf.freecol.tools.DesktopEntry,"6,00",11,12
net.sf.freecol.tools.FSGConverter,"3,83",13,23
net.sf.freecol.tools.FlagTest,"3,00",8,21
net.sf.freecol.tools.ForestMaker,"22,00",22,22
net.sf.freecol.tools.ForestMaker.ImageLocation,"1,50",2,6
net.sf.freecol.tools.GenerateDocumentation,"2,86",6,20
net.sf.freecol.tools.InstallerTranslations,"5,67",9,17
net.sf.freecol.tools.MapConverter,"4,00",4,4
net.sf.freecol.tools.MergeTranslations,"4,67",7,14
net.sf.freecol.tools.RiverMaker,"4,00",8,16
net.sf.freecol.tools.SaveGameValidator,"6,00",6,6
net.sf.freecol.tools.Texture2Tile,"1,29",4,18
net.sf.freecol.tools.TranslationReport,"6,50",23,39
net.sf.freecol.tools.TranslationReport.LanguageStatsRecord,n/a,n/a,0
net.sf.freecol.util.test.FreeColTestCase,"1,93",8,52
net.sf.freecol.util.test.FreeColTestCase.IndianSettlementBuilder,"2,00",8,22
net.sf.freecol.util.test.FreeColTestCase.MapBuilder,"2,67",4,24
net.sf.freecol.util.test.FreeColTestUtils,"2,00",3,4
net.sf.freecol.util.test.FreeColTestUtils.ColonyBuilder,"2,10",7,21
net.sf.freecol.util.test.MockMapGenerator,"2,00",5,8
net.sf.freecol.util.test.MockPseudoRandom,"1,86",4,13

Package,v(G)avg,v(G)tot
net.sf.freecol,"3,50",245
net.sf.freecol.client,"2,21",177
net.sf.freecol.client.control,"4,87",1 212
net.sf.freecol.client.gui,"1,96",1 665
net.sf.freecol.client.gui.action,"1,60",404
net.sf.freecol.client.gui.animation,"3,36",47
net.sf.freecol.client.gui.dialog,"2,96",802
net.sf.freecol.client.gui.images,"3,62",105
net.sf.freecol.client.gui.label,"2,63",166
net.sf.freecol.client.gui.mapviewer,"3,24",644
net.sf.freecol.client.gui.menu,"1,75",63
net.sf.freecol.client.gui.option,"1,88",244
net.sf.freecol.client.gui.panel,"2,69",1 917
net.sf.freecol.client.gui.panel.colopedia,"2,89",214
net.sf.freecol.client.gui.panel.report,"4,27",675
net.sf.freecol.client.gui.plaf,"1,92",236
net.sf.freecol.client.gui.tooltip,"10,75",43
net.sf.freecol.client.gui.video,"1,50",12
net.sf.freecol.client.networking,"1,58",19
net.sf.freecol.common,"1,10",11
net.sf.freecol.common.debug,"3,00",207
net.sf.freecol.common.i18n,"2,96",373
net.sf.freecol.common.io,"2,22",503
net.sf.freecol.common.io.sza,"1,56",25
net.sf.freecol.common.logging,"3,50",21
net.sf.freecol.common.metaserver,"2,18",61
net.sf.freecol.common.model,"2,25",9 171
net.sf.freecol.common.model.mission,"1,38",73
net.sf.freecol.common.model.pathfinding,"4,10",160
net.sf.freecol.common.model.production,"3,40",85
net.sf.freecol.common.networking,"1,82",1 797
net.sf.freecol.common.option,"1,75",493
net.sf.freecol.common.resources,"2,37",313
net.sf.freecol.common.sound,"2,44",122
net.sf.freecol.common.util,"2,05",583
net.sf.freecol.common.utils,"1,50",6
net.sf.freecol.metaserver,"1,92",50
net.sf.freecol.server,"1,99",161
net.sf.freecol.server.ai,"3,95",2 483
net.sf.freecol.server.ai.military,"2,23",138
net.sf.freecol.server.ai.mission,"3,27",1 408
net.sf.freecol.server.control,"3,51",541
net.sf.freecol.server.generator,"6,01",463
net.sf.freecol.server.model,"4,52",1 577
net.sf.freecol.server.networking,"1,71",36
net.sf.freecol.tools,"4,23",292
net.sf.freecol.util.test,"2,30",161

Module,v(G)avg,v(G)tot
SE2324_55204_56837_58119_58427_58535_59472,"2,62",29 064
test,"1,81",1 140

Project,v(G)avg,v(G)tot
project,"2,58",30 204

